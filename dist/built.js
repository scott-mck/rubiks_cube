!function e(t,r,n){function i(a,s){if(!r[a]){if(!t[a]){var c="function"==typeof require&&require;if(!s&&c)return c(a,!0);if(o)return o(a,!0);throw new Error("Cannot find module '"+a+"'")}var l=r[a]={exports:{}};t[a][0].call(l.exports,function(e){var r=t[a][1][e];return i(r?r:e)},l,l.exports,e,t,r,n)}return r[a].exports}for(var o="function"==typeof require&&require,a=0;a<n.length;a++)i(n[a]);return i}({1:[function(e,t,r){!function(e,r){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?r(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return r(e)}:r(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function r(e,t){t=t||$;var r=t.createElement("script");r.text=e,t.head.appendChild(r).parentNode.removeChild(r)}function n(e){var t=!!e&&"length"in e&&e.length,r=pe.type(e);return"function"!==r&&!pe.isWindow(e)&&("array"===r||0===t||"number"==typeof t&&t>0&&t-1 in e)}function i(e,t,r){if(pe.isFunction(t))return pe.grep(e,function(e,n){return!!t.call(e,n,e)!==r});if(t.nodeType)return pe.grep(e,function(e){return e===t!==r});if("string"==typeof t){if(_e.test(t))return pe.filter(t,e,r);t=pe.filter(t,e)}return pe.grep(e,function(e){return ie.call(t,e)>-1!==r&&1===e.nodeType})}function o(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return pe.each(e.match(Ce)||[],function(e,r){t[r]=!0}),t}function s(e){return e}function c(e){throw e}function l(e,t,r){var n;try{e&&pe.isFunction(n=e.promise)?n.call(e).done(t).fail(r):e&&pe.isFunction(n=e.then)?n.call(e,t,r):t.call(void 0,e)}catch(e){r.call(void 0,e)}}function u(){$.removeEventListener("DOMContentLoaded",u),e.removeEventListener("load",u),pe.ready()}function h(){this.expando=pe.expando+h.uid++}function p(e,t,r){var n;if(void 0===r&&1===e.nodeType)if(n="data-"+t.replace(Fe,"-$&").toLowerCase(),r=e.getAttribute(n),"string"==typeof r){try{r="true"===r||"false"!==r&&("null"===r?null:+r+""===r?+r:Oe.test(r)?JSON.parse(r):r)}catch(i){}Be.set(e,t,r)}else r=void 0;return r}function d(e,t,r,n){var i,o=1,a=20,s=n?function(){return n.cur()}:function(){return pe.css(e,t,"")},c=s(),l=r&&r[3]||(pe.cssNumber[t]?"":"px"),u=(pe.cssNumber[t]||"px"!==l&&+c)&&Ue.exec(pe.css(e,t));if(u&&u[3]!==l){l=l||u[3],r=r||[],u=+c||1;do o=o||".5",u/=o,pe.style(e,t,u+l);while(o!==(o=s()/c)&&1!==o&&--a)}return r&&(u=+u||+c||0,i=r[1]?u+(r[1]+1)*r[2]:+r[2],n&&(n.unit=l,n.start=u,n.end=i)),i}function f(e){var t,r=e.ownerDocument,n=e.nodeName,i=ze[n];return i?i:(t=r.body.appendChild(r.createElement(n)),i=pe.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),ze[n]=i,i)}function m(e,t){for(var r,n,i=[],o=0,a=e.length;o<a;o++)n=e[o],n.style&&(r=n.style.display,t?("none"===r&&(i[o]=Ie.get(n,"display")||null,i[o]||(n.style.display="")),""===n.style.display&&Ve(n)&&(i[o]=f(n))):"none"!==r&&(i[o]="none",Ie.set(n,"display",r)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function v(e,t){var r="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&pe.nodeName(e,t)?pe.merge([e],r):r}function g(e,t){for(var r=0,n=e.length;r<n;r++)Ie.set(e[r],"globalEval",!t||Ie.get(t[r],"globalEval"))}function y(e,t,r,n,i){for(var o,a,s,c,l,u,h=t.createDocumentFragment(),p=[],d=0,f=e.length;d<f;d++)if(o=e[d],o||0===o)if("object"===pe.type(o))pe.merge(p,o.nodeType?[o]:o);else if(qe.test(o)){for(a=a||h.appendChild(t.createElement("div")),s=(He.exec(o)||["",""])[1].toLowerCase(),c=Xe[s]||Xe._default,a.innerHTML=c[1]+pe.htmlPrefilter(o)+c[2],u=c[0];u--;)a=a.lastChild;pe.merge(p,a.childNodes),a=h.firstChild,a.textContent=""}else p.push(t.createTextNode(o));for(h.textContent="",d=0;o=p[d++];)if(n&&pe.inArray(o,n)>-1)i&&i.push(o);else if(l=pe.contains(o.ownerDocument,o),a=v(h.appendChild(o),"script"),l&&g(a),r)for(u=0;o=a[u++];)We.test(o.type||"")&&r.push(o);return h}function x(){return!0}function b(){return!1}function w(){try{return $.activeElement}catch(e){}}function _(e,t,r,n,i,o){var a,s;if("object"==typeof t){"string"!=typeof r&&(n=n||r,r=void 0);for(s in t)_(e,s,r,n,t[s],o);return e}if(null==n&&null==i?(i=r,n=r=void 0):null==i&&("string"==typeof r?(i=n,n=void 0):(i=n,n=r,r=void 0)),i===!1)i=b;else if(!i)return e;return 1===o&&(a=i,i=function(e){return pe().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=pe.guid++)),e.each(function(){pe.event.add(this,t,i,n,r)})}function M(e,t){return pe.nodeName(e,"table")&&pe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e:e}function S(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function T(e){var t=tt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function E(e,t){var r,n,i,o,a,s,c,l;if(1===t.nodeType){if(Ie.hasData(e)&&(o=Ie.access(e),a=Ie.set(t,o),l=o.events)){delete a.handle,a.events={};for(i in l)for(r=0,n=l[i].length;r<n;r++)pe.event.add(t,i,l[i][r])}Be.hasData(e)&&(s=Be.access(e),c=pe.extend({},s),Be.set(t,c))}}function A(e,t){var r=t.nodeName.toLowerCase();"input"===r&&je.test(e.type)?t.checked=e.checked:"input"!==r&&"textarea"!==r||(t.defaultValue=e.defaultValue)}function C(e,t,n,i){t=re.apply([],t);var o,a,s,c,l,u,h=0,p=e.length,d=p-1,f=t[0],m=pe.isFunction(f);if(m||p>1&&"string"==typeof f&&!ue.checkClone&&et.test(f))return e.each(function(r){var o=e.eq(r);m&&(t[0]=f.call(this,r,o.html())),C(o,t,n,i)});if(p&&(o=y(t,e[0].ownerDocument,!1,e,i),a=o.firstChild,1===o.childNodes.length&&(o=a),a||i)){for(s=pe.map(v(o,"script"),S),c=s.length;h<p;h++)l=o,h!==d&&(l=pe.clone(l,!0,!0),c&&pe.merge(s,v(l,"script"))),n.call(e[h],l,h);if(c)for(u=s[s.length-1].ownerDocument,pe.map(s,T),h=0;h<c;h++)l=s[h],We.test(l.type||"")&&!Ie.access(l,"globalEval")&&pe.contains(u,l)&&(l.src?pe._evalUrl&&pe._evalUrl(l.src):r(l.textContent.replace(rt,""),u))}return e}function L(e,t,r){for(var n,i=t?pe.filter(t,e):e,o=0;null!=(n=i[o]);o++)r||1!==n.nodeType||pe.cleanData(v(n)),n.parentNode&&(r&&pe.contains(n.ownerDocument,n)&&g(v(n,"script")),n.parentNode.removeChild(n));return e}function P(e,t,r){var n,i,o,a,s=e.style;return r=r||ot(e),r&&(a=r.getPropertyValue(t)||r[t],""!==a||pe.contains(e.ownerDocument,e)||(a=pe.style(e,t)),!ue.pixelMarginRight()&&it.test(a)&&nt.test(t)&&(n=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=r.width,s.width=n,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function R(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function D(e){if(e in ut)return e;for(var t=e[0].toUpperCase()+e.slice(1),r=lt.length;r--;)if(e=lt[r]+t,e in ut)return e}function I(e,t,r){var n=Ue.exec(t);return n?Math.max(0,n[2]-(r||0))+(n[3]||"px"):t}function B(e,t,r,n,i){for(var o=r===(n?"border":"content")?4:"width"===t?1:0,a=0;o<4;o+=2)"margin"===r&&(a+=pe.css(e,r+Ge[o],!0,i)),n?("content"===r&&(a-=pe.css(e,"padding"+Ge[o],!0,i)),"margin"!==r&&(a-=pe.css(e,"border"+Ge[o]+"Width",!0,i))):(a+=pe.css(e,"padding"+Ge[o],!0,i),"padding"!==r&&(a+=pe.css(e,"border"+Ge[o]+"Width",!0,i)));return a}function O(e,t,r){var n,i=!0,o=ot(e),a="border-box"===pe.css(e,"boxSizing",!1,o);if(e.getClientRects().length&&(n=e.getBoundingClientRect()[t]),n<=0||null==n){if(n=P(e,t,o),(n<0||null==n)&&(n=e.style[t]),it.test(n))return n;i=a&&(ue.boxSizingReliable()||n===e.style[t]),n=parseFloat(n)||0}return n+B(e,t,r||(a?"border":"content"),i,o)+"px"}function F(e,t,r,n,i){return new F.prototype.init(e,t,r,n,i)}function N(){pt&&(e.requestAnimationFrame(N),pe.fx.tick())}function U(){return e.setTimeout(function(){ht=void 0}),ht=pe.now()}function G(e,t){var r,n=0,i={height:e};for(t=t?1:0;n<4;n+=2-t)r=Ge[n],i["margin"+r]=i["padding"+r]=e;return t&&(i.opacity=i.width=e),i}function V(e,t,r){for(var n,i=(j.tweeners[t]||[]).concat(j.tweeners["*"]),o=0,a=i.length;o<a;o++)if(n=i[o].call(r,t,e))return n}function k(e,t,r){var n,i,o,a,s,c,l,u,h="width"in t||"height"in t,p=this,d={},f=e.style,v=e.nodeType&&Ve(e),g=Ie.get(e,"fxshow");r.queue||(a=pe._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,pe.queue(e,"fx").length||a.empty.fire()})}));for(n in t)if(i=t[n],dt.test(i)){if(delete t[n],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!g||void 0===g[n])continue;v=!0}d[n]=g&&g[n]||pe.style(e,n)}if(c=!pe.isEmptyObject(t),c||!pe.isEmptyObject(d)){h&&1===e.nodeType&&(r.overflow=[f.overflow,f.overflowX,f.overflowY],l=g&&g.display,null==l&&(l=Ie.get(e,"display")),u=pe.css(e,"display"),"none"===u&&(l?u=l:(m([e],!0),l=e.style.display||l,u=pe.css(e,"display"),m([e]))),("inline"===u||"inline-block"===u&&null!=l)&&"none"===pe.css(e,"float")&&(c||(p.done(function(){f.display=l}),null==l&&(u=f.display,l="none"===u?"":u)),f.display="inline-block")),r.overflow&&(f.overflow="hidden",p.always(function(){f.overflow=r.overflow[0],f.overflowX=r.overflow[1],f.overflowY=r.overflow[2]})),c=!1;for(n in d)c||(g?"hidden"in g&&(v=g.hidden):g=Ie.access(e,"fxshow",{display:l}),o&&(g.hidden=!v),v&&m([e],!0),p.done(function(){v||m([e]),Ie.remove(e,"fxshow");for(n in d)pe.style(e,n,d[n])})),c=V(v?g[n]:0,n,p),n in g||(g[n]=c.start,v&&(c.end=c.start,c.start=0))}}function z(e,t){var r,n,i,o,a;for(r in e)if(n=pe.camelCase(r),i=t[n],o=e[r],pe.isArray(o)&&(i=o[1],o=e[r]=o[0]),r!==n&&(e[n]=o,delete e[r]),a=pe.cssHooks[n],a&&"expand"in a){o=a.expand(o),delete e[n];for(r in o)r in e||(e[r]=o[r],t[r]=i)}else t[n]=i}function j(e,t,r){var n,i,o=0,a=j.prefilters.length,s=pe.Deferred().always(function(){delete c.elem}),c=function(){if(i)return!1;for(var t=ht||U(),r=Math.max(0,l.startTime+l.duration-t),n=r/l.duration||0,o=1-n,a=0,c=l.tweens.length;a<c;a++)l.tweens[a].run(o);return s.notifyWith(e,[l,o,r]),o<1&&c?r:(s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:pe.extend({},t),opts:pe.extend(!0,{specialEasing:{},easing:pe.easing._default},r),originalProperties:t,originalOptions:r,startTime:ht||U(),duration:r.duration,tweens:[],createTween:function(t,r){var n=pe.Tween(e,l.opts,t,r,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(n),n},stop:function(t){var r=0,n=t?l.tweens.length:0;if(i)return this;for(i=!0;r<n;r++)l.tweens[r].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),u=l.props;for(z(u,l.opts.specialEasing);o<a;o++)if(n=j.prefilters[o].call(l,e,u,l.opts))return pe.isFunction(n.stop)&&(pe._queueHooks(l.elem,l.opts.queue).stop=pe.proxy(n.stop,n)),n;return pe.map(u,V,l),pe.isFunction(l.opts.start)&&l.opts.start.call(e,l),pe.fx.timer(pe.extend(c,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function H(e){return e.getAttribute&&e.getAttribute("class")||""}function W(e,t,r,n){var i;if(pe.isArray(t))pe.each(t,function(t,i){r||Et.test(e)?n(e,i):W(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,r,n)});else if(r||"object"!==pe.type(t))n(e,t);else for(i in t)W(e+"["+i+"]",t[i],r,n)}function X(e){return function(t,r){"string"!=typeof t&&(r=t,t="*");var n,i=0,o=t.toLowerCase().match(Ce)||[];if(pe.isFunction(r))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(r)):(e[n]=e[n]||[]).push(r)}}function q(e,t,r,n){function i(s){var c;return o[s]=!0,pe.each(e[s]||[],function(e,s){var l=s(t,r,n);return"string"!=typeof l||a||o[l]?a?!(c=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),c}var o={},a=e===Ut;return i(t.dataTypes[0])||!o["*"]&&i("*")}function Y(e,t){var r,n,i=pe.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&pe.extend(!0,e,n),e}function Z(e,t,r){for(var n,i,o,a,s=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(i in s)if(s[i]&&s[i].test(n)){c.unshift(i);break}if(c[0]in r)o=c[0];else{for(i in r){if(!c[0]||e.converters[i+" "+c[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==c[0]&&c.unshift(o),r[o]}function K(e,t,r,n){var i,o,a,s,c,l={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];for(o=u.shift();o;)if(e.responseFields[o]&&(r[e.responseFields[o]]=t),!c&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=o,o=u.shift())if("*"===o)o=c;else if("*"!==c&&c!==o){if(a=l[c+" "+o]||l["* "+o],!a)for(i in l)if(s=i.split(" "),s[1]===o&&(a=l[c+" "+s[0]]||l["* "+s[0]])){a===!0?a=l[i]:l[i]!==!0&&(o=s[0],u.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(h){return{state:"parsererror",error:a?h:"No conversion from "+c+" to "+o}}}return{state:"success",data:t}}function Q(e){return pe.isWindow(e)?e:9===e.nodeType&&e.defaultView}var J=[],$=e.document,ee=Object.getPrototypeOf,te=J.slice,re=J.concat,ne=J.push,ie=J.indexOf,oe={},ae=oe.toString,se=oe.hasOwnProperty,ce=se.toString,le=ce.call(Object),ue={},he="3.1.0",pe=function(e,t){return new pe.fn.init(e,t)},de=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,fe=/^-ms-/,me=/-([a-z])/g,ve=function(e,t){return t.toUpperCase()};pe.fn=pe.prototype={jquery:he,constructor:pe,length:0,toArray:function(){return te.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:te.call(this)},pushStack:function(e){var t=pe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return pe.each(this,e)},map:function(e){return this.pushStack(pe.map(this,function(t,r){return e.call(t,r,t)}))},slice:function(){return this.pushStack(te.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,r=+e+(e<0?t:0);return this.pushStack(r>=0&&r<t?[this[r]]:[])},end:function(){return this.prevObject||this.constructor()},push:ne,sort:J.sort,splice:J.splice},pe.extend=pe.fn.extend=function(){var e,t,r,n,i,o,a=arguments[0]||{},s=1,c=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||pe.isFunction(a)||(a={}),s===c&&(a=this,s--);s<c;s++)if(null!=(e=arguments[s]))for(t in e)r=a[t],n=e[t],a!==n&&(l&&n&&(pe.isPlainObject(n)||(i=pe.isArray(n)))?(i?(i=!1,o=r&&pe.isArray(r)?r:[]):o=r&&pe.isPlainObject(r)?r:{},a[t]=pe.extend(l,o,n)):void 0!==n&&(a[t]=n));return a},pe.extend({expando:"jQuery"+(he+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===pe.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=pe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,r;return!(!e||"[object Object]"!==ae.call(e))&&(!(t=ee(e))||(r=se.call(t,"constructor")&&t.constructor,"function"==typeof r&&ce.call(r)===le))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?oe[ae.call(e)]||"object":typeof e},globalEval:function(e){r(e)},camelCase:function(e){return e.replace(fe,"ms-").replace(me,ve)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var r,i=0;if(n(e))for(r=e.length;i<r&&t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(de,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?pe.merge(r,"string"==typeof e?[e]:e):ne.call(r,e)),r},inArray:function(e,t,r){return null==t?-1:ie.call(t,e,r)},merge:function(e,t){for(var r=+t.length,n=0,i=e.length;n<r;n++)e[i++]=t[n];return e.length=i,e},grep:function(e,t,r){for(var n,i=[],o=0,a=e.length,s=!r;o<a;o++)n=!t(e[o],o),n!==s&&i.push(e[o]);return i},map:function(e,t,r){var i,o,a=0,s=[];if(n(e))for(i=e.length;a<i;a++)o=t(e[a],a,r),null!=o&&s.push(o);else for(a in e)o=t(e[a],a,r),null!=o&&s.push(o);return re.apply([],s)},guid:1,proxy:function(e,t){var r,n,i;if("string"==typeof t&&(r=e[t],t=e,e=r),pe.isFunction(e))return n=te.call(arguments,2),i=function(){return e.apply(t||this,n.concat(te.call(arguments)))},i.guid=e.guid=e.guid||pe.guid++,i},now:Date.now,support:ue}),"function"==typeof Symbol&&(pe.fn[Symbol.iterator]=J[Symbol.iterator]),pe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){oe["[object "+t+"]"]=t.toLowerCase()});var ge=function(e){function t(e,t,r,n){var i,o,a,s,c,l,u,p=t&&t.ownerDocument,f=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return r;if(!n&&((t?t.ownerDocument||t:k)!==I&&D(t),t=t||I,O)){if(11!==f&&(c=ge.exec(e)))if(i=c[1]){if(9===f){if(!(a=t.getElementById(i)))return r;if(a.id===i)return r.push(a),r}else if(p&&(a=p.getElementById(i))&&G(t,a)&&a.id===i)return r.push(a),r}else{if(c[2])return J.apply(r,t.getElementsByTagName(e)),r;if((i=c[3])&&_.getElementsByClassName&&t.getElementsByClassName)return J.apply(r,t.getElementsByClassName(i)),r}if(_.qsa&&!X[e+" "]&&(!F||!F.test(e))){if(1!==f)p=t,u=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(we,_e):t.setAttribute("id",s=V),l=E(e),o=l.length;o--;)l[o]="#"+s+" "+d(l[o]);u=l.join(","),p=ye.test(e)&&h(t.parentNode)||t}if(u)try{return J.apply(r,p.querySelectorAll(u)),r}catch(m){}finally{s===V&&t.removeAttribute("id")}}}return C(e.replace(se,"$1"),t,r,n)}function r(){function e(r,n){return t.push(r+" ")>M.cacheLength&&delete e[t.shift()],e[r+" "]=n}var t=[];return e}function n(e){return e[V]=!0,e}function i(e){var t=I.createElement("fieldset");try{return!!e(t)}catch(r){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var r=e.split("|"),n=r.length;n--;)M.attrHandle[r[n]]=t}function a(e,t){var r=t&&e,n=r&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(r)for(;r=r.nextSibling;)if(r===t)return-1;return e?1:-1}function s(e){return function(t){var r=t.nodeName.toLowerCase();return"input"===r&&t.type===e}}function c(e){return function(t){var r=t.nodeName.toLowerCase();return("input"===r||"button"===r)&&t.type===e}}function l(e){return function(t){return"label"in t&&t.disabled===e||"form"in t&&t.disabled===e||"form"in t&&t.disabled===!1&&(t.isDisabled===e||t.isDisabled!==!e&&("label"in t||!Se(t))!==e)}}function u(e){return n(function(t){return t=+t,n(function(r,n){for(var i,o=e([],r.length,t),a=o.length;a--;)r[i=o[a]]&&(r[i]=!(n[i]=r[i]))})})}function h(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function p(){}function d(e){for(var t=0,r=e.length,n="";t<r;t++)n+=e[t].value;return n}function f(e,t,r){var n=t.dir,i=t.next,o=i||n,a=r&&"parentNode"===o,s=j++;return t.first?function(t,r,i){for(;t=t[n];)if(1===t.nodeType||a)return e(t,r,i)}:function(t,r,c){var l,u,h,p=[z,s];if(c){for(;t=t[n];)if((1===t.nodeType||a)&&e(t,r,c))return!0}else for(;t=t[n];)if(1===t.nodeType||a)if(h=t[V]||(t[V]={}),u=h[t.uniqueID]||(h[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[n]||t;else{if((l=u[o])&&l[0]===z&&l[1]===s)return p[2]=l[2];if(u[o]=p,p[2]=e(t,r,c))return!0}}}function m(e){return e.length>1?function(t,r,n){for(var i=e.length;i--;)if(!e[i](t,r,n))return!1;return!0}:e[0]}function v(e,r,n){for(var i=0,o=r.length;i<o;i++)t(e,r[i],n);return n}function g(e,t,r,n,i){for(var o,a=[],s=0,c=e.length,l=null!=t;s<c;s++)(o=e[s])&&(r&&!r(o,n,i)||(a.push(o),l&&t.push(s)));return a}function y(e,t,r,i,o,a){return i&&!i[V]&&(i=y(i)),o&&!o[V]&&(o=y(o,a)),n(function(n,a,s,c){var l,u,h,p=[],d=[],f=a.length,m=n||v(t||"*",s.nodeType?[s]:s,[]),y=!e||!n&&t?m:g(m,p,e,s,c),x=r?o||(n?e:f||i)?[]:a:y;if(r&&r(y,x,s,c),i)for(l=g(x,d),i(l,[],s,c),u=l.length;u--;)(h=l[u])&&(x[d[u]]=!(y[d[u]]=h));if(n){if(o||e){if(o){for(l=[],u=x.length;u--;)(h=x[u])&&l.push(y[u]=h);o(null,x=[],l,c)}for(u=x.length;u--;)(h=x[u])&&(l=o?ee(n,h):p[u])>-1&&(n[l]=!(a[l]=h))}}else x=g(x===a?x.splice(f,x.length):x),o?o(null,a,x,c):J.apply(a,x)})}function x(e){for(var t,r,n,i=e.length,o=M.relative[e[0].type],a=o||M.relative[" "],s=o?1:0,c=f(function(e){return e===t},a,!0),l=f(function(e){return ee(t,e)>-1},a,!0),u=[function(e,r,n){var i=!o&&(n||r!==L)||((t=r).nodeType?c(e,r,n):l(e,r,n));return t=null,i}];s<i;s++)if(r=M.relative[e[s].type])u=[f(m(u),r)];else{if(r=M.filter[e[s].type].apply(null,e[s].matches),r[V]){for(n=++s;n<i&&!M.relative[e[n].type];n++);return y(s>1&&m(u),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(se,"$1"),r,s<n&&x(e.slice(s,n)),n<i&&x(e=e.slice(n)),n<i&&d(e))}u.push(r)}return m(u)}function b(e,r){var i=r.length>0,o=e.length>0,a=function(n,a,s,c,l){var u,h,p,d=0,f="0",m=n&&[],v=[],y=L,x=n||o&&M.find.TAG("*",l),b=z+=null==y?1:Math.random()||.1,w=x.length;for(l&&(L=a===I||a||l);f!==w&&null!=(u=x[f]);f++){if(o&&u){for(h=0,a||u.ownerDocument===I||(D(u),s=!O);p=e[h++];)if(p(u,a||I,s)){c.push(u);break}l&&(z=b)}i&&((u=!p&&u)&&d--,n&&m.push(u))}if(d+=f,i&&f!==d){for(h=0;p=r[h++];)p(m,v,a,s);if(n){if(d>0)for(;f--;)m[f]||v[f]||(v[f]=K.call(c));v=g(v)}J.apply(c,v),l&&!n&&v.length>0&&d+r.length>1&&t.uniqueSort(c)}return l&&(z=b,L=y),m};return i?n(a):a}var w,_,M,S,T,E,A,C,L,P,R,D,I,B,O,F,N,U,G,V="sizzle"+1*new Date,k=e.document,z=0,j=0,H=r(),W=r(),X=r(),q=function(e,t){return e===t&&(R=!0),0},Y={}.hasOwnProperty,Z=[],K=Z.pop,Q=Z.push,J=Z.push,$=Z.slice,ee=function(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",re="[\\x20\\t\\r\\n\\f]",ne="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ie="\\["+re+"*("+ne+")(?:"+re+"*([*^$|!~]?=)"+re+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ne+"))|)"+re+"*\\]",oe=":("+ne+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",ae=new RegExp(re+"+","g"),se=new RegExp("^"+re+"+|((?:^|[^\\\\])(?:\\\\.)*)"+re+"+$","g"),ce=new RegExp("^"+re+"*,"+re+"*"),le=new RegExp("^"+re+"*([>+~]|"+re+")"+re+"*"),ue=new RegExp("="+re+"*([^\\]'\"]*?)"+re+"*\\]","g"),he=new RegExp(oe),pe=new RegExp("^"+ne+"$"),de={ID:new RegExp("^#("+ne+")"),CLASS:new RegExp("^\\.("+ne+")"),TAG:new RegExp("^("+ne+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+re+"*(even|odd|(([+-]|)(\\d*)n|)"+re+"*(?:([+-]|)"+re+"*(\\d+)|))"+re+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+re+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+re+"*((?:-\\d)?\\d*)"+re+"*\\)|)(?=[^-]|$)","i")},fe=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,xe=new RegExp("\\\\([\\da-f]{1,6}"+re+"?|("+re+")|.)","ig"),be=function(e,t,r){var n="0x"+t-65536;return n!==n||r?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},we=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,_e=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Me=function(){D()},Se=f(function(e){return e.disabled===!0},{dir:"parentNode",next:"legend"});try{J.apply(Z=$.call(k.childNodes),k.childNodes),Z[k.childNodes.length].nodeType}catch(Te){J={apply:Z.length?function(e,t){Q.apply(e,$.call(t))}:function(e,t){for(var r=e.length,n=0;e[r++]=t[n++];);e.length=r-1}}}_=t.support={},T=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},D=t.setDocument=function(e){var t,r,n=e?e.ownerDocument||e:k;return n!==I&&9===n.nodeType&&n.documentElement?(I=n,B=I.documentElement,O=!T(I),k!==I&&(r=I.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",Me,!1):r.attachEvent&&r.attachEvent("onunload",Me)),_.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),_.getElementsByTagName=i(function(e){return e.appendChild(I.createComment("")),!e.getElementsByTagName("*").length}),_.getElementsByClassName=ve.test(I.getElementsByClassName),_.getById=i(function(e){return B.appendChild(e).id=V,!I.getElementsByName||!I.getElementsByName(V).length}),_.getById?(M.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&O){var r=t.getElementById(e);return r?[r]:[]}},M.filter.ID=function(e){var t=e.replace(xe,be);return function(e){return e.getAttribute("id")===t}}):(delete M.find.ID,M.filter.ID=function(e){var t=e.replace(xe,be);return function(e){var r="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return r&&r.value===t}}),M.find.TAG=_.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):_.qsa?t.querySelectorAll(e):void 0}:function(e,t){var r,n=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;r=o[i++];)1===r.nodeType&&n.push(r);return n}return o},M.find.CLASS=_.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&O)return t.getElementsByClassName(e)},N=[],F=[],(_.qsa=ve.test(I.querySelectorAll))&&(i(function(e){B.appendChild(e).innerHTML="<a id='"+V+"'></a><select id='"+V+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&F.push("[*^$]="+re+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||F.push("\\["+re+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+V+"-]").length||F.push("~="),e.querySelectorAll(":checked").length||F.push(":checked"),e.querySelectorAll("a#"+V+"+*").length||F.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=I.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&F.push("name"+re+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&F.push(":enabled",":disabled"),B.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&F.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),F.push(",.*:")})),(_.matchesSelector=ve.test(U=B.matches||B.webkitMatchesSelector||B.mozMatchesSelector||B.oMatchesSelector||B.msMatchesSelector))&&i(function(e){_.disconnectedMatch=U.call(e,"*"),U.call(e,"[s!='']:x"),N.push("!=",oe)}),F=F.length&&new RegExp(F.join("|")),N=N.length&&new RegExp(N.join("|")),t=ve.test(B.compareDocumentPosition),G=t||ve.test(B.contains)?function(e,t){var r=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(r.contains?r.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},q=t?function(e,t){if(e===t)return R=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r?r:(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&r||!_.sortDetached&&t.compareDocumentPosition(e)===r?e===I||e.ownerDocument===k&&G(k,e)?-1:t===I||t.ownerDocument===k&&G(k,t)?1:P?ee(P,e)-ee(P,t):0:4&r?-1:1)}:function(e,t){if(e===t)return R=!0,0;var r,n=0,i=e.parentNode,o=t.parentNode,s=[e],c=[t];if(!i||!o)return e===I?-1:t===I?1:i?-1:o?1:P?ee(P,e)-ee(P,t):0;if(i===o)return a(e,t);for(r=e;r=r.parentNode;)s.unshift(r);for(r=t;r=r.parentNode;)c.unshift(r);for(;s[n]===c[n];)n++;return n?a(s[n],c[n]):s[n]===k?-1:c[n]===k?1:0},I):I},t.matches=function(e,r){return t(e,null,null,r)},t.matchesSelector=function(e,r){if((e.ownerDocument||e)!==I&&D(e),r=r.replace(ue,"='$1']"),_.matchesSelector&&O&&!X[r+" "]&&(!N||!N.test(r))&&(!F||!F.test(r)))try{var n=U.call(e,r);if(n||_.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(i){}return t(r,I,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==I&&D(e),G(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==I&&D(e);var r=M.attrHandle[t.toLowerCase()],n=r&&Y.call(M.attrHandle,t.toLowerCase())?r(e,t,!O):void 0;return void 0!==n?n:_.attributes||!O?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},t.escape=function(e){return(e+"").replace(we,_e)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,r=[],n=0,i=0;if(R=!_.detectDuplicates,P=!_.sortStable&&e.slice(0),e.sort(q),R){for(;t=e[i++];)t===e[i]&&(n=r.push(i));for(;n--;)e.splice(r[n],1)}return P=null,e},S=t.getText=function(e){var t,r="",n=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)r+=S(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[n++];)r+=S(t);return r},M=t.selectors={cacheLength:50,createPseudo:n,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,be),e[3]=(e[3]||e[4]||e[5]||"").replace(xe,be),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,r=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":r&&he.test(r)&&(t=E(r,!0))&&(t=r.indexOf(")",r.length-t)-r.length)&&(e[0]=e[0].slice(0,t),e[2]=r.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,be).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=H[e+" "];return t||(t=new RegExp("(^|"+re+")"+e+"("+re+"|$)"))&&H(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,r,n){return function(i){var o=t.attr(i,e);return null==o?"!="===r:!r||(o+="","="===r?o===n:"!="===r?o!==n:"^="===r?n&&0===o.indexOf(n):"*="===r?n&&o.indexOf(n)>-1:"$="===r?n&&o.slice(-n.length)===n:"~="===r?(" "+o.replace(ae," ")+" ").indexOf(n)>-1:"|="===r&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,r,n,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===n&&0===i?function(e){return!!e.parentNode}:function(t,r,c){var l,u,h,p,d,f,m=o!==a?"nextSibling":"previousSibling",v=t.parentNode,g=s&&t.nodeName.toLowerCase(),y=!c&&!s,x=!1;if(v){if(o){for(;m;){for(p=t;p=p[m];)if(s?p.nodeName.toLowerCase()===g:1===p.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[a?v.firstChild:v.lastChild],a&&y){for(p=v,h=p[V]||(p[V]={}),u=h[p.uniqueID]||(h[p.uniqueID]={}),l=u[e]||[],d=l[0]===z&&l[1],x=d&&l[2],p=d&&v.childNodes[d];p=++d&&p&&p[m]||(x=d=0)||f.pop();)if(1===p.nodeType&&++x&&p===t){u[e]=[z,d,x];break}}else if(y&&(p=t,h=p[V]||(p[V]={}),u=h[p.uniqueID]||(h[p.uniqueID]={}),l=u[e]||[],d=l[0]===z&&l[1],x=d),x===!1)for(;(p=++d&&p&&p[m]||(x=d=0)||f.pop())&&((s?p.nodeName.toLowerCase()!==g:1!==p.nodeType)||!++x||(y&&(h=p[V]||(p[V]={}),u=h[p.uniqueID]||(h[p.uniqueID]={}),u[e]=[z,x]),p!==t)););return x-=i,x===n||x%n===0&&x/n>=0}}},PSEUDO:function(e,r){var i,o=M.pseudos[e]||M.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[V]?o(r):o.length>1?(i=[e,e,"",r],M.setFilters.hasOwnProperty(e.toLowerCase())?n(function(e,t){for(var n,i=o(e,r),a=i.length;a--;)n=ee(e,i[a]),e[n]=!(t[n]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:n(function(e){var t=[],r=[],i=A(e.replace(se,"$1"));return i[V]?n(function(e,t,r,n){for(var o,a=i(e,null,n,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,n,o){return t[0]=e,i(t,null,o,r),t[0]=null,!r.pop()}}),has:n(function(e){return function(r){return t(e,r).length>0}}),contains:n(function(e){return e=e.replace(xe,be),function(t){return(t.textContent||t.innerText||S(t)).indexOf(e)>-1}}),lang:n(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(xe,be).toLowerCase(),function(t){var r;do if(r=O?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return r=r.toLowerCase(),r===e||0===r.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var r=e.location&&e.location.hash;return r&&r.slice(1)===t.id;
},root:function(e){return e===B},focus:function(e){return e===I.activeElement&&(!I.hasFocus||I.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:l(!1),disabled:l(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!M.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return fe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,r){return[r<0?r+t:r]}),even:u(function(e,t){for(var r=0;r<t;r+=2)e.push(r);return e}),odd:u(function(e,t){for(var r=1;r<t;r+=2)e.push(r);return e}),lt:u(function(e,t,r){for(var n=r<0?r+t:r;--n>=0;)e.push(n);return e}),gt:u(function(e,t,r){for(var n=r<0?r+t:r;++n<t;)e.push(n);return e})}},M.pseudos.nth=M.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})M.pseudos[w]=s(w);for(w in{submit:!0,reset:!0})M.pseudos[w]=c(w);return p.prototype=M.filters=M.pseudos,M.setFilters=new p,E=t.tokenize=function(e,r){var n,i,o,a,s,c,l,u=W[e+" "];if(u)return r?0:u.slice(0);for(s=e,c=[],l=M.preFilter;s;){n&&!(i=ce.exec(s))||(i&&(s=s.slice(i[0].length)||s),c.push(o=[])),n=!1,(i=le.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(se," ")}),s=s.slice(n.length));for(a in M.filter)!(i=de[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return r?s.length:s?t.error(e):W(e,c).slice(0)},A=t.compile=function(e,t){var r,n=[],i=[],o=X[e+" "];if(!o){for(t||(t=E(e)),r=t.length;r--;)o=x(t[r]),o[V]?n.push(o):i.push(o);o=X(e,b(i,n)),o.selector=e}return o},C=t.select=function(e,t,r,n){var i,o,a,s,c,l="function"==typeof e&&e,u=!n&&E(e=l.selector||e);if(r=r||[],1===u.length){if(o=u[0]=u[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&_.getById&&9===t.nodeType&&O&&M.relative[o[1].type]){if(t=(M.find.ID(a.matches[0].replace(xe,be),t)||[])[0],!t)return r;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=de.needsContext.test(e)?0:o.length;i--&&(a=o[i],!M.relative[s=a.type]);)if((c=M.find[s])&&(n=c(a.matches[0].replace(xe,be),ye.test(o[0].type)&&h(t.parentNode)||t))){if(o.splice(i,1),e=n.length&&d(o),!e)return J.apply(r,n),r;break}}return(l||A(e,u))(n,t,!O,r,!t||ye.test(e)&&h(t.parentNode)||t),r},_.sortStable=V.split("").sort(q).join("")===V,_.detectDuplicates=!!R,D(),_.sortDetached=i(function(e){return 1&e.compareDocumentPosition(I.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,r){if(!r)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),_.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,r){if(!r&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,r){var n;if(!r)return e[t]===!0?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),t}(e);pe.find=ge,pe.expr=ge.selectors,pe.expr[":"]=pe.expr.pseudos,pe.uniqueSort=pe.unique=ge.uniqueSort,pe.text=ge.getText,pe.isXMLDoc=ge.isXML,pe.contains=ge.contains,pe.escapeSelector=ge.escape;var ye=function(e,t,r){for(var n=[],i=void 0!==r;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&pe(e).is(r))break;n.push(e)}return n},xe=function(e,t){for(var r=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&r.push(e);return r},be=pe.expr.match.needsContext,we=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,_e=/^.[^:#\[\.,]*$/;pe.filter=function(e,t,r){var n=t[0];return r&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?pe.find.matchesSelector(n,e)?[n]:[]:pe.find.matches(e,pe.grep(t,function(e){return 1===e.nodeType}))},pe.fn.extend({find:function(e){var t,r,n=this.length,i=this;if("string"!=typeof e)return this.pushStack(pe(e).filter(function(){for(t=0;t<n;t++)if(pe.contains(i[t],this))return!0}));for(r=this.pushStack([]),t=0;t<n;t++)pe.find(e,i[t],r);return n>1?pe.uniqueSort(r):r},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&be.test(e)?pe(e):e||[],!1).length}});var Me,Se=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Te=pe.fn.init=function(e,t,r){var n,i;if(!e)return this;if(r=r||Me,"string"==typeof e){if(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Se.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||r).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof pe?t[0]:t,pe.merge(this,pe.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:$,!0)),we.test(n[1])&&pe.isPlainObject(t))for(n in t)pe.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return i=$.getElementById(n[2]),i&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):pe.isFunction(e)?void 0!==r.ready?r.ready(e):e(pe):pe.makeArray(e,this)};Te.prototype=pe.fn,Me=pe($);var Ee=/^(?:parents|prev(?:Until|All))/,Ae={children:!0,contents:!0,next:!0,prev:!0};pe.fn.extend({has:function(e){var t=pe(e,this),r=t.length;return this.filter(function(){for(var e=0;e<r;e++)if(pe.contains(this,t[e]))return!0})},closest:function(e,t){var r,n=0,i=this.length,o=[],a="string"!=typeof e&&pe(e);if(!be.test(e))for(;n<i;n++)for(r=this[n];r&&r!==t;r=r.parentNode)if(r.nodeType<11&&(a?a.index(r)>-1:1===r.nodeType&&pe.find.matchesSelector(r,e))){o.push(r);break}return this.pushStack(o.length>1?pe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?ie.call(pe(e),this[0]):ie.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(pe.uniqueSort(pe.merge(this.get(),pe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),pe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ye(e,"parentNode")},parentsUntil:function(e,t,r){return ye(e,"parentNode",r)},next:function(e){return o(e,"nextSibling")},prev:function(e){return o(e,"previousSibling")},nextAll:function(e){return ye(e,"nextSibling")},prevAll:function(e){return ye(e,"previousSibling")},nextUntil:function(e,t,r){return ye(e,"nextSibling",r)},prevUntil:function(e,t,r){return ye(e,"previousSibling",r)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return e.contentDocument||pe.merge([],e.childNodes)}},function(e,t){pe.fn[e]=function(r,n){var i=pe.map(this,t,r);return"Until"!==e.slice(-5)&&(n=r),n&&"string"==typeof n&&(i=pe.filter(n,i)),this.length>1&&(Ae[e]||pe.uniqueSort(i),Ee.test(e)&&i.reverse()),this.pushStack(i)}});var Ce=/\S+/g;pe.Callbacks=function(e){e="string"==typeof e?a(e):pe.extend({},e);var t,r,n,i,o=[],s=[],c=-1,l=function(){for(i=e.once,n=t=!0;s.length;c=-1)for(r=s.shift();++c<o.length;)o[c].apply(r[0],r[1])===!1&&e.stopOnFalse&&(c=o.length,r=!1);e.memory||(r=!1),t=!1,i&&(o=r?[]:"")},u={add:function(){return o&&(r&&!t&&(c=o.length-1,s.push(r)),function n(t){pe.each(t,function(t,r){pe.isFunction(r)?e.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==pe.type(r)&&n(r)})}(arguments),r&&!t&&l()),this},remove:function(){return pe.each(arguments,function(e,t){for(var r;(r=pe.inArray(t,o,r))>-1;)o.splice(r,1),r<=c&&c--}),this},has:function(e){return e?pe.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=r="",this},disabled:function(){return!o},lock:function(){return i=s=[],r||t||(o=r=""),this},locked:function(){return!!i},fireWith:function(e,r){return i||(r=r||[],r=[e,r.slice?r.slice():r],s.push(r),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!n}};return u},pe.extend({Deferred:function(t){var r=[["notify","progress",pe.Callbacks("memory"),pe.Callbacks("memory"),2],["resolve","done",pe.Callbacks("once memory"),pe.Callbacks("once memory"),0,"resolved"],["reject","fail",pe.Callbacks("once memory"),pe.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(e){return i.then(null,e)},pipe:function(){var e=arguments;return pe.Deferred(function(t){pe.each(r,function(r,n){var i=pe.isFunction(e[n[4]])&&e[n[4]];o[n[1]](function(){var e=i&&i.apply(this,arguments);e&&pe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[n[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,n,i){function o(t,r,n,i){return function(){var l=this,u=arguments,h=function(){var e,h;if(!(t<a)){if(e=n.apply(l,u),e===r.promise())throw new TypeError("Thenable self-resolution");h=e&&("object"==typeof e||"function"==typeof e)&&e.then,pe.isFunction(h)?i?h.call(e,o(a,r,s,i),o(a,r,c,i)):(a++,h.call(e,o(a,r,s,i),o(a,r,c,i),o(a,r,s,r.notifyWith))):(n!==s&&(l=void 0,u=[e]),(i||r.resolveWith)(l,u))}},p=i?h:function(){try{h()}catch(e){pe.Deferred.exceptionHook&&pe.Deferred.exceptionHook(e,p.stackTrace),t+1>=a&&(n!==c&&(l=void 0,u=[e]),r.rejectWith(l,u))}};t?p():(pe.Deferred.getStackHook&&(p.stackTrace=pe.Deferred.getStackHook()),e.setTimeout(p))}}var a=0;return pe.Deferred(function(e){r[0][3].add(o(0,e,pe.isFunction(i)?i:s,e.notifyWith)),r[1][3].add(o(0,e,pe.isFunction(t)?t:s)),r[2][3].add(o(0,e,pe.isFunction(n)?n:c))}).promise()},promise:function(e){return null!=e?pe.extend(e,i):i}},o={};return pe.each(r,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){n=s},r[3-e][2].disable,r[0][2].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,r=t,n=Array(r),i=te.call(arguments),o=pe.Deferred(),a=function(e){return function(r){n[e]=this,i[e]=arguments.length>1?te.call(arguments):r,--t||o.resolveWith(n,i)}};if(t<=1&&(l(e,o.done(a(r)).resolve,o.reject),"pending"===o.state()||pe.isFunction(i[r]&&i[r].then)))return o.then();for(;r--;)l(i[r],a(r),o.reject);return o.promise()}});var Le=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;pe.Deferred.exceptionHook=function(t,r){e.console&&e.console.warn&&t&&Le.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,r)},pe.readyException=function(t){e.setTimeout(function(){throw t})};var Pe=pe.Deferred();pe.fn.ready=function(e){return Pe.then(e)["catch"](function(e){pe.readyException(e)}),this},pe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?pe.readyWait++:pe.ready(!0)},ready:function(e){(e===!0?--pe.readyWait:pe.isReady)||(pe.isReady=!0,e!==!0&&--pe.readyWait>0||Pe.resolveWith($,[pe]))}}),pe.ready.then=Pe.then,"complete"===$.readyState||"loading"!==$.readyState&&!$.documentElement.doScroll?e.setTimeout(pe.ready):($.addEventListener("DOMContentLoaded",u),e.addEventListener("load",u));var Re=function(e,t,r,n,i,o,a){var s=0,c=e.length,l=null==r;if("object"===pe.type(r)){i=!0;for(s in r)Re(e,t,s,r[s],!0,o,a)}else if(void 0!==n&&(i=!0,pe.isFunction(n)||(a=!0),l&&(a?(t.call(e,n),t=null):(l=t,t=function(e,t,r){return l.call(pe(e),r)})),t))for(;s<c;s++)t(e[s],r,a?n:n.call(e[s],s,t(e[s],r)));return i?e:l?t.call(e):c?t(e[0],r):o},De=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};h.uid=1,h.prototype={cache:function(e){var t=e[this.expando];return t||(t={},De(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,r){var n,i=this.cache(e);if("string"==typeof t)i[pe.camelCase(t)]=r;else for(n in t)i[pe.camelCase(n)]=t[n];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][pe.camelCase(t)]},access:function(e,t,r){return void 0===t||t&&"string"==typeof t&&void 0===r?this.get(e,t):(this.set(e,t,r),void 0!==r?r:t)},remove:function(e,t){var r,n=e[this.expando];if(void 0!==n){if(void 0!==t){pe.isArray(t)?t=t.map(pe.camelCase):(t=pe.camelCase(t),t=t in n?[t]:t.match(Ce)||[]),r=t.length;for(;r--;)delete n[t[r]]}(void 0===t||pe.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!pe.isEmptyObject(t)}};var Ie=new h,Be=new h,Oe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Fe=/[A-Z]/g;pe.extend({hasData:function(e){return Be.hasData(e)||Ie.hasData(e)},data:function(e,t,r){return Be.access(e,t,r)},removeData:function(e,t){Be.remove(e,t)},_data:function(e,t,r){return Ie.access(e,t,r)},_removeData:function(e,t){Ie.remove(e,t)}}),pe.fn.extend({data:function(e,t){var r,n,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Be.get(o),1===o.nodeType&&!Ie.get(o,"hasDataAttrs"))){for(r=a.length;r--;)a[r]&&(n=a[r].name,0===n.indexOf("data-")&&(n=pe.camelCase(n.slice(5)),p(o,n,i[n])));Ie.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Be.set(this,e)}):Re(this,function(t){var r;if(o&&void 0===t){if(r=Be.get(o,e),void 0!==r)return r;if(r=p(o,e),void 0!==r)return r}else this.each(function(){Be.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Be.remove(this,e)})}}),pe.extend({queue:function(e,t,r){var n;if(e)return t=(t||"fx")+"queue",n=Ie.get(e,t),r&&(!n||pe.isArray(r)?n=Ie.access(e,t,pe.makeArray(r)):n.push(r)),n||[]},dequeue:function(e,t){t=t||"fx";var r=pe.queue(e,t),n=r.length,i=r.shift(),o=pe._queueHooks(e,t),a=function(){pe.dequeue(e,t)};"inprogress"===i&&(i=r.shift(),n--),i&&("fx"===t&&r.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!n&&o&&o.empty.fire()},_queueHooks:function(e,t){var r=t+"queueHooks";return Ie.get(e,r)||Ie.access(e,r,{empty:pe.Callbacks("once memory").add(function(){Ie.remove(e,[t+"queue",r])})})}}),pe.fn.extend({queue:function(e,t){var r=2;return"string"!=typeof e&&(t=e,e="fx",r--),arguments.length<r?pe.queue(this[0],e):void 0===t?this:this.each(function(){var r=pe.queue(this,e,t);pe._queueHooks(this,e),"fx"===e&&"inprogress"!==r[0]&&pe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){pe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var r,n=1,i=pe.Deferred(),o=this,a=this.length,s=function(){--n||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)r=Ie.get(o[a],e+"queueHooks"),r&&r.empty&&(n++,r.empty.add(s));return s(),i.promise(t)}});var Ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ue=new RegExp("^(?:([+-])=|)("+Ne+")([a-z%]*)$","i"),Ge=["Top","Right","Bottom","Left"],Ve=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&pe.contains(e.ownerDocument,e)&&"none"===pe.css(e,"display")},ke=function(e,t,r,n){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=r.apply(e,n||[]);for(o in t)e.style[o]=a[o];return i},ze={};pe.fn.extend({show:function(){return m(this,!0)},hide:function(){return m(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ve(this)?pe(this).show():pe(this).hide()})}});var je=/^(?:checkbox|radio)$/i,He=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,We=/^$|\/(?:java|ecma)script/i,Xe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Xe.optgroup=Xe.option,Xe.tbody=Xe.tfoot=Xe.colgroup=Xe.caption=Xe.thead,Xe.th=Xe.td;var qe=/<|&#?\w+;/;!function(){var e=$.createDocumentFragment(),t=e.appendChild($.createElement("div")),r=$.createElement("input");r.setAttribute("type","radio"),r.setAttribute("checked","checked"),r.setAttribute("name","t"),t.appendChild(r),ue.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",ue.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ye=$.documentElement,Ze=/^key/,Ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qe=/^([^.]*)(?:\.(.+)|)/;pe.event={global:{},add:function(e,t,r,n,i){var o,a,s,c,l,u,h,p,d,f,m,v=Ie.get(e);if(v)for(r.handler&&(o=r,r=o.handler,i=o.selector),i&&pe.find.matchesSelector(Ye,i),r.guid||(r.guid=pe.guid++),(c=v.events)||(c=v.events={}),(a=v.handle)||(a=v.handle=function(t){return"undefined"!=typeof pe&&pe.event.triggered!==t.type?pe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Ce)||[""],l=t.length;l--;)s=Qe.exec(t[l])||[],d=m=s[1],f=(s[2]||"").split(".").sort(),d&&(h=pe.event.special[d]||{},d=(i?h.delegateType:h.bindType)||d,h=pe.event.special[d]||{},u=pe.extend({type:d,origType:m,data:n,handler:r,guid:r.guid,selector:i,needsContext:i&&pe.expr.match.needsContext.test(i),namespace:f.join(".")},o),(p=c[d])||(p=c[d]=[],p.delegateCount=0,h.setup&&h.setup.call(e,n,f,a)!==!1||e.addEventListener&&e.addEventListener(d,a)),h.add&&(h.add.call(e,u),u.handler.guid||(u.handler.guid=r.guid)),i?p.splice(p.delegateCount++,0,u):p.push(u),pe.event.global[d]=!0)},remove:function(e,t,r,n,i){var o,a,s,c,l,u,h,p,d,f,m,v=Ie.hasData(e)&&Ie.get(e);if(v&&(c=v.events)){for(t=(t||"").match(Ce)||[""],l=t.length;l--;)if(s=Qe.exec(t[l])||[],d=m=s[1],f=(s[2]||"").split(".").sort(),d){for(h=pe.event.special[d]||{},d=(n?h.delegateType:h.bindType)||d,p=c[d]||[],s=s[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)u=p[o],!i&&m!==u.origType||r&&r.guid!==u.guid||s&&!s.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,h.remove&&h.remove.call(e,u));a&&!p.length&&(h.teardown&&h.teardown.call(e,f,v.handle)!==!1||pe.removeEvent(e,d,v.handle),delete c[d])}else for(d in c)pe.event.remove(e,d+t[l],r,n,!0);pe.isEmptyObject(c)&&Ie.remove(e,"handle events")}},dispatch:function(e){var t,r,n,i,o,a,s=pe.event.fix(e),c=new Array(arguments.length),l=(Ie.get(this,"events")||{})[s.type]||[],u=pe.event.special[s.type]||{};for(c[0]=s,t=1;t<arguments.length;t++)c[t]=arguments[t];if(s.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,s)!==!1){for(a=pe.event.handlers.call(this,s,l),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,r=0;(o=i.handlers[r++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,n=((pe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,c),void 0!==n&&(s.result=n)===!1&&(s.preventDefault(),s.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,s),s.result}},handlers:function(e,t){var r,n,i,o,a=[],s=t.delegateCount,c=e.target;if(s&&c.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&(c.disabled!==!0||"click"!==e.type)){for(n=[],r=0;r<s;r++)o=t[r],i=o.selector+" ",void 0===n[i]&&(n[i]=o.needsContext?pe(i,this).index(c)>-1:pe.find(i,this,null,[c]).length),n[i]&&n.push(o);n.length&&a.push({elem:c,handlers:n})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},addProp:function(e,t){Object.defineProperty(pe.Event.prototype,e,{enumerable:!0,configurable:!0,get:pe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[pe.expando]?e:new pe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==w()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===w()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&pe.nodeName(this,"input"))return this.click(),!1},_default:function(e){return pe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},pe.removeEvent=function(e,t,r){e.removeEventListener&&e.removeEventListener(t,r)},pe.Event=function(e,t){return this instanceof pe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?x:b,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&pe.extend(this,t),this.timeStamp=e&&e.timeStamp||pe.now(),void(this[pe.expando]=!0)):new pe.Event(e,t)},pe.Event.prototype={constructor:pe.Event,isDefaultPrevented:b,isPropagationStopped:b,isImmediatePropagationStopped:b,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},pe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ze.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ke.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},pe.event.addProp),pe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){pe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var r,n=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===n||pe.contains(n,i))||(e.type=o.origType,r=o.handler.apply(this,arguments),e.type=t),r}}}),pe.fn.extend({on:function(e,t,r,n){return _(this,e,t,r,n)},one:function(e,t,r,n){return _(this,e,t,r,n,1)},off:function(e,t,r){var n,i;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,pe(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(r=t,t=void 0),r===!1&&(r=b),this.each(function(){pe.event.remove(this,e,r,t)})}});var Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,$e=/<script|<style|<link/i,et=/checked\s*(?:[^=]|=\s*.checked.)/i,tt=/^true\/(.*)/,rt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;pe.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,r){var n,i,o,a,s=e.cloneNode(!0),c=pe.contains(e.ownerDocument,e);if(!(ue.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||pe.isXMLDoc(e)))for(a=v(s),o=v(e),n=0,i=o.length;n<i;n++)A(o[n],a[n]);if(t)if(r)for(o=o||v(e),a=a||v(s),n=0,i=o.length;n<i;n++)E(o[n],a[n]);else E(e,s);return a=v(s,"script"),a.length>0&&g(a,!c&&v(e,"script")),s},cleanData:function(e){for(var t,r,n,i=pe.event.special,o=0;void 0!==(r=e[o]);o++)if(De(r)){if(t=r[Ie.expando]){if(t.events)for(n in t.events)i[n]?pe.event.remove(r,n):pe.removeEvent(r,n,t.handle);r[Ie.expando]=void 0}r[Be.expando]&&(r[Be.expando]=void 0)}}}),pe.fn.extend({detach:function(e){return L(this,e,!0)},remove:function(e){return L(this,e)},text:function(e){return Re(this,function(e){return void 0===e?pe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return C(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=M(this,e);t.appendChild(e)}})},prepend:function(){return C(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=M(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return C(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return C(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(pe.cleanData(v(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return pe.clone(this,e,t)})},html:function(e){return Re(this,function(e){var t=this[0]||{},r=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!$e.test(e)&&!Xe[(He.exec(e)||["",""])[1].toLowerCase()]){e=pe.htmlPrefilter(e);try{for(;r<n;r++)t=this[r]||{},1===t.nodeType&&(pe.cleanData(v(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return C(this,arguments,function(t){var r=this.parentNode;pe.inArray(this,e)<0&&(pe.cleanData(v(this)),r&&r.replaceChild(t,this))},e)}}),pe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){pe.fn[e]=function(e){for(var r,n=[],i=pe(e),o=i.length-1,a=0;a<=o;a++)r=a===o?this:this.clone(!0),pe(i[a])[t](r),ne.apply(n,r.get());return this.pushStack(n)}});var nt=/^margin/,it=new RegExp("^("+Ne+")(?!px)[a-z%]+$","i"),ot=function(t){var r=t.ownerDocument.defaultView;return r&&r.opener||(r=e),r.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ye.appendChild(a);var t=e.getComputedStyle(s);r="1%"!==t.top,o="2px"===t.marginLeft,n="4px"===t.width,s.style.marginRight="50%",i="4px"===t.marginRight,Ye.removeChild(a),s=null}}var r,n,i,o,a=$.createElement("div"),s=$.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",ue.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),pe.extend(ue,{pixelPosition:function(){return t(),r},boxSizingReliable:function(){return t(),n},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),o}}))}();var at=/^(none|table(?!-c[ea]).+)/,st={position:"absolute",visibility:"hidden",display:"block"},ct={letterSpacing:"0",fontWeight:"400"},lt=["Webkit","Moz","ms"],ut=$.createElement("div").style;pe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var r=P(e,"opacity");return""===r?"1":r}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,r,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=pe.camelCase(t),c=e.style;return t=pe.cssProps[s]||(pe.cssProps[s]=D(s)||s),a=pe.cssHooks[t]||pe.cssHooks[s],void 0===r?a&&"get"in a&&void 0!==(i=a.get(e,!1,n))?i:c[t]:(o=typeof r,"string"===o&&(i=Ue.exec(r))&&i[1]&&(r=d(e,t,i),o="number"),null!=r&&r===r&&("number"===o&&(r+=i&&i[3]||(pe.cssNumber[s]?"":"px")),ue.clearCloneStyle||""!==r||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(r=a.set(e,r,n))||(c[t]=r)),void 0)}},css:function(e,t,r,n){var i,o,a,s=pe.camelCase(t);return t=pe.cssProps[s]||(pe.cssProps[s]=D(s)||s),a=pe.cssHooks[t]||pe.cssHooks[s],a&&"get"in a&&(i=a.get(e,!0,r)),void 0===i&&(i=P(e,t,n)),"normal"===i&&t in ct&&(i=ct[t]),""===r||r?(o=parseFloat(i),r===!0||isFinite(o)?o||0:i):i}}),pe.each(["height","width"],function(e,t){pe.cssHooks[t]={get:function(e,r,n){if(r)return!at.test(pe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?O(e,t,n):ke(e,st,function(){return O(e,t,n)})},set:function(e,r,n){var i,o=n&&ot(e),a=n&&B(e,t,n,"border-box"===pe.css(e,"boxSizing",!1,o),o);return a&&(i=Ue.exec(r))&&"px"!==(i[3]||"px")&&(e.style[t]=r,r=pe.css(e,t)),I(e,r,a)}}}),pe.cssHooks.marginLeft=R(ue.reliableMarginLeft,function(e,t){if(t)return(parseFloat(P(e,"marginLeft"))||e.getBoundingClientRect().left-ke(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),pe.each({margin:"",padding:"",border:"Width"},function(e,t){pe.cssHooks[e+t]={expand:function(r){for(var n=0,i={},o="string"==typeof r?r.split(" "):[r];n<4;n++)i[e+Ge[n]+t]=o[n]||o[n-2]||o[0];return i}},nt.test(e)||(pe.cssHooks[e+t].set=I)}),pe.fn.extend({css:function(e,t){return Re(this,function(e,t,r){var n,i,o={},a=0;if(pe.isArray(t)){for(n=ot(e),i=t.length;a<i;a++)o[t[a]]=pe.css(e,t[a],!1,n);return o}return void 0!==r?pe.style(e,t,r):pe.css(e,t)},e,t,arguments.length>1)}}),pe.Tween=F,F.prototype={constructor:F,init:function(e,t,r,n,i,o){this.elem=e,this.prop=r,this.easing=i||pe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=o||(pe.cssNumber[r]?"":"px")},cur:function(){var e=F.propHooks[this.prop];return e&&e.get?e.get(this):F.propHooks._default.get(this)},run:function(e){var t,r=F.propHooks[this.prop];return this.options.duration?this.pos=t=pe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),r&&r.set?r.set(this):F.propHooks._default.set(this),this}},F.prototype.init.prototype=F.prototype,F.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=pe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){pe.fx.step[e.prop]?pe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[pe.cssProps[e.prop]]&&!pe.cssHooks[e.prop]?e.elem[e.prop]=e.now:pe.style(e.elem,e.prop,e.now+e.unit)}}},F.propHooks.scrollTop=F.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},pe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},pe.fx=F.prototype.init,pe.fx.step={};var ht,pt,dt=/^(?:toggle|show|hide)$/,ft=/queueHooks$/;pe.Animation=pe.extend(j,{tweeners:{"*":[function(e,t){var r=this.createTween(e,t);return d(r.elem,e,Ue.exec(t),r),r}]},tweener:function(e,t){pe.isFunction(e)?(t=e,e=["*"]):e=e.match(Ce);for(var r,n=0,i=e.length;n<i;n++)r=e[n],j.tweeners[r]=j.tweeners[r]||[],j.tweeners[r].unshift(t)},prefilters:[k],prefilter:function(e,t){t?j.prefilters.unshift(e):j.prefilters.push(e)}}),pe.speed=function(e,t,r){var n=e&&"object"==typeof e?pe.extend({},e):{complete:r||!r&&t||pe.isFunction(e)&&e,duration:e,easing:r&&t||t&&!pe.isFunction(t)&&t};return pe.fx.off||$.hidden?n.duration=0:n.duration="number"==typeof n.duration?n.duration:n.duration in pe.fx.speeds?pe.fx.speeds[n.duration]:pe.fx.speeds._default,null!=n.queue&&n.queue!==!0||(n.queue="fx"),n.old=n.complete,n.complete=function(){pe.isFunction(n.old)&&n.old.call(this),n.queue&&pe.dequeue(this,n.queue)},n},pe.fn.extend({fadeTo:function(e,t,r,n){return this.filter(Ve).css("opacity",0).show().end().animate({opacity:t},e,r,n)},animate:function(e,t,r,n){var i=pe.isEmptyObject(e),o=pe.speed(t,r,n),a=function(){var t=j(this,pe.extend({},e),o);(i||Ie.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,t,r){var n=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof e&&(r=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=pe.timers,a=Ie.get(this);if(i)a[i]&&a[i].stop&&n(a[i]);else for(i in a)a[i]&&a[i].stop&&ft.test(i)&&n(a[i]);
for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(r),t=!1,o.splice(i,1));!t&&r||pe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,r=Ie.get(this),n=r[e+"queue"],i=r[e+"queueHooks"],o=pe.timers,a=n?n.length:0;for(r.finish=!0,pe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete r.finish})}}),pe.each(["toggle","show","hide"],function(e,t){var r=pe.fn[t];pe.fn[t]=function(e,n,i){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(G(t,!0),e,n,i)}}),pe.each({slideDown:G("show"),slideUp:G("hide"),slideToggle:G("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){pe.fn[e]=function(e,r,n){return this.animate(t,e,r,n)}}),pe.timers=[],pe.fx.tick=function(){var e,t=0,r=pe.timers;for(ht=pe.now();t<r.length;t++)e=r[t],e()||r[t]!==e||r.splice(t--,1);r.length||pe.fx.stop(),ht=void 0},pe.fx.timer=function(e){pe.timers.push(e),e()?pe.fx.start():pe.timers.pop()},pe.fx.interval=13,pe.fx.start=function(){pt||(pt=e.requestAnimationFrame?e.requestAnimationFrame(N):e.setInterval(pe.fx.tick,pe.fx.interval))},pe.fx.stop=function(){e.cancelAnimationFrame?e.cancelAnimationFrame(pt):e.clearInterval(pt),pt=null},pe.fx.speeds={slow:600,fast:200,_default:400},pe.fn.delay=function(t,r){return t=pe.fx?pe.fx.speeds[t]||t:t,r=r||"fx",this.queue(r,function(r,n){var i=e.setTimeout(r,t);n.stop=function(){e.clearTimeout(i)}})},function(){var e=$.createElement("input"),t=$.createElement("select"),r=t.appendChild($.createElement("option"));e.type="checkbox",ue.checkOn=""!==e.value,ue.optSelected=r.selected,e=$.createElement("input"),e.value="t",e.type="radio",ue.radioValue="t"===e.value}();var mt,vt=pe.expr.attrHandle;pe.fn.extend({attr:function(e,t){return Re(this,pe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){pe.removeAttr(this,e)})}}),pe.extend({attr:function(e,t,r){var n,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?pe.prop(e,t,r):(1===o&&pe.isXMLDoc(e)||(i=pe.attrHooks[t.toLowerCase()]||(pe.expr.match.bool.test(t)?mt:void 0)),void 0!==r?null===r?void pe.removeAttr(e,t):i&&"set"in i&&void 0!==(n=i.set(e,r,t))?n:(e.setAttribute(t,r+""),r):i&&"get"in i&&null!==(n=i.get(e,t))?n:(n=pe.find.attr(e,t),null==n?void 0:n))},attrHooks:{type:{set:function(e,t){if(!ue.radioValue&&"radio"===t&&pe.nodeName(e,"input")){var r=e.value;return e.setAttribute("type",t),r&&(e.value=r),t}}}},removeAttr:function(e,t){var r,n=0,i=t&&t.match(Ce);if(i&&1===e.nodeType)for(;r=i[n++];)e.removeAttribute(r)}}),mt={set:function(e,t,r){return t===!1?pe.removeAttr(e,r):e.setAttribute(r,r),r}},pe.each(pe.expr.match.bool.source.match(/\w+/g),function(e,t){var r=vt[t]||pe.find.attr;vt[t]=function(e,t,n){var i,o,a=t.toLowerCase();return n||(o=vt[a],vt[a]=i,i=null!=r(e,t,n)?a:null,vt[a]=o),i}});var gt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;pe.fn.extend({prop:function(e,t){return Re(this,pe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[pe.propFix[e]||e]})}}),pe.extend({prop:function(e,t,r){var n,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&pe.isXMLDoc(e)||(t=pe.propFix[t]||t,i=pe.propHooks[t]),void 0!==r?i&&"set"in i&&void 0!==(n=i.set(e,r,t))?n:e[t]=r:i&&"get"in i&&null!==(n=i.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=pe.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),ue.optSelected||(pe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),pe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){pe.propFix[this.toLowerCase()]=this});var xt=/[\t\r\n\f]/g;pe.fn.extend({addClass:function(e){var t,r,n,i,o,a,s,c=0;if(pe.isFunction(e))return this.each(function(t){pe(this).addClass(e.call(this,t,H(this)))});if("string"==typeof e&&e)for(t=e.match(Ce)||[];r=this[c++];)if(i=H(r),n=1===r.nodeType&&(" "+i+" ").replace(xt," ")){for(a=0;o=t[a++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");s=pe.trim(n),i!==s&&r.setAttribute("class",s)}return this},removeClass:function(e){var t,r,n,i,o,a,s,c=0;if(pe.isFunction(e))return this.each(function(t){pe(this).removeClass(e.call(this,t,H(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Ce)||[];r=this[c++];)if(i=H(r),n=1===r.nodeType&&(" "+i+" ").replace(xt," ")){for(a=0;o=t[a++];)for(;n.indexOf(" "+o+" ")>-1;)n=n.replace(" "+o+" "," ");s=pe.trim(n),i!==s&&r.setAttribute("class",s)}return this},toggleClass:function(e,t){var r=typeof e;return"boolean"==typeof t&&"string"===r?t?this.addClass(e):this.removeClass(e):pe.isFunction(e)?this.each(function(r){pe(this).toggleClass(e.call(this,r,H(this),t),t)}):this.each(function(){var t,n,i,o;if("string"===r)for(n=0,i=pe(this),o=e.match(Ce)||[];t=o[n++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==r||(t=H(this),t&&Ie.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":Ie.get(this,"__className__")||""))})},hasClass:function(e){var t,r,n=0;for(t=" "+e+" ";r=this[n++];)if(1===r.nodeType&&(" "+H(r)+" ").replace(xt," ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g,wt=/[\x20\t\r\n\f]+/g;pe.fn.extend({val:function(e){var t,r,n,i=this[0];{if(arguments.length)return n=pe.isFunction(e),this.each(function(r){var i;1===this.nodeType&&(i=n?e.call(this,r,pe(this).val()):e,null==i?i="":"number"==typeof i?i+="":pe.isArray(i)&&(i=pe.map(i,function(e){return null==e?"":e+""})),t=pe.valHooks[this.type]||pe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=pe.valHooks[i.type]||pe.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(r=t.get(i,"value"))?r:(r=i.value,"string"==typeof r?r.replace(bt,""):null==r?"":r)}}}),pe.extend({valHooks:{option:{get:function(e){var t=pe.find.attr(e,"value");return null!=t?t:pe.trim(pe.text(e)).replace(wt," ")}},select:{get:function(e){for(var t,r,n=e.options,i=e.selectedIndex,o="select-one"===e.type,a=o?null:[],s=o?i+1:n.length,c=i<0?s:o?i:0;c<s;c++)if(r=n[c],(r.selected||c===i)&&!r.disabled&&(!r.parentNode.disabled||!pe.nodeName(r.parentNode,"optgroup"))){if(t=pe(r).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var r,n,i=e.options,o=pe.makeArray(t),a=i.length;a--;)n=i[a],(n.selected=pe.inArray(pe.valHooks.option.get(n),o)>-1)&&(r=!0);return r||(e.selectedIndex=-1),o}}}}),pe.each(["radio","checkbox"],function(){pe.valHooks[this]={set:function(e,t){if(pe.isArray(t))return e.checked=pe.inArray(pe(e).val(),t)>-1}},ue.checkOn||(pe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var _t=/^(?:focusinfocus|focusoutblur)$/;pe.extend(pe.event,{trigger:function(t,r,n,i){var o,a,s,c,l,u,h,p=[n||$],d=se.call(t,"type")?t.type:t,f=se.call(t,"namespace")?t.namespace.split("."):[];if(a=s=n=n||$,3!==n.nodeType&&8!==n.nodeType&&!_t.test(d+pe.event.triggered)&&(d.indexOf(".")>-1&&(f=d.split("."),d=f.shift(),f.sort()),l=d.indexOf(":")<0&&"on"+d,t=t[pe.expando]?t:new pe.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),r=null==r?[t]:pe.makeArray(r,[t]),h=pe.event.special[d]||{},i||!h.trigger||h.trigger.apply(n,r)!==!1)){if(!i&&!h.noBubble&&!pe.isWindow(n)){for(c=h.delegateType||d,_t.test(c+d)||(a=a.parentNode);a;a=a.parentNode)p.push(a),s=a;s===(n.ownerDocument||$)&&p.push(s.defaultView||s.parentWindow||e)}for(o=0;(a=p[o++])&&!t.isPropagationStopped();)t.type=o>1?c:h.bindType||d,u=(Ie.get(a,"events")||{})[t.type]&&Ie.get(a,"handle"),u&&u.apply(a,r),u=l&&a[l],u&&u.apply&&De(a)&&(t.result=u.apply(a,r),t.result===!1&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||h._default&&h._default.apply(p.pop(),r)!==!1||!De(n)||l&&pe.isFunction(n[d])&&!pe.isWindow(n)&&(s=n[l],s&&(n[l]=null),pe.event.triggered=d,n[d](),pe.event.triggered=void 0,s&&(n[l]=s)),t.result}},simulate:function(e,t,r){var n=pe.extend(new pe.Event,r,{type:e,isSimulated:!0});pe.event.trigger(n,null,t)}}),pe.fn.extend({trigger:function(e,t){return this.each(function(){pe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var r=this[0];if(r)return pe.event.trigger(e,t,r,!0)}}),pe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){pe.fn[t]=function(e,r){return arguments.length>0?this.on(t,null,e,r):this.trigger(t)}}),pe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),ue.focusin="onfocusin"in e,ue.focusin||pe.each({focus:"focusin",blur:"focusout"},function(e,t){var r=function(e){pe.event.simulate(t,e.target,pe.event.fix(e))};pe.event.special[t]={setup:function(){var n=this.ownerDocument||this,i=Ie.access(n,t);i||n.addEventListener(e,r,!0),Ie.access(n,t,(i||0)+1)},teardown:function(){var n=this.ownerDocument||this,i=Ie.access(n,t)-1;i?Ie.access(n,t,i):(n.removeEventListener(e,r,!0),Ie.remove(n,t))}}});var Mt=e.location,St=pe.now(),Tt=/\?/;pe.parseXML=function(t){var r;if(!t||"string"!=typeof t)return null;try{r=(new e.DOMParser).parseFromString(t,"text/xml")}catch(n){r=void 0}return r&&!r.getElementsByTagName("parsererror").length||pe.error("Invalid XML: "+t),r};var Et=/\[\]$/,At=/\r?\n/g,Ct=/^(?:submit|button|image|reset|file)$/i,Lt=/^(?:input|select|textarea|keygen)/i;pe.param=function(e,t){var r,n=[],i=function(e,t){var r=pe.isFunction(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==r?"":r)};if(pe.isArray(e)||e.jquery&&!pe.isPlainObject(e))pe.each(e,function(){i(this.name,this.value)});else for(r in e)W(r,e[r],t,i);return n.join("&")},pe.fn.extend({serialize:function(){return pe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=pe.prop(this,"elements");return e?pe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!pe(this).is(":disabled")&&Lt.test(this.nodeName)&&!Ct.test(e)&&(this.checked||!je.test(e))}).map(function(e,t){var r=pe(this).val();return null==r?null:pe.isArray(r)?pe.map(r,function(e){return{name:t.name,value:e.replace(At,"\r\n")}}):{name:t.name,value:r.replace(At,"\r\n")}}).get()}});var Pt=/%20/g,Rt=/#.*$/,Dt=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,Bt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ot=/^(?:GET|HEAD)$/,Ft=/^\/\//,Nt={},Ut={},Gt="*/".concat("*"),Vt=$.createElement("a");Vt.href=Mt.href,pe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Mt.href,type:"GET",isLocal:Bt.test(Mt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Gt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":pe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Y(Y(e,pe.ajaxSettings),t):Y(pe.ajaxSettings,e)},ajaxPrefilter:X(Nt),ajaxTransport:X(Ut),ajax:function(t,r){function n(t,r,n,s){var l,p,d,b,w,_=r;u||(u=!0,c&&e.clearTimeout(c),i=void 0,a=s||"",M.readyState=t>0?4:0,l=t>=200&&t<300||304===t,n&&(b=Z(f,M,n)),b=K(f,b,M,l),l?(f.ifModified&&(w=M.getResponseHeader("Last-Modified"),w&&(pe.lastModified[o]=w),w=M.getResponseHeader("etag"),w&&(pe.etag[o]=w)),204===t||"HEAD"===f.type?_="nocontent":304===t?_="notmodified":(_=b.state,p=b.data,d=b.error,l=!d)):(d=_,!t&&_||(_="error",t<0&&(t=0))),M.status=t,M.statusText=(r||_)+"",l?g.resolveWith(m,[p,_,M]):g.rejectWith(m,[M,_,d]),M.statusCode(x),x=void 0,h&&v.trigger(l?"ajaxSuccess":"ajaxError",[M,f,l?p:d]),y.fireWith(m,[M,_]),h&&(v.trigger("ajaxComplete",[M,f]),--pe.active||pe.event.trigger("ajaxStop")))}"object"==typeof t&&(r=t,t=void 0),r=r||{};var i,o,a,s,c,l,u,h,p,d,f=pe.ajaxSetup({},r),m=f.context||f,v=f.context&&(m.nodeType||m.jquery)?pe(m):pe.event,g=pe.Deferred(),y=pe.Callbacks("once memory"),x=f.statusCode||{},b={},w={},_="canceled",M={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=It.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?a:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)M.always(e[M.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||_;return i&&i.abort(t),n(0,t),this}};if(g.promise(M),f.url=((t||f.url||Mt.href)+"").replace(Ft,Mt.protocol+"//"),f.type=r.method||r.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(Ce)||[""],null==f.crossDomain){l=$.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Vt.protocol+"//"+Vt.host!=l.protocol+"//"+l.host}catch(S){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=pe.param(f.data,f.traditional)),q(Nt,f,r,M),u)return M;h=pe.event&&f.global,h&&0===pe.active++&&pe.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Ot.test(f.type),o=f.url.replace(Rt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Pt,"+")):(d=f.url.slice(o.length),f.data&&(o+=(Tt.test(o)?"&":"?")+f.data,delete f.data),f.cache===!1&&(o=o.replace(Dt,""),d=(Tt.test(o)?"&":"?")+"_="+St++ +d),f.url=o+d),f.ifModified&&(pe.lastModified[o]&&M.setRequestHeader("If-Modified-Since",pe.lastModified[o]),pe.etag[o]&&M.setRequestHeader("If-None-Match",pe.etag[o])),(f.data&&f.hasContent&&f.contentType!==!1||r.contentType)&&M.setRequestHeader("Content-Type",f.contentType),M.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Gt+"; q=0.01":""):f.accepts["*"]);for(p in f.headers)M.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(f.beforeSend.call(m,M,f)===!1||u))return M.abort();if(_="abort",y.add(f.complete),M.done(f.success),M.fail(f.error),i=q(Ut,f,r,M)){if(M.readyState=1,h&&v.trigger("ajaxSend",[M,f]),u)return M;f.async&&f.timeout>0&&(c=e.setTimeout(function(){M.abort("timeout")},f.timeout));try{u=!1,i.send(b,n)}catch(S){if(u)throw S;n(-1,S)}}else n(-1,"No Transport");return M},getJSON:function(e,t,r){return pe.get(e,t,r,"json")},getScript:function(e,t){return pe.get(e,void 0,t,"script")}}),pe.each(["get","post"],function(e,t){pe[t]=function(e,r,n,i){return pe.isFunction(r)&&(i=i||n,n=r,r=void 0),pe.ajax(pe.extend({url:e,type:t,dataType:i,data:r,success:n},pe.isPlainObject(e)&&e))}}),pe._evalUrl=function(e){return pe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},pe.fn.extend({wrapAll:function(e){var t;return this[0]&&(pe.isFunction(e)&&(e=e.call(this[0])),t=pe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return pe.isFunction(e)?this.each(function(t){pe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=pe(this),r=t.contents();r.length?r.wrapAll(e):t.append(e)})},wrap:function(e){var t=pe.isFunction(e);return this.each(function(r){pe(this).wrapAll(t?e.call(this,r):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){pe(this).replaceWith(this.childNodes)}),this}}),pe.expr.pseudos.hidden=function(e){return!pe.expr.pseudos.visible(e)},pe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},pe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var kt={0:200,1223:204},zt=pe.ajaxSettings.xhr();ue.cors=!!zt&&"withCredentials"in zt,ue.ajax=zt=!!zt,pe.ajaxTransport(function(t){var r,n;if(ue.cors||zt&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);r=function(e){return function(){r&&(r=n=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(kt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=r(),n=s.onerror=r("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){r&&n()})},r=r("abort");try{s.send(t.hasContent&&t.data||null)}catch(c){if(r)throw c}},abort:function(){r&&r()}}}),pe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),pe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return pe.globalEval(e),e}}}),pe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),pe.ajaxTransport("script",function(e){if(e.crossDomain){var t,r;return{send:function(n,i){t=pe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",r=function(e){t.remove(),r=null,e&&i("error"===e.type?404:200,e.type)}),$.head.appendChild(t[0])},abort:function(){r&&r()}}}});var jt=[],Ht=/(=)\?(?=&|$)|\?\?/;pe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=jt.pop()||pe.expando+"_"+St++;return this[e]=!0,e}}),pe.ajaxPrefilter("json jsonp",function(t,r,n){var i,o,a,s=t.jsonp!==!1&&(Ht.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ht.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=pe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Ht,"$1"+i):t.jsonp!==!1&&(t.url+=(Tt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||pe.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},n.always(function(){void 0===o?pe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=r.jsonpCallback,jt.push(i)),a&&pe.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),ue.createHTMLDocument=function(){var e=$.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),pe.parseHTML=function(e,t,r){if("string"!=typeof e)return[];"boolean"==typeof t&&(r=t,t=!1);var n,i,o;return t||(ue.createHTMLDocument?(t=$.implementation.createHTMLDocument(""),n=t.createElement("base"),n.href=$.location.href,t.head.appendChild(n)):t=$),i=we.exec(e),o=!r&&[],i?[t.createElement(i[1])]:(i=y([e],t,o),o&&o.length&&pe(o).remove(),pe.merge([],i.childNodes))},pe.fn.load=function(e,t,r){var n,i,o,a=this,s=e.indexOf(" ");return s>-1&&(n=pe.trim(e.slice(s)),e=e.slice(0,s)),pe.isFunction(t)?(r=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&pe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(n?pe("<div>").append(pe.parseHTML(e)).find(n):e)}).always(r&&function(e,t){a.each(function(){r.apply(this,o||[e.responseText,t,e])})}),this},pe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){pe.fn[t]=function(e){return this.on(t,e)}}),pe.expr.pseudos.animated=function(e){return pe.grep(pe.timers,function(t){return e===t.elem}).length},pe.offset={setOffset:function(e,t,r){var n,i,o,a,s,c,l,u=pe.css(e,"position"),h=pe(e),p={};"static"===u&&(e.style.position="relative"),s=h.offset(),o=pe.css(e,"top"),c=pe.css(e,"left"),l=("absolute"===u||"fixed"===u)&&(o+c).indexOf("auto")>-1,l?(n=h.position(),a=n.top,i=n.left):(a=parseFloat(o)||0,i=parseFloat(c)||0),pe.isFunction(t)&&(t=t.call(e,r,pe.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+i),"using"in t?t.using.call(e,p):h.css(p)}},pe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){pe.offset.setOffset(this,e,t)});var t,r,n,i,o=this[0];if(o)return o.getClientRects().length?(n=o.getBoundingClientRect(),n.width||n.height?(i=o.ownerDocument,r=Q(i),t=i.documentElement,{top:n.top+r.pageYOffset-t.clientTop,left:n.left+r.pageXOffset-t.clientLeft}):n):{top:0,left:0}},position:function(){if(this[0]){var e,t,r=this[0],n={top:0,left:0};return"fixed"===pe.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),pe.nodeName(e[0],"html")||(n=e.offset()),n={top:n.top+pe.css(e[0],"borderTopWidth",!0),left:n.left+pe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-n.top-pe.css(r,"marginTop",!0),left:t.left-n.left-pe.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===pe.css(e,"position");)e=e.offsetParent;return e||Ye})}}),pe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var r="pageYOffset"===t;pe.fn[e]=function(n){return Re(this,function(e,n,i){var o=Q(e);return void 0===i?o?o[t]:e[n]:void(o?o.scrollTo(r?o.pageXOffset:i,r?i:o.pageYOffset):e[n]=i)},e,n,arguments.length)}}),pe.each(["top","left"],function(e,t){pe.cssHooks[t]=R(ue.pixelPosition,function(e,r){if(r)return r=P(e,t),it.test(r)?pe(e).position()[t]+"px":r})}),pe.each({Height:"height",Width:"width"},function(e,t){pe.each({padding:"inner"+e,content:t,"":"outer"+e},function(r,n){pe.fn[n]=function(i,o){var a=arguments.length&&(r||"boolean"!=typeof i),s=r||(i===!0||o===!0?"margin":"border");return Re(this,function(t,r,i){var o;return pe.isWindow(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?pe.css(t,r,s):pe.style(t,r,i,s)},t,a?i:void 0,a)}})}),pe.fn.extend({bind:function(e,t,r){return this.on(e,null,t,r)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,r,n){return this.on(t,e,r,n)},undelegate:function(e,t,r){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",r)}}),pe.parseJSON=JSON.parse,"function"==typeof define&&define.amd&&define("jquery",[],function(){return pe});var Wt=e.jQuery,Xt=e.$;return pe.noConflict=function(t){return e.$===pe&&(e.$=Xt),t&&e.jQuery===pe&&(e.jQuery=Wt),pe},t||(e.jQuery=e.$=pe),pe})},{}],2:[function(e,t,r){var n={REVISION:"79"};"function"==typeof define&&define.amd?define("three",n):"undefined"!=typeof r&&"undefined"!=typeof t&&(t.exports=n),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Math.sign&&(Math.sign=function(e){return e<0?-1:e>0?1:+e}),void 0===Function.prototype.name&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1]}}),void 0===Object.assign&&!function(){Object.assign=function(e){"use strict";if(void 0===e||null===e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),r=1;r<arguments.length;r++){var n=arguments[r];if(void 0!==n&&null!==n)for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}}(),Object.assign(n,{MOUSE:{LEFT:0,MIDDLE:1,RIGHT:2},CullFaceNone:0,CullFaceBack:1,CullFaceFront:2,CullFaceFrontBack:3,FrontFaceDirectionCW:0,FrontFaceDirectionCCW:1,BasicShadowMap:0,PCFShadowMap:1,PCFSoftShadowMap:2,FrontSide:0,BackSide:1,DoubleSide:2,FlatShading:1,SmoothShading:2,NoColors:0,FaceColors:1,VertexColors:2,NoBlending:0,NormalBlending:1,AdditiveBlending:2,SubtractiveBlending:3,MultiplyBlending:4,CustomBlending:5,AddEquation:100,SubtractEquation:101,ReverseSubtractEquation:102,MinEquation:103,MaxEquation:104,ZeroFactor:200,OneFactor:201,SrcColorFactor:202,OneMinusSrcColorFactor:203,SrcAlphaFactor:204,OneMinusSrcAlphaFactor:205,DstAlphaFactor:206,OneMinusDstAlphaFactor:207,DstColorFactor:208,OneMinusDstColorFactor:209,SrcAlphaSaturateFactor:210,NeverDepth:0,AlwaysDepth:1,LessDepth:2,LessEqualDepth:3,EqualDepth:4,GreaterEqualDepth:5,GreaterDepth:6,NotEqualDepth:7,MultiplyOperation:0,MixOperation:1,AddOperation:2,NoToneMapping:0,LinearToneMapping:1,ReinhardToneMapping:2,Uncharted2ToneMapping:3,CineonToneMapping:4,UVMapping:300,CubeReflectionMapping:301,CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307,RepeatWrapping:1e3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002,NearestFilter:1003,NearestMipMapNearestFilter:1004,NearestMipMapLinearFilter:1005,LinearFilter:1006,LinearMipMapNearestFilter:1007,LinearMipMapLinearFilter:1008,UnsignedByteType:1009,ByteType:1010,ShortType:1011,UnsignedShortType:1012,IntType:1013,UnsignedIntType:1014,FloatType:1015,HalfFloatType:1025,UnsignedShort4444Type:1016,UnsignedShort5551Type:1017,UnsignedShort565Type:1018,AlphaFormat:1019,RGBFormat:1020,RGBAFormat:1021,LuminanceFormat:1022,LuminanceAlphaFormat:1023,RGBEFormat:n.RGBAFormat,DepthFormat:1026,RGB_S3TC_DXT1_Format:2001,RGBA_S3TC_DXT1_Format:2002,RGBA_S3TC_DXT3_Format:2003,RGBA_S3TC_DXT5_Format:2004,RGB_PVRTC_4BPPV1_Format:2100,RGB_PVRTC_2BPPV1_Format:2101,RGBA_PVRTC_4BPPV1_Format:2102,RGBA_PVRTC_2BPPV1_Format:2103,RGB_ETC1_Format:2151,LoopOnce:2200,LoopRepeat:2201,LoopPingPong:2202,InterpolateDiscrete:2300,InterpolateLinear:2301,InterpolateSmooth:2302,ZeroCurvatureEnding:2400,ZeroSlopeEnding:2401,WrapAroundEnding:2402,TrianglesDrawMode:0,TriangleStripDrawMode:1,TriangleFanDrawMode:2,LinearEncoding:3e3,sRGBEncoding:3001,GammaEncoding:3007,RGBEEncoding:3002,LogLuvEncoding:3003,RGBM7Encoding:3004,RGBM16Encoding:3005,RGBDEncoding:3006,BasicDepthPacking:3200,RGBADepthPacking:3201}),n.Color=function(e,t,r){return void 0===t&&void 0===r?this.set(e):this.setRGB(e,t,r)},n.Color.prototype={constructor:n.Color,r:1,g:1,b:1,set:function(e){return e instanceof n.Color?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this},setScalar:function(e){this.r=e,this.g=e,this.b=e},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},setRGB:function(e,t,r){return this.r=e,this.g=t,this.b=r,this},setHSL:function(){function e(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+6*(t-e)*r:r<.5?t:r<2/3?e+6*(t-e)*(2/3-r):e}return function(t,r,i){if(t=n.Math.euclideanModulo(t,1),r=n.Math.clamp(r,0,1),i=n.Math.clamp(i,0,1),0===r)this.r=this.g=this.b=i;else{var o=i<=.5?i*(1+r):i+r-i*r,a=2*i-o;this.r=e(a,o,t+1/3),this.g=e(a,o,t),this.b=e(a,o,t-1/3)}return this}}(),setStyle:function(e){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}var r;if(r=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)){var i,o=r[1],a=r[2];switch(o){case"rgb":case"rgba":if(i=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(i[1],10))/255,this.g=Math.min(255,parseInt(i[2],10))/255,this.b=Math.min(255,parseInt(i[3],10))/255,t(i[5]),this;if(i=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(i[1],10))/100,this.g=Math.min(100,parseInt(i[2],10))/100,this.b=Math.min(100,parseInt(i[3],10))/100,t(i[5]),this;break;case"hsl":case"hsla":if(i=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var s=parseFloat(i[1])/360,c=parseInt(i[2],10)/100,l=parseInt(i[3],10)/100;return t(i[5]),this.setHSL(s,c,l)}}}else if(r=/^\#([A-Fa-f0-9]+)$/.exec(e)){var u=r[1],h=u.length;if(3===h)return this.r=parseInt(u.charAt(0)+u.charAt(0),16)/255,this.g=parseInt(u.charAt(1)+u.charAt(1),16)/255,this.b=parseInt(u.charAt(2)+u.charAt(2),16)/255,this;if(6===h)return this.r=parseInt(u.charAt(0)+u.charAt(1),16)/255,this.g=parseInt(u.charAt(2)+u.charAt(3),16)/255,this.b=parseInt(u.charAt(4)+u.charAt(5),16)/255,this}if(e&&e.length>0){var u=n.ColorKeywords[e];void 0!==u?this.setHex(u):console.warn("THREE.Color: Unknown color "+e)}return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e,t){return void 0===t&&(t=2),this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this},copyLinearToGamma:function(e,t){void 0===t&&(t=2);var r=t>0?1/t:1;return this.r=Math.pow(e.r,r),this.g=Math.pow(e.g,r),this.b=Math.pow(e.b,r),this},convertGammaToLinear:function(){var e=this.r,t=this.g,r=this.b;return this.r=e*e,this.g=t*t,this.b=r*r,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(e){var t,r,n=e||{h:0,s:0,l:0},i=this.r,o=this.g,a=this.b,s=Math.max(i,o,a),c=Math.min(i,o,a),l=(c+s)/2;if(c===s)t=0,r=0;else{var u=s-c;switch(r=l<=.5?u/(s+c):u/(2-s-c),s){case i:t=(o-a)/u+(o<a?6:0);break;case o:t=(a-i)/u+2;break;case a:t=(i-o)/u+4}t/=6}return n.h=t,n.s=r,n.l=l,n},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(e,t,r){var n=this.getHSL();return n.h+=e,n.s+=t,n.l+=r,this.setHSL(n.h,n.s,n.l),this},add:function(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this},addColors:function(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this},addScalar:function(e){return this.r+=e,this.g+=e,this.b+=e,this},sub:function(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this},multiply:function(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this},multiplyScalar:function(e){return this.r*=e,this.g*=e,this.b*=e,this},lerp:function(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this},equals:function(e){return e.r===this.r&&e.g===this.g&&e.b===this.b},fromArray:function(e,t){return void 0===t&&(t=0),this.r=e[t],this.g=e[t+1],this.b=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}},n.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,
hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},n.Quaternion=function(e,t,r,n){this._x=e||0,this._y=t||0,this._z=r||0,this._w=void 0!==n?n:1},n.Quaternion.prototype={constructor:n.Quaternion,get x(){return this._x},set x(e){this._x=e,this.onChangeCallback()},get y(){return this._y},set y(e){this._y=e,this.onChangeCallback()},get z(){return this._z},set z(e){this._z=e,this.onChangeCallback()},get w(){return this._w},set w(e){this._w=e,this.onChangeCallback()},set:function(e,t,r,n){return this._x=e,this._y=t,this._z=r,this._w=n,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this.onChangeCallback(),this},setFromEuler:function(e,t){if(e instanceof n.Euler==!1)throw new Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var r=Math.cos(e._x/2),i=Math.cos(e._y/2),o=Math.cos(e._z/2),a=Math.sin(e._x/2),s=Math.sin(e._y/2),c=Math.sin(e._z/2),l=e.order;return"XYZ"===l?(this._x=a*i*o+r*s*c,this._y=r*s*o-a*i*c,this._z=r*i*c+a*s*o,this._w=r*i*o-a*s*c):"YXZ"===l?(this._x=a*i*o+r*s*c,this._y=r*s*o-a*i*c,this._z=r*i*c-a*s*o,this._w=r*i*o+a*s*c):"ZXY"===l?(this._x=a*i*o-r*s*c,this._y=r*s*o+a*i*c,this._z=r*i*c+a*s*o,this._w=r*i*o-a*s*c):"ZYX"===l?(this._x=a*i*o-r*s*c,this._y=r*s*o+a*i*c,this._z=r*i*c-a*s*o,this._w=r*i*o+a*s*c):"YZX"===l?(this._x=a*i*o+r*s*c,this._y=r*s*o+a*i*c,this._z=r*i*c-a*s*o,this._w=r*i*o-a*s*c):"XZY"===l&&(this._x=a*i*o-r*s*c,this._y=r*s*o-a*i*c,this._z=r*i*c+a*s*o,this._w=r*i*o+a*s*c),t!==!1&&this.onChangeCallback(),this},setFromAxisAngle:function(e,t){var r=t/2,n=Math.sin(r);return this._x=e.x*n,this._y=e.y*n,this._z=e.z*n,this._w=Math.cos(r),this.onChangeCallback(),this},setFromRotationMatrix:function(e){var t,r=e.elements,n=r[0],i=r[4],o=r[8],a=r[1],s=r[5],c=r[9],l=r[2],u=r[6],h=r[10],p=n+s+h;return p>0?(t=.5/Math.sqrt(p+1),this._w=.25/t,this._x=(u-c)*t,this._y=(o-l)*t,this._z=(a-i)*t):n>s&&n>h?(t=2*Math.sqrt(1+n-s-h),this._w=(u-c)/t,this._x=.25*t,this._y=(i+a)/t,this._z=(o+l)/t):s>h?(t=2*Math.sqrt(1+s-n-h),this._w=(o-l)/t,this._x=(i+a)/t,this._y=.25*t,this._z=(c+u)/t):(t=2*Math.sqrt(1+h-n-s),this._w=(a-i)/t,this._x=(o+l)/t,this._y=(c+u)/t,this._z=.25*t),this.onChangeCallback(),this},setFromUnitVectors:function(){var e,t,r=1e-6;return function(i,o){return void 0===e&&(e=new n.Vector3),t=i.dot(o)+1,t<r?(t=0,Math.abs(i.x)>Math.abs(i.z)?e.set(-i.y,i.x,0):e.set(0,-i.z,i.y)):e.crossVectors(i,o),this._x=e.x,this._y=e.y,this._z=e.z,this._w=t,this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this.onChangeCallback(),this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)},premultiply:function(e){return this.multiplyQuaternions(e,this)},multiplyQuaternions:function(e,t){var r=e._x,n=e._y,i=e._z,o=e._w,a=t._x,s=t._y,c=t._z,l=t._w;return this._x=r*l+o*a+n*c-i*s,this._y=n*l+o*s+i*a-r*c,this._z=i*l+o*c+r*s-n*a,this._w=o*l-r*a-n*s-i*c,this.onChangeCallback(),this},slerp:function(e,t){if(0===t)return this;if(1===t)return this.copy(e);var r=this._x,n=this._y,i=this._z,o=this._w,a=o*e._w+r*e._x+n*e._y+i*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=o,this._x=r,this._y=n,this._z=i,this;var s=Math.sqrt(1-a*a);if(Math.abs(s)<.001)return this._w=.5*(o+this._w),this._x=.5*(r+this._x),this._y=.5*(n+this._y),this._z=.5*(i+this._z),this;var c=Math.atan2(s,a),l=Math.sin((1-t)*c)/s,u=Math.sin(t*c)/s;return this._w=o*l+this._w*u,this._x=r*l+this._x*u,this._y=n*l+this._y*u,this._z=i*l+this._z*u,this.onChangeCallback(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e,t){return void 0===t&&(t=0),this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this.onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}},Object.assign(n.Quaternion,{slerp:function(e,t,r,n){return r.copy(e).slerp(t,n)},slerpFlat:function(e,t,r,n,i,o,a){var s=r[n+0],c=r[n+1],l=r[n+2],u=r[n+3],h=i[o+0],p=i[o+1],d=i[o+2],f=i[o+3];if(u!==f||s!==h||c!==p||l!==d){var m=1-a,v=s*h+c*p+l*d+u*f,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var x=Math.sqrt(y),b=Math.atan2(x,v*g);m=Math.sin(m*b)/x,a=Math.sin(a*b)/x}var w=a*g;if(s=s*m+h*w,c=c*m+p*w,l=l*m+d*w,u=u*m+f*w,m===1-a){var _=1/Math.sqrt(s*s+c*c+l*l+u*u);s*=_,c*=_,l*=_,u*=_}}e[t]=s,e[t+1]=c,e[t+2]=l,e[t+3]=u}}),n.Vector2=function(e,t){this.x=e||0,this.y=t||0},n.Vector2.prototype={constructor:n.Vector2,get width(){return this.x},set width(e){this.x=e},get height(){return this.y},set height(e){this.y=e},set:function(e,t){return this.x=e,this.y=t,this},setScalar:function(e){return this.x=e,this.y=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(e){return this.x=e.x,this.y=e.y,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)},addScalar:function(e){return this.x+=e,this.y+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)},subScalar:function(e){return this.x-=e,this.y-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},multiply:function(e){return this.x*=e.x,this.y*=e.y,this},multiplyScalar:function(e){return isFinite(e)?(this.x*=e,this.y*=e):(this.x=0,this.y=0),this},divide:function(e){return this.x/=e.x,this.y/=e.y,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this},clampScalar:function(){var e,t;return function(r,i){return void 0===e&&(e=new n.Vector2,t=new n.Vector2),e.set(r,r),t.set(i,i),this.clamp(e,t)}}(),clampLength:function(e,t){var r=this.length();return this.multiplyScalar(Math.max(e,Math.min(t,r))/r)},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(e){return this.x*e.x+this.y*e.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length())},angle:function(){var e=Math.atan2(this.y,this.x);return e<0&&(e+=2*Math.PI),e},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,r=this.y-e.y;return t*t+r*r},distanceToManhattan:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)},setLength:function(e){return this.multiplyScalar(e/this.length())},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e},fromAttribute:function(e,t,r){return void 0===r&&(r=0),t=t*e.itemSize+r,this.x=e.array[t],this.y=e.array[t+1],this},rotateAround:function(e,t){var r=Math.cos(t),n=Math.sin(t),i=this.x-e.x,o=this.y-e.y;return this.x=i*r-o*n+e.x,this.y=i*n+o*r+e.y,this}},n.Vector3=function(e,t,r){this.x=e||0,this.y=t||0,this.z=r||0},n.Vector3.prototype={constructor:n.Vector3,set:function(e,t,r){return this.x=e,this.y=t,this.z=r,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)},multiplyScalar:function(e){return isFinite(e)?(this.x*=e,this.y*=e,this.z*=e):(this.x=0,this.y=0,this.z=0),this},multiplyVectors:function(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this},applyEuler:function(){var e;return function(t){return t instanceof n.Euler==!1&&console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),void 0===e&&(e=new n.Quaternion),this.applyQuaternion(e.setFromEuler(t))}}(),applyAxisAngle:function(){var e;return function(t,r){return void 0===e&&(e=new n.Quaternion),this.applyQuaternion(e.setFromAxisAngle(t,r))}}(),applyMatrix3:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements;return this.x=i[0]*t+i[3]*r+i[6]*n,this.y=i[1]*t+i[4]*r+i[7]*n,this.z=i[2]*t+i[5]*r+i[8]*n,this},applyMatrix4:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements;return this.x=i[0]*t+i[4]*r+i[8]*n+i[12],this.y=i[1]*t+i[5]*r+i[9]*n+i[13],this.z=i[2]*t+i[6]*r+i[10]*n+i[14],this},applyProjection:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements,o=1/(i[3]*t+i[7]*r+i[11]*n+i[15]);return this.x=(i[0]*t+i[4]*r+i[8]*n+i[12])*o,this.y=(i[1]*t+i[5]*r+i[9]*n+i[13])*o,this.z=(i[2]*t+i[6]*r+i[10]*n+i[14])*o,this},applyQuaternion:function(e){var t=this.x,r=this.y,n=this.z,i=e.x,o=e.y,a=e.z,s=e.w,c=s*t+o*n-a*r,l=s*r+a*t-i*n,u=s*n+i*r-o*t,h=-i*t-o*r-a*n;return this.x=c*s+h*-i+l*-a-u*-o,this.y=l*s+h*-o+u*-i-c*-a,this.z=u*s+h*-a+c*-o-l*-i,this},project:function(){var e;return function(t){return void 0===e&&(e=new n.Matrix4),e.multiplyMatrices(t.projectionMatrix,e.getInverse(t.matrixWorld)),this.applyProjection(e)}}(),unproject:function(){var e;return function(t){return void 0===e&&(e=new n.Matrix4),e.multiplyMatrices(t.matrixWorld,e.getInverse(t.projectionMatrix)),this.applyProjection(e)}}(),transformDirection:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements;return this.x=i[0]*t+i[4]*r+i[8]*n,this.y=i[1]*t+i[5]*r+i[9]*n,this.z=i[2]*t+i[6]*r+i[10]*n,this.normalize()},divide:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this},clampScalar:function(){var e,t;return function(r,i){return void 0===e&&(e=new n.Vector3,t=new n.Vector3),e.set(r,r,r),t.set(i,i,i),this.clamp(e,t)}}(),clampLength:function(e,t){var r=this.length();return this.multiplyScalar(Math.max(e,Math.min(t,r))/r)},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(e){return this.multiplyScalar(e/this.length())},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},cross:function(e,t){if(void 0!==t)return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t);var r=this.x,n=this.y,i=this.z;return this.x=n*e.z-i*e.y,this.y=i*e.x-r*e.z,this.z=r*e.y-n*e.x,this},crossVectors:function(e,t){var r=e.x,n=e.y,i=e.z,o=t.x,a=t.y,s=t.z;return this.x=n*s-i*a,this.y=i*o-r*s,this.z=r*a-n*o,this},projectOnVector:function(e){var t=e.dot(this)/e.lengthSq();return this.copy(e).multiplyScalar(t)},projectOnPlane:function(){var e;return function(t){return void 0===e&&(e=new n.Vector3),e.copy(this).projectOnVector(t),this.sub(e)}}(),reflect:function(){var e;return function(t){return void 0===e&&(e=new n.Vector3),this.sub(e.copy(t).multiplyScalar(2*this.dot(t)))}}(),angleTo:function(e){var t=this.dot(e)/Math.sqrt(this.lengthSq()*e.lengthSq());return Math.acos(n.Math.clamp(t,-1,1))},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,r=this.y-e.y,n=this.z-e.z;return t*t+r*r+n*n},distanceToManhattan:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)},setFromSpherical:function(e){var t=Math.sin(e.phi)*e.radius;return this.x=t*Math.sin(e.theta),this.y=Math.cos(e.phi)*e.radius,this.z=t*Math.cos(e.theta),this},setFromMatrixPosition:function(e){return this.setFromMatrixColumn(e,3)},setFromMatrixScale:function(e){var t=this.setFromMatrixColumn(e,0).length(),r=this.setFromMatrixColumn(e,1).length(),n=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=r,this.z=n,this},setFromMatrixColumn:function(e,t){if("number"==typeof e){console.warn("THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).");var r=e;e=t,t=r}return this.fromArray(e.elements,4*t)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e},fromAttribute:function(e,t,r){return void 0===r&&(r=0),t=t*e.itemSize+r,this.x=e.array[t],this.y=e.array[t+1],this.z=e.array[t+2],this}},n.Vector4=function(e,t,r,n){this.x=e||0,this.y=t||0,this.z=r||0,this.w=void 0!==n?n:1},n.Vector4.prototype={constructor:n.Vector4,set:function(e,t,r,n){return this.x=e,this.y=t,this.z=r,this.w=n,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this.w=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setW:function(e){return this.w=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this},multiplyScalar:function(e){return isFinite(e)?(this.x*=e,this.y*=e,this.z*=e,this.w*=e):(this.x=0,this.y=0,this.z=0,this.w=0),this},applyMatrix4:function(e){var t=this.x,r=this.y,n=this.z,i=this.w,o=e.elements;return this.x=o[0]*t+o[4]*r+o[8]*n+o[12]*i,this.y=o[1]*t+o[5]*r+o[9]*n+o[13]*i,this.z=o[2]*t+o[6]*r+o[10]*n+o[14]*i,this.w=o[3]*t+o[7]*r+o[11]*n+o[15]*i,this},divideScalar:function(e){return this.multiplyScalar(1/e)},setAxisAngleFromQuaternion:function(e){this.w=2*Math.acos(e.w);var t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this},setAxisAngleFromRotationMatrix:function(e){var t,r,n,i,o=.01,a=.1,s=e.elements,c=s[0],l=s[4],u=s[8],h=s[1],p=s[5],d=s[9],f=s[2],m=s[6],v=s[10];if(Math.abs(l-h)<o&&Math.abs(u-f)<o&&Math.abs(d-m)<o){if(Math.abs(l+h)<a&&Math.abs(u+f)<a&&Math.abs(d+m)<a&&Math.abs(c+p+v-3)<a)return this.set(1,0,0,0),this;t=Math.PI;var g=(c+1)/2,y=(p+1)/2,x=(v+1)/2,b=(l+h)/4,w=(u+f)/4,_=(d+m)/4;return g>y&&g>x?g<o?(r=0,n=.707106781,i=.707106781):(r=Math.sqrt(g),n=b/r,i=w/r):y>x?y<o?(r=.707106781,n=0,i=.707106781):(n=Math.sqrt(y),r=b/n,i=_/n):x<o?(r=.707106781,n=.707106781,i=0):(i=Math.sqrt(x),r=w/i,n=_/i),this.set(r,n,i,t),this}var M=Math.sqrt((m-d)*(m-d)+(u-f)*(u-f)+(h-l)*(h-l));return Math.abs(M)<.001&&(M=1),this.x=(m-d)/M,this.y=(u-f)/M,this.z=(h-l)/M,this.w=Math.acos((c+p+v-1)/2),this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this},clampScalar:function(){var e,t;return function(r,i){return void 0===e&&(e=new n.Vector4,t=new n.Vector4),e.set(r,r,r,r),t.set(i,i,i,i),this.clamp(e,t)}}(),floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(e){return this.multiplyScalar(e/this.length())},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e},fromAttribute:function(e,t,r){return void 0===r&&(r=0),t=t*e.itemSize+r,this.x=e.array[t],this.y=e.array[t+1],this.z=e.array[t+2],this.w=e.array[t+3],this}},n.Euler=function(e,t,r,i){this._x=e||0,this._y=t||0,this._z=r||0,this._order=i||n.Euler.DefaultOrder},n.Euler.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],n.Euler.DefaultOrder="XYZ",n.Euler.prototype={constructor:n.Euler,get x(){return this._x},set x(e){this._x=e,this.onChangeCallback()},get y(){return this._y},set y(e){this._y=e,this.onChangeCallback()},get z(){return this._z},set z(e){this._z=e,this.onChangeCallback()},get order(){return this._order},set order(e){this._order=e,this.onChangeCallback()},set:function(e,t,r,n){return this._x=e,this._y=t,this._z=r,this._order=n||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this.onChangeCallback(),this},setFromRotationMatrix:function(e,t,r){var i=n.Math.clamp,o=e.elements,a=o[0],s=o[4],c=o[8],l=o[1],u=o[5],h=o[9],p=o[2],d=o[6],f=o[10];return t=t||this._order,"XYZ"===t?(this._y=Math.asin(i(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-s,a)):(this._x=Math.atan2(d,u),this._z=0)):"YXZ"===t?(this._x=Math.asin(-i(h,-1,1)),Math.abs(h)<.99999?(this._y=Math.atan2(c,f),this._z=Math.atan2(l,u)):(this._y=Math.atan2(-p,a),this._z=0)):"ZXY"===t?(this._x=Math.asin(i(d,-1,1)),Math.abs(d)<.99999?(this._y=Math.atan2(-p,f),this._z=Math.atan2(-s,u)):(this._y=0,this._z=Math.atan2(l,a))):"ZYX"===t?(this._y=Math.asin(-i(p,-1,1)),Math.abs(p)<.99999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,a)):(this._x=0,this._z=Math.atan2(-s,u))):"YZX"===t?(this._z=Math.asin(i(l,-1,1)),Math.abs(l)<.99999?(this._x=Math.atan2(-h,u),this._y=Math.atan2(-p,a)):(this._x=0,this._y=Math.atan2(c,f))):"XZY"===t?(this._z=Math.asin(-i(s,-1,1)),Math.abs(s)<.99999?(this._x=Math.atan2(d,u),this._y=Math.atan2(c,a)):(this._x=Math.atan2(-h,f),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+t),this._order=t,r!==!1&&this.onChangeCallback(),this},setFromQuaternion:function(){var e;return function(t,r,i){return void 0===e&&(e=new n.Matrix4),e.makeRotationFromQuaternion(t),this.setFromRotationMatrix(e,r,i)}}(),setFromVector3:function(e,t){return this.set(e.x,e.y,e.z,t||this._order)},reorder:function(){var e=new n.Quaternion;return function(t){return e.setFromEuler(this),this.setFromQuaternion(e,t)}}(),equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this.onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e},toVector3:function(e){return e?e.set(this._x,this._y,this._z):new n.Vector3(this._x,this._y,this._z)},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}},n.Line3=function(e,t){this.start=void 0!==e?e:new n.Vector3,this.end=void 0!==t?t:new n.Vector3},n.Line3.prototype={constructor:n.Line3,set:function(e,t){return this.start.copy(e),this.end.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.start.copy(e.start),this.end.copy(e.end),this},center:function(e){var t=e||new n.Vector3;return t.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){var t=e||new n.Vector3;return t.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,t){var r=t||new n.Vector3;return this.delta(r).multiplyScalar(e).add(this.start)},closestPointToPointParameter:function(){var e=new n.Vector3,t=new n.Vector3;return function(r,i){e.subVectors(r,this.start),t.subVectors(this.end,this.start);var o=t.dot(t),a=t.dot(e),s=a/o;return i&&(s=n.Math.clamp(s,0,1)),s}}(),closestPointToPoint:function(e,t,r){var i=this.closestPointToPointParameter(e,t),o=r||new n.Vector3;return this.delta(o).multiplyScalar(i).add(this.start)},applyMatrix4:function(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)}},n.Box2=function(e,t){this.min=void 0!==e?e:new n.Vector2((+(1/0)),(+(1/0))),this.max=void 0!==t?t:new n.Vector2((-(1/0)),(-(1/0)))},n.Box2.prototype={constructor:n.Box2,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,r=e.length;t<r;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new n.Vector2;return function(t,r){var n=e.copy(r).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=+(1/0),this.max.x=this.max.y=-(1/0),this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(e){var t=e||new n.Vector2;return t.addVectors(this.min,this.max).multiplyScalar(.5)},size:function(e){var t=e||new n.Vector2;return t.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y},getParameter:function(e,t){var r=t||new n.Vector2;return r.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)},clampPoint:function(e,t){var r=t||new n.Vector2;return r.copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new n.Vector2;return function(t){var r=e.copy(t).clamp(this.min,this.max);return r.sub(t).length()}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}},n.Box3=function(e,t){this.min=void 0!==e?e:new n.Vector3((+(1/0)),(+(1/0)),(+(1/0))),this.max=void 0!==t?t:new n.Vector3((-(1/0)),(-(1/0)),(-(1/0)))},n.Box3.prototype={constructor:n.Box3,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromArray:function(e){for(var t=+(1/0),r=+(1/0),n=+(1/0),i=-(1/0),o=-(1/0),a=-(1/0),s=0,c=e.length;s<c;s+=3){var l=e[s],u=e[s+1],h=e[s+2];l<t&&(t=l),u<r&&(r=u),h<n&&(n=h),l>i&&(i=l),u>o&&(o=u),h>a&&(a=h)}this.min.set(t,r,n),this.max.set(i,o,a)},setFromPoints:function(e){this.makeEmpty();for(var t=0,r=e.length;t<r;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new n.Vector3;return function(t,r){var n=e.copy(r).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}}(),setFromObject:function(){var e=new n.Vector3;return function(t){var r=this;return t.updateMatrixWorld(!0),this.makeEmpty(),t.traverse(function(t){var i=t.geometry;if(void 0!==i)if(i instanceof n.Geometry)for(var o=i.vertices,a=0,s=o.length;a<s;a++)e.copy(o[a]),
e.applyMatrix4(t.matrixWorld),r.expandByPoint(e);else if(i instanceof n.BufferGeometry){var c=i.attributes.position;if(void 0!==c){var l,u,h;c instanceof n.InterleavedBufferAttribute?(l=c.data.array,u=c.offset,h=c.data.stride):(l=c.array,u=0,h=3);for(var a=u,s=l.length;a<s;a+=h)e.fromArray(l,a),e.applyMatrix4(t.matrixWorld),r.expandByPoint(e)}}}),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=+(1/0),this.max.x=this.max.y=this.max.z=-(1/0),this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(e){var t=e||new n.Vector3;return t.addVectors(this.min,this.max).multiplyScalar(.5)},size:function(e){var t=e||new n.Vector3;return t.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z},getParameter:function(e,t){var r=t||new n.Vector3;return r.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)},intersectsSphere:function(){var e;return function(t){return void 0===e&&(e=new n.Vector3),this.clampPoint(t.center,e),e.distanceToSquared(t.center)<=t.radius*t.radius}}(),intersectsPlane:function(e){var t,r;return e.normal.x>0?(t=e.normal.x*this.min.x,r=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,r=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,r+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,r+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,r+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,r+=e.normal.z*this.min.z),t<=e.constant&&r>=e.constant},clampPoint:function(e,t){var r=t||new n.Vector3;return r.copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new n.Vector3;return function(t){var r=e.copy(t).clamp(this.min,this.max);return r.sub(t).length()}}(),getBoundingSphere:function(){var e=new n.Vector3;return function(t){var r=t||new n.Sphere;return r.center=this.center(),r.radius=.5*this.size(e).length(),r}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},applyMatrix4:function(){var e=[new n.Vector3,new n.Vector3,new n.Vector3,new n.Vector3,new n.Vector3,new n.Vector3,new n.Vector3,new n.Vector3];return function(t){return this.isEmpty()?this:(e[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),e[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),e[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),e[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),e[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),e[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),e[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),e[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(e),this)}}(),translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}},n.Matrix3=function(){this.elements=new Float32Array([1,0,0,0,1,0,0,0,1]),arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")},n.Matrix3.prototype={constructor:n.Matrix3,set:function(e,t,r,n,i,o,a,s,c){var l=this.elements;return l[0]=e,l[1]=n,l[2]=a,l[3]=t,l[4]=i,l[5]=s,l[6]=r,l[7]=o,l[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(e){var t=e.elements;return this.set(t[0],t[3],t[6],t[1],t[4],t[7],t[2],t[5],t[8]),this},setFromMatrix4:function(e){var t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this},applyToVector3Array:function(){var e;return function(t,r,i){void 0===e&&(e=new n.Vector3),void 0===r&&(r=0),void 0===i&&(i=t.length);for(var o=0,a=r;o<i;o+=3,a+=3)e.fromArray(t,a),e.applyMatrix3(this),e.toArray(t,a);return t}}(),applyToBuffer:function(){var e;return function(t,r,i){void 0===e&&(e=new n.Vector3),void 0===r&&(r=0),void 0===i&&(i=t.length/t.itemSize);for(var o=0,a=r;o<i;o++,a++)e.x=t.getX(a),e.y=t.getY(a),e.z=t.getZ(a),e.applyMatrix3(this),t.setXYZ(e.x,e.y,e.z);return t}}(),multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this},determinant:function(){var e=this.elements,t=e[0],r=e[1],n=e[2],i=e[3],o=e[4],a=e[5],s=e[6],c=e[7],l=e[8];return t*o*l-t*a*c-r*i*l+r*a*s+n*i*c-n*o*s},getInverse:function(e,t){e instanceof n.Matrix4&&console.error("THREE.Matrix3.getInverse no longer takes a Matrix4 argument.");var r=e.elements,i=this.elements,o=r[0],a=r[1],s=r[2],c=r[3],l=r[4],u=r[5],h=r[6],p=r[7],d=r[8],f=d*l-u*p,m=u*h-d*c,v=p*c-l*h,g=o*f+a*m+s*v;if(0===g){var y="THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";if(t)throw new Error(y);return console.warn(y),this.identity()}var x=1/g;return i[0]=f*x,i[1]=(s*p-d*a)*x,i[2]=(u*a-s*l)*x,i[3]=m*x,i[4]=(d*o-s*h)*x,i[5]=(s*c-u*o)*x,i[6]=v*x,i[7]=(a*h-p*o)*x,i[8]=(l*o-a*c)*x,this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this},flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead."),this.toArray(e,t)},getNormalMatrix:function(e){return this.setFromMatrix4(e).getInverse(this).transpose()},transposeIntoArray:function(e){var t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this},fromArray:function(e){return this.elements.set(e),this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var r=this.elements;return e[t]=r[0],e[t+1]=r[1],e[t+2]=r[2],e[t+3]=r[3],e[t+4]=r[4],e[t+5]=r[5],e[t+6]=r[6],e[t+7]=r[7],e[t+8]=r[8],e}},n.Matrix4=function(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")},n.Matrix4.prototype={constructor:n.Matrix4,set:function(e,t,r,n,i,o,a,s,c,l,u,h,p,d,f,m){var v=this.elements;return v[0]=e,v[4]=t,v[8]=r,v[12]=n,v[1]=i,v[5]=o,v[9]=a,v[13]=s,v[2]=c,v[6]=l,v[10]=u,v[14]=h,v[3]=p,v[7]=d,v[11]=f,v[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new n.Matrix4).fromArray(this.elements)},copy:function(e){return this.elements.set(e.elements),this},copyPosition:function(e){var t=this.elements,r=e.elements;return t[12]=r[12],t[13]=r[13],t[14]=r[14],this},extractBasis:function(e,t,r){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),r.setFromMatrixColumn(this,2),this},makeBasis:function(e,t,r){return this.set(e.x,t.x,r.x,0,e.y,t.y,r.y,0,e.z,t.z,r.z,0,0,0,0,1),this},extractRotation:function(){var e;return function(t){void 0===e&&(e=new n.Vector3);var r=this.elements,i=t.elements,o=1/e.setFromMatrixColumn(t,0).length(),a=1/e.setFromMatrixColumn(t,1).length(),s=1/e.setFromMatrixColumn(t,2).length();return r[0]=i[0]*o,r[1]=i[1]*o,r[2]=i[2]*o,r[4]=i[4]*a,r[5]=i[5]*a,r[6]=i[6]*a,r[8]=i[8]*s,r[9]=i[9]*s,r[10]=i[10]*s,this}}(),makeRotationFromEuler:function(e){e instanceof n.Euler==!1&&console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var t=this.elements,r=e.x,i=e.y,o=e.z,a=Math.cos(r),s=Math.sin(r),c=Math.cos(i),l=Math.sin(i),u=Math.cos(o),h=Math.sin(o);if("XYZ"===e.order){var p=a*u,d=a*h,f=s*u,m=s*h;t[0]=c*u,t[4]=-c*h,t[8]=l,t[1]=d+f*l,t[5]=p-m*l,t[9]=-s*c,t[2]=m-p*l,t[6]=f+d*l,t[10]=a*c}else if("YXZ"===e.order){var v=c*u,g=c*h,y=l*u,x=l*h;t[0]=v+x*s,t[4]=y*s-g,t[8]=a*l,t[1]=a*h,t[5]=a*u,t[9]=-s,t[2]=g*s-y,t[6]=x+v*s,t[10]=a*c}else if("ZXY"===e.order){var v=c*u,g=c*h,y=l*u,x=l*h;t[0]=v-x*s,t[4]=-a*h,t[8]=y+g*s,t[1]=g+y*s,t[5]=a*u,t[9]=x-v*s,t[2]=-a*l,t[6]=s,t[10]=a*c}else if("ZYX"===e.order){var p=a*u,d=a*h,f=s*u,m=s*h;t[0]=c*u,t[4]=f*l-d,t[8]=p*l+m,t[1]=c*h,t[5]=m*l+p,t[9]=d*l-f,t[2]=-l,t[6]=s*c,t[10]=a*c}else if("YZX"===e.order){var b=a*c,w=a*l,_=s*c,M=s*l;t[0]=c*u,t[4]=M-b*h,t[8]=_*h+w,t[1]=h,t[5]=a*u,t[9]=-s*u,t[2]=-l*u,t[6]=w*h+_,t[10]=b-M*h}else if("XZY"===e.order){var b=a*c,w=a*l,_=s*c,M=s*l;t[0]=c*u,t[4]=-h,t[8]=l*u,t[1]=b*h+M,t[5]=a*u,t[9]=w*h-_,t[2]=_*h-w,t[6]=s*u,t[10]=M*h+b}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromQuaternion:function(e){var t=this.elements,r=e.x,n=e.y,i=e.z,o=e.w,a=r+r,s=n+n,c=i+i,l=r*a,u=r*s,h=r*c,p=n*s,d=n*c,f=i*c,m=o*a,v=o*s,g=o*c;return t[0]=1-(p+f),t[4]=u-g,t[8]=h+v,t[1]=u+g,t[5]=1-(l+f),t[9]=d-m,t[2]=h-v,t[6]=d+m,t[10]=1-(l+p),t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},lookAt:function(){var e,t,r;return function(i,o,a){void 0===e&&(e=new n.Vector3,t=new n.Vector3,r=new n.Vector3);var s=this.elements;return r.subVectors(i,o).normalize(),0===r.lengthSq()&&(r.z=1),e.crossVectors(a,r).normalize(),0===e.lengthSq()&&(r.z+=1e-4,e.crossVectors(a,r).normalize()),t.crossVectors(r,e),s[0]=e.x,s[4]=t.x,s[8]=r.x,s[1]=e.y,s[5]=t.y,s[9]=r.y,s[2]=e.z,s[6]=t.z,s[10]=r.z,this}}(),multiply:function(e,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var r=e.elements,n=t.elements,i=this.elements,o=r[0],a=r[4],s=r[8],c=r[12],l=r[1],u=r[5],h=r[9],p=r[13],d=r[2],f=r[6],m=r[10],v=r[14],g=r[3],y=r[7],x=r[11],b=r[15],w=n[0],_=n[4],M=n[8],S=n[12],T=n[1],E=n[5],A=n[9],C=n[13],L=n[2],P=n[6],R=n[10],D=n[14],I=n[3],B=n[7],O=n[11],F=n[15];return i[0]=o*w+a*T+s*L+c*I,i[4]=o*_+a*E+s*P+c*B,i[8]=o*M+a*A+s*R+c*O,i[12]=o*S+a*C+s*D+c*F,i[1]=l*w+u*T+h*L+p*I,i[5]=l*_+u*E+h*P+p*B,i[9]=l*M+u*A+h*R+p*O,i[13]=l*S+u*C+h*D+p*F,i[2]=d*w+f*T+m*L+v*I,i[6]=d*_+f*E+m*P+v*B,i[10]=d*M+f*A+m*R+v*O,i[14]=d*S+f*C+m*D+v*F,i[3]=g*w+y*T+x*L+b*I,i[7]=g*_+y*E+x*P+b*B,i[11]=g*M+y*A+x*R+b*O,i[15]=g*S+y*C+x*D+b*F,this},multiplyToArray:function(e,t,r){var n=this.elements;return this.multiplyMatrices(e,t),r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r[4]=n[4],r[5]=n[5],r[6]=n[6],r[7]=n[7],r[8]=n[8],r[9]=n[9],r[10]=n[10],r[11]=n[11],r[12]=n[12],r[13]=n[13],r[14]=n[14],r[15]=n[15],this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this},applyToVector3Array:function(){var e;return function(t,r,i){void 0===e&&(e=new n.Vector3),void 0===r&&(r=0),void 0===i&&(i=t.length);for(var o=0,a=r;o<i;o+=3,a+=3)e.fromArray(t,a),e.applyMatrix4(this),e.toArray(t,a);return t}}(),applyToBuffer:function(){var e;return function(t,r,i){void 0===e&&(e=new n.Vector3),void 0===r&&(r=0),void 0===i&&(i=t.length/t.itemSize);for(var o=0,a=r;o<i;o++,a++)e.x=t.getX(a),e.y=t.getY(a),e.z=t.getZ(a),e.applyMatrix4(this),t.setXYZ(e.x,e.y,e.z);return t}}(),determinant:function(){var e=this.elements,t=e[0],r=e[4],n=e[8],i=e[12],o=e[1],a=e[5],s=e[9],c=e[13],l=e[2],u=e[6],h=e[10],p=e[14],d=e[3],f=e[7],m=e[11],v=e[15];return d*(+i*s*u-n*c*u-i*a*h+r*c*h+n*a*p-r*s*p)+f*(+t*s*p-t*c*h+i*o*h-n*o*p+n*c*l-i*s*l)+m*(+t*c*u-t*a*p-i*o*u+r*o*p+i*a*l-r*c*l)+v*(-n*a*l-t*s*u+t*a*h+n*o*u-r*o*h+r*s*l)},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this},flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead."),this.toArray(e,t)},getPosition:function(){var e;return function(){return void 0===e&&(e=new n.Vector3),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),e.setFromMatrixColumn(this,3)}}(),setPosition:function(e){var t=this.elements;return t[12]=e.x,t[13]=e.y,t[14]=e.z,this},getInverse:function(e,t){var r=this.elements,n=e.elements,i=n[0],o=n[1],a=n[2],s=n[3],c=n[4],l=n[5],u=n[6],h=n[7],p=n[8],d=n[9],f=n[10],m=n[11],v=n[12],g=n[13],y=n[14],x=n[15],b=d*y*h-g*f*h+g*u*m-l*y*m-d*u*x+l*f*x,w=v*f*h-p*y*h-v*u*m+c*y*m+p*u*x-c*f*x,_=p*g*h-v*d*h+v*l*m-c*g*m-p*l*x+c*d*x,M=v*d*u-p*g*u-v*l*f+c*g*f+p*l*y-c*d*y,S=i*b+o*w+a*_+s*M;if(0===S){var T="THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";if(t)throw new Error(T);return console.warn(T),this.identity()}var E=1/S;return r[0]=b*E,r[1]=(g*f*s-d*y*s-g*a*m+o*y*m+d*a*x-o*f*x)*E,r[2]=(l*y*s-g*u*s+g*a*h-o*y*h-l*a*x+o*u*x)*E,r[3]=(d*u*s-l*f*s-d*a*h+o*f*h+l*a*m-o*u*m)*E,r[4]=w*E,r[5]=(p*y*s-v*f*s+v*a*m-i*y*m-p*a*x+i*f*x)*E,r[6]=(v*u*s-c*y*s-v*a*h+i*y*h+c*a*x-i*u*x)*E,r[7]=(c*f*s-p*u*s+p*a*h-i*f*h-c*a*m+i*u*m)*E,r[8]=_*E,r[9]=(v*d*s-p*g*s-v*o*m+i*g*m+p*o*x-i*d*x)*E,r[10]=(c*g*s-v*l*s+v*o*h-i*g*h-c*o*x+i*l*x)*E,r[11]=(p*l*s-c*d*s-p*o*h+i*d*h+c*o*m-i*l*m)*E,r[12]=M*E,r[13]=(p*g*a-v*d*a+v*o*f-i*g*f-p*o*y+i*d*y)*E,r[14]=(v*l*a-c*g*a-v*o*u+i*g*u+c*o*y-i*l*y)*E,r[15]=(c*d*a-p*l*a+p*o*u-i*d*u-c*o*f+i*l*f)*E,this},scale:function(e){var t=this.elements,r=e.x,n=e.y,i=e.z;return t[0]*=r,t[4]*=n,t[8]*=i,t[1]*=r,t[5]*=n,t[9]*=i,t[2]*=r,t[6]*=n,t[10]*=i,t[3]*=r,t[7]*=n,t[11]*=i,this},getMaxScaleOnAxis:function(){var e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],r=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],n=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,r,n))},makeTranslation:function(e,t,r){return this.set(1,0,0,e,0,1,0,t,0,0,1,r,0,0,0,1),this},makeRotationX:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(1,0,0,0,0,t,-r,0,0,r,t,0,0,0,0,1),this},makeRotationY:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(t,0,r,0,0,1,0,0,-r,0,t,0,0,0,0,1),this},makeRotationZ:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(t,-r,0,0,r,t,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(e,t){var r=Math.cos(t),n=Math.sin(t),i=1-r,o=e.x,a=e.y,s=e.z,c=i*o,l=i*a;return this.set(c*o+r,c*a-n*s,c*s+n*a,0,c*a+n*s,l*a+r,l*s-n*o,0,c*s-n*a,l*s+n*o,i*s*s+r,0,0,0,0,1),this},makeScale:function(e,t,r){return this.set(e,0,0,0,0,t,0,0,0,0,r,0,0,0,0,1),this},compose:function(e,t,r){return this.makeRotationFromQuaternion(t),this.scale(r),this.setPosition(e),this},decompose:function(){var e,t;return function(r,i,o){void 0===e&&(e=new n.Vector3,t=new n.Matrix4);var a=this.elements,s=e.set(a[0],a[1],a[2]).length(),c=e.set(a[4],a[5],a[6]).length(),l=e.set(a[8],a[9],a[10]).length(),u=this.determinant();u<0&&(s=-s),r.x=a[12],r.y=a[13],r.z=a[14],t.elements.set(this.elements);var h=1/s,p=1/c,d=1/l;return t.elements[0]*=h,t.elements[1]*=h,t.elements[2]*=h,t.elements[4]*=p,t.elements[5]*=p,t.elements[6]*=p,t.elements[8]*=d,t.elements[9]*=d,t.elements[10]*=d,i.setFromRotationMatrix(t),o.x=s,o.y=c,o.z=l,this}}(),makeFrustum:function(e,t,r,n,i,o){var a=this.elements,s=2*i/(t-e),c=2*i/(n-r),l=(t+e)/(t-e),u=(n+r)/(n-r),h=-(o+i)/(o-i),p=-2*o*i/(o-i);return a[0]=s,a[4]=0,a[8]=l,a[12]=0,a[1]=0,a[5]=c,a[9]=u,a[13]=0,a[2]=0,a[6]=0,a[10]=h,a[14]=p,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this},makePerspective:function(e,t,r,i){var o=r*Math.tan(n.Math.DEG2RAD*e*.5),a=-o,s=a*t,c=o*t;return this.makeFrustum(s,c,a,o,r,i)},makeOrthographic:function(e,t,r,n,i,o){var a=this.elements,s=1/(t-e),c=1/(r-n),l=1/(o-i),u=(t+e)*s,h=(r+n)*c,p=(o+i)*l;return a[0]=2*s,a[4]=0,a[8]=0,a[12]=-u,a[1]=0,a[5]=2*c,a[9]=0,a[13]=-h,a[2]=0,a[6]=0,a[10]=-2*l,a[14]=-p,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this},equals:function(e){for(var t=this.elements,r=e.elements,n=0;n<16;n++)if(t[n]!==r[n])return!1;return!0},fromArray:function(e){return this.elements.set(e),this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var r=this.elements;return e[t]=r[0],e[t+1]=r[1],e[t+2]=r[2],e[t+3]=r[3],e[t+4]=r[4],e[t+5]=r[5],e[t+6]=r[6],e[t+7]=r[7],e[t+8]=r[8],e[t+9]=r[9],e[t+10]=r[10],e[t+11]=r[11],e[t+12]=r[12],e[t+13]=r[13],e[t+14]=r[14],e[t+15]=r[15],e}},n.Ray=function(e,t){this.origin=void 0!==e?e:new n.Vector3,this.direction=void 0!==t?t:new n.Vector3},n.Ray.prototype={constructor:n.Ray,set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){var r=t||new n.Vector3;return r.copy(this.direction).multiplyScalar(e).add(this.origin)},lookAt:function(e){return this.direction.copy(e).sub(this.origin).normalize(),this},recast:function(){var e=new n.Vector3;return function(t){return this.origin.copy(this.at(t,e)),this}}(),closestPointToPoint:function(e,t){var r=t||new n.Vector3;r.subVectors(e,this.origin);var i=r.dot(this.direction);return i<0?r.copy(this.origin):r.copy(this.direction).multiplyScalar(i).add(this.origin)},distanceToPoint:function(e){return Math.sqrt(this.distanceSqToPoint(e))},distanceSqToPoint:function(){var e=new n.Vector3;return function(t){var r=e.subVectors(t,this.origin).dot(this.direction);return r<0?this.origin.distanceToSquared(t):(e.copy(this.direction).multiplyScalar(r).add(this.origin),e.distanceToSquared(t))}}(),distanceSqToSegment:function(){var e=new n.Vector3,t=new n.Vector3,r=new n.Vector3;return function(n,i,o,a){e.copy(n).add(i).multiplyScalar(.5),t.copy(i).sub(n).normalize(),r.copy(this.origin).sub(e);var s,c,l,u,h=.5*n.distanceTo(i),p=-this.direction.dot(t),d=r.dot(this.direction),f=-r.dot(t),m=r.lengthSq(),v=Math.abs(1-p*p);if(v>0)if(s=p*f-d,c=p*d-f,u=h*v,s>=0)if(c>=-u)if(c<=u){var g=1/v;s*=g,c*=g,l=s*(s+p*c+2*d)+c*(p*s+c+2*f)+m}else c=h,s=Math.max(0,-(p*c+d)),l=-s*s+c*(c+2*f)+m;else c=-h,s=Math.max(0,-(p*c+d)),l=-s*s+c*(c+2*f)+m;else c<=-u?(s=Math.max(0,-(-p*h+d)),c=s>0?-h:Math.min(Math.max(-h,-f),h),l=-s*s+c*(c+2*f)+m):c<=u?(s=0,c=Math.min(Math.max(-h,-f),h),l=c*(c+2*f)+m):(s=Math.max(0,-(p*h+d)),c=s>0?h:Math.min(Math.max(-h,-f),h),l=-s*s+c*(c+2*f)+m);else c=p>0?-h:h,s=Math.max(0,-(p*c+d)),l=-s*s+c*(c+2*f)+m;return o&&o.copy(this.direction).multiplyScalar(s).add(this.origin),a&&a.copy(t).multiplyScalar(c).add(e),l}}(),intersectSphere:function(){var e=new n.Vector3;return function(t,r){e.subVectors(t.center,this.origin);var n=e.dot(this.direction),i=e.dot(e)-n*n,o=t.radius*t.radius;if(i>o)return null;var a=Math.sqrt(o-i),s=n-a,c=n+a;return s<0&&c<0?null:s<0?this.at(c,r):this.at(s,r)}}(),intersectsSphere:function(e){return this.distanceToPoint(e.center)<=e.radius},distanceToPlane:function(e){var t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;var r=-(this.origin.dot(e.normal)+e.constant)/t;return r>=0?r:null},intersectPlane:function(e,t){var r=this.distanceToPlane(e);return null===r?null:this.at(r,t)},intersectsPlane:function(e){var t=e.distanceToPoint(this.origin);if(0===t)return!0;var r=e.normal.dot(this.direction);return r*t<0},intersectBox:function(e,t){var r,n,i,o,a,s,c=1/this.direction.x,l=1/this.direction.y,u=1/this.direction.z,h=this.origin;return c>=0?(r=(e.min.x-h.x)*c,n=(e.max.x-h.x)*c):(r=(e.max.x-h.x)*c,n=(e.min.x-h.x)*c),l>=0?(i=(e.min.y-h.y)*l,o=(e.max.y-h.y)*l):(i=(e.max.y-h.y)*l,o=(e.min.y-h.y)*l),r>o||i>n?null:((i>r||r!==r)&&(r=i),(o<n||n!==n)&&(n=o),u>=0?(a=(e.min.z-h.z)*u,s=(e.max.z-h.z)*u):(a=(e.max.z-h.z)*u,s=(e.min.z-h.z)*u),r>s||a>n?null:((a>r||r!==r)&&(r=a),(s<n||n!==n)&&(n=s),n<0?null:this.at(r>=0?r:n,t)))},intersectsBox:function(){var e=new n.Vector3;return function(t){return null!==this.intersectBox(t,e)}}(),intersectTriangle:function(){var e=new n.Vector3,t=new n.Vector3,r=new n.Vector3,i=new n.Vector3;return function(n,o,a,s,c){t.subVectors(o,n),r.subVectors(a,n),i.crossVectors(t,r);var l,u=this.direction.dot(i);if(u>0){if(s)return null;l=1}else{if(!(u<0))return null;l=-1,u=-u}e.subVectors(this.origin,n);var h=l*this.direction.dot(r.crossVectors(e,r));if(h<0)return null;var p=l*this.direction.dot(t.cross(e));if(p<0)return null;if(h+p>u)return null;var d=-l*e.dot(i);return d<0?null:this.at(d/u,c)}}(),applyMatrix4:function(e){return this.direction.add(this.origin).applyMatrix4(e),this.origin.applyMatrix4(e),this.direction.sub(this.origin),this.direction.normalize(),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}},n.Sphere=function(e,t){this.center=void 0!==e?e:new n.Vector3,this.radius=void 0!==t?t:0},n.Sphere.prototype={constructor:n.Sphere,set:function(e,t){return this.center.copy(e),this.radius=t,this},setFromPoints:function(){var e=new n.Box3;return function(t,r){var n=this.center;void 0!==r?n.copy(r):e.setFromPoints(t).center(n);for(var i=0,o=0,a=t.length;o<a;o++)i=Math.max(i,n.distanceToSquared(t[o]));return this.radius=Math.sqrt(i),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t},intersectsBox:function(e){return e.intersectsSphere(this)},intersectsPlane:function(e){return Math.abs(this.center.dot(e.normal)-e.constant)<=this.radius},clampPoint:function(e,t){var r=this.center.distanceToSquared(e),i=t||new n.Vector3;return i.copy(e),r>this.radius*this.radius&&(i.sub(this.center).normalize(),i.multiplyScalar(this.radius).add(this.center)),i},getBoundingBox:function(e){var t=e||new n.Box3;return t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius}},n.Frustum=function(e,t,r,i,o,a){this.planes=[void 0!==e?e:new n.Plane,void 0!==t?t:new n.Plane,void 0!==r?r:new n.Plane,void 0!==i?i:new n.Plane,void 0!==o?o:new n.Plane,void 0!==a?a:new n.Plane]},n.Frustum.prototype={constructor:n.Frustum,set:function(e,t,r,n,i,o){var a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(r),a[3].copy(n),a[4].copy(i),a[5].copy(o),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var t=this.planes,r=0;r<6;r++)t[r].copy(e.planes[r]);return this},setFromMatrix:function(e){var t=this.planes,r=e.elements,n=r[0],i=r[1],o=r[2],a=r[3],s=r[4],c=r[5],l=r[6],u=r[7],h=r[8],p=r[9],d=r[10],f=r[11],m=r[12],v=r[13],g=r[14],y=r[15];return t[0].setComponents(a-n,u-s,f-h,y-m).normalize(),t[1].setComponents(a+n,u+s,f+h,y+m).normalize(),t[2].setComponents(a+i,u+c,f+p,y+v).normalize(),t[3].setComponents(a-i,u-c,f-p,y-v).normalize(),t[4].setComponents(a-o,u-l,f-d,y-g).normalize(),t[5].setComponents(a+o,u+l,f+d,y+g).normalize(),this},intersectsObject:function(){var e=new n.Sphere;return function(t){var r=t.geometry;return null===r.boundingSphere&&r.computeBoundingSphere(),e.copy(r.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}}(),intersectsSprite:function(){var e=new n.Sphere;return function(t){return e.center.set(0,0,0),e.radius=.7071067811865476,e.applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}}(),intersectsSphere:function(e){for(var t=this.planes,r=e.center,n=-e.radius,i=0;i<6;i++){var o=t[i].distanceToPoint(r);if(o<n)return!1}return!0},intersectsBox:function(){var e=new n.Vector3,t=new n.Vector3;return function(r){for(var n=this.planes,i=0;i<6;i++){var o=n[i];e.x=o.normal.x>0?r.min.x:r.max.x,t.x=o.normal.x>0?r.max.x:r.min.x,e.y=o.normal.y>0?r.min.y:r.max.y,t.y=o.normal.y>0?r.max.y:r.min.y,e.z=o.normal.z>0?r.min.z:r.max.z,t.z=o.normal.z>0?r.max.z:r.min.z;var a=o.distanceToPoint(e),s=o.distanceToPoint(t);if(a<0&&s<0)return!1}return!0}}(),containsPoint:function(e){for(var t=this.planes,r=0;r<6;r++)if(t[r].distanceToPoint(e)<0)return!1;return!0}},n.Plane=function(e,t){this.normal=void 0!==e?e:new n.Vector3(1,0,0),this.constant=void 0!==t?t:0},n.Plane.prototype={constructor:n.Plane,set:function(e,t){return this.normal.copy(e),this.constant=t,this},setComponents:function(e,t,r,n){return this.normal.set(e,t,r),this.constant=n,this},setFromNormalAndCoplanarPoint:function(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this},setFromCoplanarPoints:function(){var e=new n.Vector3,t=new n.Vector3;return function(r,n,i){var o=e.subVectors(i,n).cross(t.subVectors(r,n)).normalize();return this.setFromNormalAndCoplanarPoint(o,r),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.normal.copy(e.normal),this.constant=e.constant,this},normalize:function(){var e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(e){return this.normal.dot(e)+this.constant},distanceToSphere:function(e){return this.distanceToPoint(e.center)-e.radius},projectPoint:function(e,t){return this.orthoPoint(e,t).sub(e).negate()},orthoPoint:function(e,t){var r=this.distanceToPoint(e),i=t||new n.Vector3;return i.copy(this.normal).multiplyScalar(r)},intersectLine:function(){var e=new n.Vector3;return function(t,r){var i=r||new n.Vector3,o=t.delta(e),a=this.normal.dot(o);if(0!==a){var s=-(t.start.dot(this.normal)+this.constant)/a;if(!(s<0||s>1))return i.copy(o).multiplyScalar(s).add(t.start)}else if(0===this.distanceToPoint(t.start))return i.copy(t.start)}}(),intersectsLine:function(e){var t=this.distanceToPoint(e.start),r=this.distanceToPoint(e.end);return t<0&&r>0||r<0&&t>0},intersectsBox:function(e){return e.intersectsPlane(this)},intersectsSphere:function(e){return e.intersectsPlane(this)},coplanarPoint:function(e){var t=e||new n.Vector3;return t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var e=new n.Vector3,t=new n.Matrix3;return function(r,n){var i=this.coplanarPoint(e).applyMatrix4(r),o=n||t.getNormalMatrix(r),a=this.normal.applyMatrix3(o).normalize();return this.constant=-i.dot(a),this}}(),translate:function(e){return this.constant=this.constant-e.dot(this.normal),this},equals:function(e){return e.normal.equals(this.normal)&&e.constant===this.constant}},n.Spherical=function(e,t,r){return this.radius=void 0!==e?e:1,this.phi=void 0!==t?t:0,this.theta=void 0!==r?r:0,this},n.Spherical.prototype={constructor:n.Spherical,set:function(e,t,r){return this.radius=e,this.phi=t,this.theta=r,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius.copy(e.radius),this.phi.copy(e.phi),this.theta.copy(e.theta),this},makeSafe:function(){var e=1e-6;return this.phi=Math.max(e,Math.min(Math.PI-e,this.phi)),this},setFromVector3:function(e){return this.radius=e.length(),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e.x,e.z),this.phi=Math.acos(n.Math.clamp(e.y/this.radius,-1,1))),this}},n.Math={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var e,t="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),r=new Array(36),n=0;return function(){for(var i=0;i<36;i++)8===i||13===i||18===i||23===i?r[i]="-":14===i?r[i]="4":(n<=2&&(n=33554432+16777216*Math.random()|0),e=15&n,n>>=4,r[i]=t[19===i?3&e|8:e]);return r.join("")}}(),clamp:function(e,t,r){return Math.max(t,Math.min(r,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,r,n,i){return n+(e-t)*(i-n)/(r-t)},smoothstep:function(e,t,r){return e<=t?0:e>=r?1:(e=(e-t)/(r-t),e*e*(3-2*e))},smootherstep:function(e,t,r){return e<=t?0:e>=r?1:(e=(e-t)/(r-t),e*e*e*(e*(6*e-15)+10))},random16:function(){return console.warn("THREE.Math.random16() has been deprecated. Use Math.random() instead."),Math.random()},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},degToRad:function(e){return e*n.Math.DEG2RAD},radToDeg:function(e){return e*n.Math.RAD2DEG},isPowerOfTwo:function(e){return 0===(e&e-1)&&0!==e},nearestPowerOfTwo:function(e){return Math.pow(2,Math.round(Math.log(e)/Math.LN2))},nextPowerOfTwo:function(e){return e--,e|=e>>1,e|=e>>2,e|=e>>4,e|=e>>8,e|=e>>16,e++,e}},n.Spline=function(e){function t(e,t,r,n,i,o,a){var s=.5*(r-e),c=.5*(n-t);return(2*(t-r)+s+c)*a+(-3*(t-r)-2*s-c)*o+s*i+t}this.points=e;var r,i,o,a,s,c,l,u,h,p=[],d={x:0,y:0,z:0};this.initFromArray=function(e){this.points=[];for(var t=0;t<e.length;t++)this.points[t]={x:e[t][0],y:e[t][1],z:e[t][2]}},this.getPoint=function(e){return r=(this.points.length-1)*e,i=Math.floor(r),o=r-i,p[0]=0===i?i:i-1,p[1]=i,p[2]=i>this.points.length-2?this.points.length-1:i+1,p[3]=i>this.points.length-3?this.points.length-1:i+2,c=this.points[p[0]],l=this.points[p[1]],u=this.points[p[2]],h=this.points[p[3]],a=o*o,s=o*a,d.x=t(c.x,l.x,u.x,h.x,o,a,s),d.y=t(c.y,l.y,u.y,h.y,o,a,s),d.z=t(c.z,l.z,u.z,h.z,o,a,s),d},this.getControlPointsArray=function(){var e,t,r=this.points.length,n=[];for(e=0;e<r;e++)t=this.points[e],n[e]=[t.x,t.y,t.z];return n},this.getLength=function(e){var t,r,i,o,a=0,s=0,c=0,l=new n.Vector3,u=new n.Vector3,h=[],p=0;for(h[0]=0,e||(e=100),i=this.points.length*e,l.copy(this.points[0]),t=1;t<i;t++)r=t/i,o=this.getPoint(r),u.copy(o),p+=u.distanceTo(l),l.copy(o),a=(this.points.length-1)*r,s=Math.floor(a),s!==c&&(h[s]=p,c=s);return h[h.length]=p,{chunks:h,total:p}},this.reparametrizeByArcLength=function(e){var t,r,i,o,a,s,c,l,u=[],h=new n.Vector3,p=this.getLength();for(u.push(h.copy(this.points[0]).clone()),t=1;t<this.points.length;t++){for(s=p.chunks[t]-p.chunks[t-1],c=Math.ceil(e*s/p.total),o=(t-1)/(this.points.length-1),a=t/(this.points.length-1),r=1;r<c-1;r++)i=o+r*(1/c)*(a-o),l=this.getPoint(i),u.push(h.copy(l).clone());u.push(h.copy(this.points[t]).clone())}this.points=u}},n.Triangle=function(e,t,r){this.a=void 0!==e?e:new n.Vector3,this.b=void 0!==t?t:new n.Vector3,this.c=void 0!==r?r:new n.Vector3},n.Triangle.normal=function(){var e=new n.Vector3;return function(t,r,i,o){var a=o||new n.Vector3;a.subVectors(i,r),e.subVectors(t,r),a.cross(e);var s=a.lengthSq();return s>0?a.multiplyScalar(1/Math.sqrt(s)):a.set(0,0,0)}}(),n.Triangle.barycoordFromPoint=function(){var e=new n.Vector3,t=new n.Vector3,r=new n.Vector3;return function(i,o,a,s,c){e.subVectors(s,o),t.subVectors(a,o),r.subVectors(i,o);var l=e.dot(e),u=e.dot(t),h=e.dot(r),p=t.dot(t),d=t.dot(r),f=l*p-u*u,m=c||new n.Vector3;if(0===f)return m.set(-2,-1,-1);var v=1/f,g=(p*h-u*d)*v,y=(l*d-u*h)*v;return m.set(1-g-y,y,g)}}(),n.Triangle.containsPoint=function(){var e=new n.Vector3;return function(t,r,i,o){var a=n.Triangle.barycoordFromPoint(t,r,i,o,e);return a.x>=0&&a.y>=0&&a.x+a.y<=1}}(),n.Triangle.prototype={constructor:n.Triangle,set:function(e,t,r){return this.a.copy(e),this.b.copy(t),this.c.copy(r),this},setFromPointsAndIndices:function(e,t,r,n){return this.a.copy(e[t]),this.b.copy(e[r]),this.c.copy(e[n]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},area:function(){var e=new n.Vector3,t=new n.Vector3;return function(){return e.subVectors(this.c,this.b),t.subVectors(this.a,this.b),.5*e.cross(t).length()}}(),midpoint:function(e){var t=e||new n.Vector3;return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3);
},normal:function(e){return n.Triangle.normal(this.a,this.b,this.c,e)},plane:function(e){var t=e||new n.Plane;return t.setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(e,t){return n.Triangle.barycoordFromPoint(e,this.a,this.b,this.c,t)},containsPoint:function(e){return n.Triangle.containsPoint(e,this.a,this.b,this.c)},closestPointToPoint:function(){var e,t,r,i;return function(o,a){void 0===e&&(e=new n.Plane,t=[new n.Line3,new n.Line3,new n.Line3],r=new n.Vector3,i=new n.Vector3);var s=a||new n.Vector3,c=1/0;if(e.setFromCoplanarPoints(this.a,this.b,this.c),e.projectPoint(o,r),this.containsPoint(r)===!0)s.copy(r);else{t[0].set(this.a,this.b),t[1].set(this.b,this.c),t[2].set(this.c,this.a);for(var l=0;l<t.length;l++){t[l].closestPointToPoint(r,!0,i);var u=r.distanceToSquared(i);u<c&&(c=u,s.copy(i))}}return s}}(),equals:function(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}},n.Interpolant=function(e,t,r,n){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new t.constructor(r),this.sampleValues=t,this.valueSize=r},n.Interpolant.prototype={constructor:n.Interpolant,evaluate:function(e){var t=this.parameterPositions,r=this._cachedIndex,n=t[r],i=t[r-1];e:{t:{var o;r:{n:if(!(e<n)){for(var a=r+2;;){if(void 0===n){if(e<i)break n;return r=t.length,this._cachedIndex=r,this.afterEnd_(r-1,e,i)}if(r===a)break;if(i=n,n=t[++r],e<n)break t}o=t.length;break r}{if(e>=i)break e;var s=t[1];e<s&&(r=2,i=s);for(var a=r-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,e,n);if(r===a)break;if(n=i,i=t[--r-1],e>=i)break t}o=r,r=0}}for(;r<o;){var c=r+o>>>1;e<t[c]?o=c:r=c+1}if(n=t[r],i=t[r-1],void 0===i)return this._cachedIndex=0,this.beforeStart_(0,e,n);if(void 0===n)return r=t.length,this._cachedIndex=r,this.afterEnd_(r-1,i,e)}this._cachedIndex=r,this.intervalChanged_(r,i,n)}return this.interpolate_(r,i,e,n)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){for(var t=this.resultBuffer,r=this.sampleValues,n=this.valueSize,i=e*n,o=0;o!==n;++o)t[o]=r[i+o];return t},interpolate_:function(e,t,r,n){throw new Error("call to abstract method")},intervalChanged_:function(e,t,r){}},Object.assign(n.Interpolant.prototype,{beforeStart_:n.Interpolant.prototype.copySampleValue_,afterEnd_:n.Interpolant.prototype.copySampleValue_}),n.CubicInterpolant=function(e,t,r,i){n.Interpolant.call(this,e,t,r,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0},n.CubicInterpolant.prototype=Object.assign(Object.create(n.Interpolant.prototype),{constructor:n.CubicInterpolant,DefaultSettings_:{endingStart:n.ZeroCurvatureEnding,endingEnd:n.ZeroCurvatureEnding},intervalChanged_:function(e,t,r){var i=this.parameterPositions,o=e-2,a=e+1,s=i[o],c=i[a];if(void 0===s)switch(this.getSettings_().endingStart){case n.ZeroSlopeEnding:o=e,s=2*t-r;break;case n.WrapAroundEnding:o=i.length-2,s=t+i[o]-i[o+1];break;default:o=e,s=r}if(void 0===c)switch(this.getSettings_().endingEnd){case n.ZeroSlopeEnding:a=e,c=2*r-t;break;case n.WrapAroundEnding:a=1,c=r+i[1]-i[0];break;default:a=e-1,c=t}var l=.5*(r-t),u=this.valueSize;this._weightPrev=l/(t-s),this._weightNext=l/(c-r),this._offsetPrev=o*u,this._offsetNext=a*u},interpolate_:function(e,t,r,n){for(var i=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=e*a,c=s-a,l=this._offsetPrev,u=this._offsetNext,h=this._weightPrev,p=this._weightNext,d=(r-t)/(n-t),f=d*d,m=f*d,v=-h*m+2*h*f-h*d,g=(1+h)*m+(-1.5-2*h)*f+(-.5+h)*d+1,y=(-1-p)*m+(1.5+p)*f+.5*d,x=p*m-p*f,b=0;b!==a;++b)i[b]=v*o[l+b]+g*o[c+b]+y*o[s+b]+x*o[u+b];return i}}),n.DiscreteInterpolant=function(e,t,r,i){n.Interpolant.call(this,e,t,r,i)},n.DiscreteInterpolant.prototype=Object.assign(Object.create(n.Interpolant.prototype),{constructor:n.DiscreteInterpolant,interpolate_:function(e,t,r,n){return this.copySampleValue_(e-1)}}),n.LinearInterpolant=function(e,t,r,i){n.Interpolant.call(this,e,t,r,i)},n.LinearInterpolant.prototype=Object.assign(Object.create(n.Interpolant.prototype),{constructor:n.LinearInterpolant,interpolate_:function(e,t,r,n){for(var i=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=e*a,c=s-a,l=(r-t)/(n-t),u=1-l,h=0;h!==a;++h)i[h]=o[c+h]*u+o[s+h]*l;return i}}),n.QuaternionLinearInterpolant=function(e,t,r,i){n.Interpolant.call(this,e,t,r,i)},n.QuaternionLinearInterpolant.prototype=Object.assign(Object.create(n.Interpolant.prototype),{constructor:n.QuaternionLinearInterpolant,interpolate_:function(e,t,r,i){for(var o=this.resultBuffer,a=this.sampleValues,s=this.valueSize,c=e*s,l=(r-t)/(i-t),u=c+s;c!==u;c+=4)n.Quaternion.slerpFlat(o,0,a,c-s,a,c,l);return o}}),n.Clock=function(e){this.autoStart=void 0===e||e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1},n.Clock.prototype={constructor:n.Clock,start:function(){this.startTime=(performance||Date).now(),this.oldTime=this.startTime,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var e=0;if(this.autoStart&&!this.running&&this.start(),this.running){var t=(performance||Date).now();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}},n.EventDispatcher=function(){},Object.assign(n.EventDispatcher.prototype,{addEventListener:function(e,t){void 0===this._listeners&&(this._listeners={});var r=this._listeners;void 0===r[e]&&(r[e]=[]),r[e].indexOf(t)===-1&&r[e].push(t)},hasEventListener:function(e,t){if(void 0===this._listeners)return!1;var r=this._listeners;return void 0!==r[e]&&r[e].indexOf(t)!==-1},removeEventListener:function(e,t){if(void 0!==this._listeners){var r=this._listeners,n=r[e];if(void 0!==n){var i=n.indexOf(t);i!==-1&&n.splice(i,1)}}},dispatchEvent:function(e){if(void 0!==this._listeners){var t=this._listeners,r=t[e.type];if(void 0!==r){e.target=this;var n=[],i=0,o=r.length;for(i=0;i<o;i++)n[i]=r[i];for(i=0;i<o;i++)n[i].call(this,e)}}}}),n.Layers=function(){this.mask=1},n.Layers.prototype={constructor:n.Layers,set:function(e){this.mask=1<<e},enable:function(e){this.mask|=1<<e},toggle:function(e){this.mask^=1<<e},disable:function(e){this.mask&=~(1<<e)},test:function(e){return 0!==(this.mask&e.mask)}},function(e){function t(e,t){return e.distance-t.distance}function r(e,t,n,i){if(e.visible!==!1&&(e.raycast(t,n),i===!0))for(var o=e.children,a=0,s=o.length;a<s;a++)r(o[a],t,n,!0)}e.Raycaster=function(t,r,n,i){this.ray=new e.Ray(t,r),this.near=n||0,this.far=i||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})},e.Raycaster.prototype={constructor:e.Raycaster,linePrecision:1,set:function(e,t){this.ray.set(e,t)},setFromCamera:function(t,r){r instanceof e.PerspectiveCamera?(this.ray.origin.setFromMatrixPosition(r.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(r).sub(this.ray.origin).normalize()):r instanceof e.OrthographicCamera?(this.ray.origin.set(t.x,t.y,(r.near+r.far)/(r.near-r.far)).unproject(r),this.ray.direction.set(0,0,-1).transformDirection(r.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(e,n){var i=[];return r(e,this,i,n),i.sort(t),i},intersectObjects:function(e,n){var i=[];if(Array.isArray(e)===!1)return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),i;for(var o=0,a=e.length;o<a;o++)r(e[o],this,i,n);return i.sort(t),i}}}(n),n.Object3D=function(){function e(){o.setFromEuler(i,!1)}function t(){i.setFromQuaternion(o,void 0,!1)}Object.defineProperty(this,"id",{value:n.Object3DIdCount++}),this.uuid=n.Math.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=n.Object3D.DefaultUp.clone();var r=new n.Vector3,i=new n.Euler,o=new n.Quaternion,a=new n.Vector3(1,1,1);i.onChange(e),o.onChange(t),Object.defineProperties(this,{position:{enumerable:!0,value:r},rotation:{enumerable:!0,value:i},quaternion:{enumerable:!0,value:o},scale:{enumerable:!0,value:a},modelViewMatrix:{value:new n.Matrix4},normalMatrix:{value:new n.Matrix3}}),this.matrix=new n.Matrix4,this.matrixWorld=new n.Matrix4,this.matrixAutoUpdate=n.Object3D.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new n.Layers,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}},n.Object3D.DefaultUp=new n.Vector3(0,1,0),n.Object3D.DefaultMatrixAutoUpdate=!0,Object.assign(n.Object3D.prototype,n.EventDispatcher.prototype,{applyMatrix:function(e){this.matrix.multiplyMatrices(e,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(){var e=new n.Quaternion;return function(t,r){return e.setFromAxisAngle(t,r),this.quaternion.multiply(e),this}}(),rotateX:function(){var e=new n.Vector3(1,0,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateY:function(){var e=new n.Vector3(0,1,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateZ:function(){var e=new n.Vector3(0,0,1);return function(t){return this.rotateOnAxis(e,t)}}(),translateOnAxis:function(){var e=new n.Vector3;return function(t,r){return e.copy(t).applyQuaternion(this.quaternion),this.position.add(e.multiplyScalar(r)),this}}(),translateX:function(){var e=new n.Vector3(1,0,0);return function(t){return this.translateOnAxis(e,t)}}(),translateY:function(){var e=new n.Vector3(0,1,0);return function(t){return this.translateOnAxis(e,t)}}(),translateZ:function(){var e=new n.Vector3(0,0,1);return function(t){return this.translateOnAxis(e,t)}}(),localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var e=new n.Matrix4;return function(t){return t.applyMatrix4(e.getInverse(this.matrixWorld))}}(),lookAt:function(){var e=new n.Matrix4;return function(t){e.lookAt(t,this.position,this.up),this.quaternion.setFromRotationMatrix(e)}}(),add:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e instanceof n.Object3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,e.dispatchEvent({type:"added"}),this.children.push(e)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)},remove:function(e){if(arguments.length>1)for(var t=0;t<arguments.length;t++)this.remove(arguments[t]);var r=this.children.indexOf(e);r!==-1&&(e.parent=null,e.dispatchEvent({type:"removed"}),this.children.splice(r,1))},getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(var r=0,n=this.children.length;r<n;r++){var i=this.children[r],o=i.getObjectByProperty(e,t);if(void 0!==o)return o}},getWorldPosition:function(e){var t=e||new n.Vector3;return this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var e=new n.Vector3,t=new n.Vector3;return function(r){var i=r||new n.Quaternion;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,i,t),i}}(),getWorldRotation:function(){var e=new n.Quaternion;return function(t){var r=t||new n.Euler;return this.getWorldQuaternion(e),r.setFromQuaternion(e,this.rotation.order,!1)}}(),getWorldScale:function(){var e=new n.Vector3,t=new n.Quaternion;return function(r){var i=r||new n.Vector3;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,t,i),i}}(),getWorldDirection:function(){var e=new n.Quaternion;return function(t){var r=t||new n.Vector3;return this.getWorldQuaternion(e),r.set(0,0,1).applyQuaternion(e)}}(),raycast:function(){},traverse:function(e){e(this);for(var t=this.children,r=0,n=t.length;r<n;r++)t[r].traverse(e)},traverseVisible:function(e){if(this.visible!==!1){e(this);for(var t=this.children,r=0,n=t.length;r<n;r++)t[r].traverseVisible(e)}},traverseAncestors:function(e){var t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate===!0&&this.updateMatrix(),this.matrixWorldNeedsUpdate!==!0&&e!==!0||(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(var t=0,r=this.children.length;t<r;t++)this.children[t].updateMatrixWorld(e)},toJSON:function(e){function t(e){var t=[];for(var r in e){var n=e[r];delete n.metadata,t.push(n)}return t}var r=void 0===e||""===e,n={};r&&(e={geometries:{},materials:{},textures:{},images:{}},n.metadata={version:4.4,type:"Object",generator:"Object3D.toJSON"});var i={};if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),i.matrix=this.matrix.toArray(),void 0!==this.geometry&&(void 0===e.geometries[this.geometry.uuid]&&(e.geometries[this.geometry.uuid]=this.geometry.toJSON(e)),i.geometry=this.geometry.uuid),void 0!==this.material&&(void 0===e.materials[this.material.uuid]&&(e.materials[this.material.uuid]=this.material.toJSON(e)),i.material=this.material.uuid),this.children.length>0){i.children=[];for(var o=0;o<this.children.length;o++)i.children.push(this.children[o].toJSON(e).object)}if(r){var a=t(e.geometries),s=t(e.materials),c=t(e.textures),l=t(e.images);a.length>0&&(n.geometries=a),s.length>0&&(n.materials=s),c.length>0&&(n.textures=c),l.length>0&&(n.images=l)}return n.object=i,n},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,t){if(void 0===t&&(t=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(var r=0;r<e.children.length;r++){var n=e.children[r];this.add(n.clone())}return this}}),n.Object3DIdCount=0,n.Face3=function(e,t,r,i,o,a){this.a=e,this.b=t,this.c=r,this.normal=i instanceof n.Vector3?i:new n.Vector3,this.vertexNormals=Array.isArray(i)?i:[],this.color=o instanceof n.Color?o:new n.Color,this.vertexColors=Array.isArray(o)?o:[],this.materialIndex=void 0!==a?a:0},n.Face3.prototype={constructor:n.Face3,clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,r=e.vertexNormals.length;t<r;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(var t=0,r=e.vertexColors.length;t<r;t++)this.vertexColors[t]=e.vertexColors[t].clone();return this}},n.BufferAttribute=function(e,t,r){this.uuid=n.Math.generateUUID(),this.array=e,this.itemSize=t,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0,this.normalized=r===!0},n.BufferAttribute.prototype={constructor:n.BufferAttribute,get count(){return this.array.length/this.itemSize},set needsUpdate(e){e===!0&&this.version++},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.dynamic=e.dynamic,this},copyAt:function(e,t,r){e*=this.itemSize,r*=t.itemSize;for(var n=0,i=this.itemSize;n<i;n++)this.array[e+n]=t.array[r+n];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){for(var t=this.array,r=0,i=0,o=e.length;i<o;i++){var a=e[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),a=new n.Color),t[r++]=a.r,t[r++]=a.g,t[r++]=a.b}return this},copyIndicesArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;n<i;n++){var o=e[n];t[r++]=o.a,t[r++]=o.b,t[r++]=o.c}return this},copyVector2sArray:function(e){for(var t=this.array,r=0,i=0,o=e.length;i<o;i++){var a=e[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),a=new n.Vector2),t[r++]=a.x,t[r++]=a.y}return this},copyVector3sArray:function(e){for(var t=this.array,r=0,i=0,o=e.length;i<o;i++){var a=e[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),a=new n.Vector3),t[r++]=a.x,t[r++]=a.y,t[r++]=a.z}return this},copyVector4sArray:function(e){for(var t=this.array,r=0,i=0,o=e.length;i<o;i++){var a=e[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),a=new n.Vector4),t[r++]=a.x,t[r++]=a.y,t[r++]=a.z,t[r++]=a.w}return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){return this.array[e*this.itemSize]=t,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){return this.array[e*this.itemSize+1]=t,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){return this.array[e*this.itemSize+2]=t,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){return this.array[e*this.itemSize+3]=t,this},setXY:function(e,t,r){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this},setXYZ:function(e,t,r,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this.array[e+2]=n,this},setXYZW:function(e,t,r,n,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this.array[e+2]=n,this.array[e+3]=i,this},clone:function(){return(new this.constructor).copy(this)}},n.Int8Attribute=function(e,t){return new n.BufferAttribute(new Int8Array(e),t)},n.Uint8Attribute=function(e,t){return new n.BufferAttribute(new Uint8Array(e),t)},n.Uint8ClampedAttribute=function(e,t){return new n.BufferAttribute(new Uint8ClampedArray(e),t)},n.Int16Attribute=function(e,t){return new n.BufferAttribute(new Int16Array(e),t)},n.Uint16Attribute=function(e,t){return new n.BufferAttribute(new Uint16Array(e),t)},n.Int32Attribute=function(e,t){return new n.BufferAttribute(new Int32Array(e),t)},n.Uint32Attribute=function(e,t){return new n.BufferAttribute(new Uint32Array(e),t)},n.Float32Attribute=function(e,t){return new n.BufferAttribute(new Float32Array(e),t)},n.Float64Attribute=function(e,t){return new n.BufferAttribute(new Float64Array(e),t)},n.DynamicBufferAttribute=function(e,t){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new n.BufferAttribute(e,t).setDynamic(!0)},n.InstancedBufferAttribute=function(e,t,r){n.BufferAttribute.call(this,e,t),this.meshPerAttribute=r||1},n.InstancedBufferAttribute.prototype=Object.create(n.BufferAttribute.prototype),n.InstancedBufferAttribute.prototype.constructor=n.InstancedBufferAttribute,n.InstancedBufferAttribute.prototype.copy=function(e){return n.BufferAttribute.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},n.InterleavedBuffer=function(e,t){this.uuid=n.Math.generateUUID(),this.array=e,this.stride=t,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0},n.InterleavedBuffer.prototype={constructor:n.InterleavedBuffer,get length(){return this.array.length},get count(){return this.array.length/this.stride},set needsUpdate(e){e===!0&&this.version++},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.stride=e.stride,this.dynamic=e.dynamic,this},copyAt:function(e,t,r){e*=this.stride,r*=t.stride;for(var n=0,i=this.stride;n<i;n++)this.array[e+n]=t.array[r+n];return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},clone:function(){return(new this.constructor).copy(this)}},n.InstancedInterleavedBuffer=function(e,t,r){n.InterleavedBuffer.call(this,e,t),this.meshPerAttribute=r||1},n.InstancedInterleavedBuffer.prototype=Object.create(n.InterleavedBuffer.prototype),n.InstancedInterleavedBuffer.prototype.constructor=n.InstancedInterleavedBuffer,n.InstancedInterleavedBuffer.prototype.copy=function(e){return n.InterleavedBuffer.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},n.InterleavedBufferAttribute=function(e,t,r,i){this.uuid=n.Math.generateUUID(),this.data=e,this.itemSize=t,this.offset=r,this.normalized=i===!0},n.InterleavedBufferAttribute.prototype={constructor:n.InterleavedBufferAttribute,get length(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count."),this.array.length},get count(){return this.data.count},get array(){return this.data.array},setX:function(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this},setY:function(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this},setZ:function(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this},setW:function(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,r){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this},setXYZ:function(e,t,r,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this.data.array[e+2]=n,this},setXYZW:function(e,t,r,n,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this.data.array[e+2]=n,this.data.array[e+3]=i,this}},n.Geometry=function(){Object.defineProperty(this,"id",{value:n.GeometryIdCount++}),this.uuid=n.Math.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1},Object.assign(n.Geometry.prototype,n.EventDispatcher.prototype,{applyMatrix:function(e){for(var t=(new n.Matrix3).getNormalMatrix(e),r=0,i=this.vertices.length;r<i;r++){var o=this.vertices[r];o.applyMatrix4(e)}for(var r=0,i=this.faces.length;r<i;r++){var a=this.faces[r];a.normal.applyMatrix3(t).normalize();for(var s=0,c=a.vertexNormals.length;s<c;s++)a.vertexNormals[s].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var e;return function(t){return void 0===e&&(e=new n.Matrix4),e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e;return function(t){return void 0===e&&(e=new n.Matrix4),e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e;return function(t){return void 0===e&&(e=new n.Matrix4),e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e;return function(t,r,i){return void 0===e&&(e=new n.Matrix4),e.makeTranslation(t,r,i),this.applyMatrix(e),this}}(),scale:function(){var e;return function(t,r,i){return void 0===e&&(e=new n.Matrix4),e.makeScale(t,r,i),this.applyMatrix(e),this}}(),lookAt:function(){var e;return function(t){void 0===e&&(e=new n.Object3D),e.lookAt(t),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),fromBufferGeometry:function(e){function t(e,t,i,o){var a=void 0!==s?[h[e].clone(),h[t].clone(),h[i].clone()]:[],f=void 0!==c?[r.colors[e].clone(),r.colors[t].clone(),r.colors[i].clone()]:[],m=new n.Face3(e,t,i,a,f,o);r.faces.push(m),void 0!==l&&r.faceVertexUvs[0].push([p[e].clone(),p[t].clone(),p[i].clone()]),void 0!==u&&r.faceVertexUvs[1].push([d[e].clone(),d[t].clone(),d[i].clone()])}var r=this,i=null!==e.index?e.index.array:void 0,o=e.attributes,a=o.position.array,s=void 0!==o.normal?o.normal.array:void 0,c=void 0!==o.color?o.color.array:void 0,l=void 0!==o.uv?o.uv.array:void 0,u=void 0!==o.uv2?o.uv2.array:void 0;void 0!==u&&(this.faceVertexUvs[1]=[]);for(var h=[],p=[],d=[],f=0,m=0;f<a.length;f+=3,m+=2)r.vertices.push(new n.Vector3(a[f],a[f+1],a[f+2])),void 0!==s&&h.push(new n.Vector3(s[f],s[f+1],s[f+2])),void 0!==c&&r.colors.push(new n.Color(c[f],c[f+1],c[f+2])),void 0!==l&&p.push(new n.Vector2(l[m],l[m+1])),void 0!==u&&d.push(new n.Vector2(u[m],u[m+1]));if(void 0!==i){var v=e.groups;if(v.length>0)for(var f=0;f<v.length;f++)for(var g=v[f],y=g.start,x=g.count,m=y,b=y+x;m<b;m+=3)t(i[m],i[m+1],i[m+2],g.materialIndex);else for(var f=0;f<i.length;f+=3)t(i[f],i[f+1],i[f+2])}else for(var f=0;f<a.length/3;f+=3)t(f,f+1,f+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){this.computeBoundingBox();var e=this.boundingBox.center().negate();return this.translate(e.x,e.y,e.z),e},normalize:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,t=this.boundingSphere.radius,r=0===t?1:1/t,i=new n.Matrix4;return i.set(r,0,0,-r*e.x,0,r,0,-r*e.y,0,0,r,-r*e.z,0,0,0,1),this.applyMatrix(i),this},computeFaceNormals:function(){for(var e=new n.Vector3,t=new n.Vector3,r=0,i=this.faces.length;r<i;r++){var o=this.faces[r],a=this.vertices[o.a],s=this.vertices[o.b],c=this.vertices[o.c];e.subVectors(c,s),t.subVectors(a,s),e.cross(t),e.normalize(),o.normal.copy(e)}},computeVertexNormals:function(e){void 0===e&&(e=!0);var t,r,i,o,a,s;for(s=new Array(this.vertices.length),t=0,r=this.vertices.length;t<r;t++)s[t]=new n.Vector3;if(e){var c,l,u,h=new n.Vector3,p=new n.Vector3;for(i=0,o=this.faces.length;i<o;i++)a=this.faces[i],c=this.vertices[a.a],l=this.vertices[a.b],u=this.vertices[a.c],h.subVectors(u,l),p.subVectors(c,l),h.cross(p),s[a.a].add(h),s[a.b].add(h),s[a.c].add(h)}else for(i=0,o=this.faces.length;i<o;i++)a=this.faces[i],s[a.a].add(a.normal),s[a.b].add(a.normal),s[a.c].add(a.normal);for(t=0,r=this.vertices.length;t<r;t++)s[t].normalize();for(i=0,o=this.faces.length;i<o;i++){a=this.faces[i];var d=a.vertexNormals;3===d.length?(d[0].copy(s[a.a]),d[1].copy(s[a.b]),d[2].copy(s[a.c])):(d[0]=s[a.a].clone(),d[1]=s[a.b].clone(),d[2]=s[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var e,t,r,i,o;for(r=0,i=this.faces.length;r<i;r++)for(o=this.faces[r],o.__originalFaceNormal?o.__originalFaceNormal.copy(o.normal):o.__originalFaceNormal=o.normal.clone(),o.__originalVertexNormals||(o.__originalVertexNormals=[]),e=0,t=o.vertexNormals.length;e<t;e++)o.__originalVertexNormals[e]?o.__originalVertexNormals[e].copy(o.vertexNormals[e]):o.__originalVertexNormals[e]=o.vertexNormals[e].clone();var a=new n.Geometry;for(a.faces=this.faces,e=0,t=this.morphTargets.length;e<t;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var s,c,l=this.morphNormals[e].faceNormals,u=this.morphNormals[e].vertexNormals;for(r=0,i=this.faces.length;r<i;r++)s=new n.Vector3,c={a:new n.Vector3,b:new n.Vector3,c:new n.Vector3},l.push(s),u.push(c)}var h=this.morphNormals[e];a.vertices=this.morphTargets[e].vertices,a.computeFaceNormals(),a.computeVertexNormals();var s,c;for(r=0,i=this.faces.length;r<i;r++)o=this.faces[r],s=h.faceNormals[r],c=h.vertexNormals[r],s.copy(o.normal),c.a.copy(o.vertexNormals[0]),c.b.copy(o.vertexNormals[1]),c.c.copy(o.vertexNormals[2])}for(r=0,i=this.faces.length;r<i;r++)o=this.faces[r],o.normal=o.__originalFaceNormal,o.vertexNormals=o.__originalVertexNormals},computeTangents:function(){console.warn("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){for(var e=0,t=this.vertices,r=0,n=t.length;r<n;r++)r>0&&(e+=t[r].distanceTo(t[r-1])),this.lineDistances[r]=e},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new n.Box3),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new n.Sphere),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,r){if(e instanceof n.Geometry==!1)return void console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e);var i,o=this.vertices.length,a=this.vertices,s=e.vertices,c=this.faces,l=e.faces,u=this.faceVertexUvs[0],h=e.faceVertexUvs[0];void 0===r&&(r=0),void 0!==t&&(i=(new n.Matrix3).getNormalMatrix(t));for(var p=0,d=s.length;p<d;p++){var f=s[p],m=f.clone();void 0!==t&&m.applyMatrix4(t),a.push(m)}for(p=0,d=l.length;p<d;p++){var v,g,y,x=l[p],b=x.vertexNormals,w=x.vertexColors;v=new n.Face3(x.a+o,x.b+o,x.c+o),v.normal.copy(x.normal),void 0!==i&&v.normal.applyMatrix3(i).normalize();for(var _=0,M=b.length;_<M;_++)g=b[_].clone(),void 0!==i&&g.applyMatrix3(i).normalize(),v.vertexNormals.push(g);v.color.copy(x.color);for(var _=0,M=w.length;_<M;_++)y=w[_],v.vertexColors.push(y.clone());v.materialIndex=x.materialIndex+r,c.push(v)}for(p=0,d=h.length;p<d;p++){var S=h[p],T=[];if(void 0!==S){for(var _=0,M=S.length;_<M;_++)T.push(S[_].clone());u.push(T)}}},mergeMesh:function(e){return e instanceof n.Mesh==!1?void console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e):(e.matrixAutoUpdate&&e.updateMatrix(),void this.merge(e.geometry,e.matrix))},mergeVertices:function(){var e,t,r,n,i,o,a,s,c={},l=[],u=[],h=4,p=Math.pow(10,h);for(r=0,n=this.vertices.length;r<n;r++)e=this.vertices[r],t=Math.round(e.x*p)+"_"+Math.round(e.y*p)+"_"+Math.round(e.z*p),void 0===c[t]?(c[t]=r,l.push(this.vertices[r]),u[r]=l.length-1):u[r]=u[c[t]];var d=[];for(r=0,n=this.faces.length;r<n;r++){i=this.faces[r],i.a=u[i.a],i.b=u[i.b],i.c=u[i.c],o=[i.a,i.b,i.c];for(var f=-1,m=0;m<3;m++)if(o[m]===o[(m+1)%3]){f=m,d.push(r);break}}for(r=d.length-1;r>=0;r--){var v=d[r];for(this.faces.splice(v,1),a=0,s=this.faceVertexUvs.length;a<s;a++)this.faceVertexUvs[a].splice(v,1)}var g=this.vertices.length-l.length;return this.vertices=l,g},sortFacesByMaterialIndex:function(){function e(e,t){return e.materialIndex-t.materialIndex}for(var t=this.faces,r=t.length,n=0;n<r;n++)t[n]._id=n;t.sort(e);var i,o,a=this.faceVertexUvs[0],s=this.faceVertexUvs[1];a&&a.length===r&&(i=[]),s&&s.length===r&&(o=[]);for(var n=0;n<r;n++){var c=t[n]._id;i&&i.push(a[c]),o&&o.push(s[c])}i&&(this.faceVertexUvs[0]=i),o&&(this.faceVertexUvs[1]=o)},toJSON:function(){function e(e,t,r){return r?e|1<<t:e&~(1<<t)}function t(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==p[t]?p[t]:(p[t]=h.length/3,h.push(e.x,e.y,e.z),p[t])}function r(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==f[t]?f[t]:(f[t]=d.length,d.push(e.getHex()),f[t])}function n(e){var t=e.x.toString()+e.y.toString();return void 0!==v[t]?v[t]:(v[t]=m.length/2,m.push(e.x,e.y),v[t])}var i={metadata:{version:4.4,type:"Geometry",generator:"Geometry.toJSON"}};if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),void 0!==this.parameters){var o=this.parameters;for(var a in o)void 0!==o[a]&&(i[a]=o[a]);return i}for(var s=[],c=0;c<this.vertices.length;c++){var l=this.vertices[c];s.push(l.x,l.y,l.z);
}for(var u=[],h=[],p={},d=[],f={},m=[],v={},c=0;c<this.faces.length;c++){var g=this.faces[c],y=!0,x=!1,b=void 0!==this.faceVertexUvs[0][c],w=g.normal.length()>0,_=g.vertexNormals.length>0,M=1!==g.color.r||1!==g.color.g||1!==g.color.b,S=g.vertexColors.length>0,T=0;if(T=e(T,0,0),T=e(T,1,y),T=e(T,2,x),T=e(T,3,b),T=e(T,4,w),T=e(T,5,_),T=e(T,6,M),T=e(T,7,S),u.push(T),u.push(g.a,g.b,g.c),u.push(g.materialIndex),b){var E=this.faceVertexUvs[0][c];u.push(n(E[0]),n(E[1]),n(E[2]))}if(w&&u.push(t(g.normal)),_){var A=g.vertexNormals;u.push(t(A[0]),t(A[1]),t(A[2]))}if(M&&u.push(r(g.color)),S){var C=g.vertexColors;u.push(r(C[0]),r(C[1]),r(C[2]))}}return i.data={},i.data.vertices=s,i.data.normals=h,d.length>0&&(i.data.colors=d),m.length>0&&(i.data.uvs=[m]),i.data.faces=u,i},clone:function(){return(new n.Geometry).copy(this)},copy:function(e){this.vertices=[],this.faces=[],this.faceVertexUvs=[[]];for(var t=e.vertices,r=0,n=t.length;r<n;r++)this.vertices.push(t[r].clone());for(var i=e.faces,r=0,n=i.length;r<n;r++)this.faces.push(i[r].clone());for(var r=0,n=e.faceVertexUvs.length;r<n;r++){var o=e.faceVertexUvs[r];void 0===this.faceVertexUvs[r]&&(this.faceVertexUvs[r]=[]);for(var a=0,s=o.length;a<s;a++){for(var c=o[a],l=[],u=0,h=c.length;u<h;u++){var p=c[u];l.push(p.clone())}this.faceVertexUvs[r].push(l)}}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),n.GeometryIdCount=0,n.DirectGeometry=function(){Object.defineProperty(this,"id",{value:n.GeometryIdCount++}),this.uuid=n.Math.generateUUID(),this.name="",this.type="DirectGeometry",this.indices=[],this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1},Object.assign(n.DirectGeometry.prototype,n.EventDispatcher.prototype,{computeBoundingBox:n.Geometry.prototype.computeBoundingBox,computeBoundingSphere:n.Geometry.prototype.computeBoundingSphere,computeFaceNormals:function(){console.warn("THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.")},computeVertexNormals:function(){console.warn("THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.")},computeGroups:function(e){for(var t,r,n=[],i=e.faces,o=0;o<i.length;o++){var a=i[o];a.materialIndex!==r&&(r=a.materialIndex,void 0!==t&&(t.count=3*o-t.start,n.push(t)),t={start:3*o,materialIndex:r})}void 0!==t&&(t.count=3*o-t.start,n.push(t)),this.groups=n},fromGeometry:function(e){var t,r=e.faces,i=e.vertices,o=e.faceVertexUvs,a=o[0]&&o[0].length>0,s=o[1]&&o[1].length>0,c=e.morphTargets,l=c.length;if(l>0){t=[];for(var u=0;u<l;u++)t[u]=[];this.morphTargets.position=t}var h,p=e.morphNormals,d=p.length;if(d>0){h=[];for(var u=0;u<d;u++)h[u]=[];this.morphTargets.normal=h}for(var f=e.skinIndices,m=e.skinWeights,v=f.length===i.length,g=m.length===i.length,u=0;u<r.length;u++){var y=r[u];this.vertices.push(i[y.a],i[y.b],i[y.c]);var x=y.vertexNormals;if(3===x.length)this.normals.push(x[0],x[1],x[2]);else{var b=y.normal;this.normals.push(b,b,b)}var w=y.vertexColors;if(3===w.length)this.colors.push(w[0],w[1],w[2]);else{var _=y.color;this.colors.push(_,_,_)}if(a===!0){var M=o[0][u];void 0!==M?this.uvs.push(M[0],M[1],M[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",u),this.uvs.push(new n.Vector2,new n.Vector2,new n.Vector2))}if(s===!0){var M=o[1][u];void 0!==M?this.uvs2.push(M[0],M[1],M[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",u),this.uvs2.push(new n.Vector2,new n.Vector2,new n.Vector2))}for(var S=0;S<l;S++){var T=c[S].vertices;t[S].push(T[y.a],T[y.b],T[y.c])}for(var S=0;S<d;S++){var E=p[S].vertexNormals[u];h[S].push(E.a,E.b,E.c)}v&&this.skinIndices.push(f[y.a],f[y.b],f[y.c]),g&&this.skinWeights.push(m[y.a],m[y.b],m[y.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),n.BufferGeometry=function(){Object.defineProperty(this,"id",{value:n.GeometryIdCount++}),this.uuid=n.Math.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0}},Object.assign(n.BufferGeometry.prototype,n.EventDispatcher.prototype,{getIndex:function(){return this.index},setIndex:function(e){this.index=e},addAttribute:function(e,t){return t instanceof n.BufferAttribute==!1&&t instanceof n.InterleavedBufferAttribute==!1?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),void this.addAttribute(e,new n.BufferAttribute(arguments[1],arguments[2]))):"index"===e?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),void this.setIndex(t)):(this.attributes[e]=t,this)},getAttribute:function(e){return this.attributes[e]},removeAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,t,r){this.groups.push({start:e,count:t,materialIndex:void 0!==r?r:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e,this.drawRange.count=t},applyMatrix:function(e){var t=this.attributes.position;void 0!==t&&(e.applyToVector3Array(t.array),t.needsUpdate=!0);var r=this.attributes.normal;if(void 0!==r){var i=(new n.Matrix3).getNormalMatrix(e);i.applyToVector3Array(r.array),r.needsUpdate=!0}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var e;return function(t){return void 0===e&&(e=new n.Matrix4),e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e;return function(t){return void 0===e&&(e=new n.Matrix4),e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e;return function(t){return void 0===e&&(e=new n.Matrix4),e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e;return function(t,r,i){return void 0===e&&(e=new n.Matrix4),e.makeTranslation(t,r,i),this.applyMatrix(e),this}}(),scale:function(){var e;return function(t,r,i){return void 0===e&&(e=new n.Matrix4),e.makeScale(t,r,i),this.applyMatrix(e),this}}(),lookAt:function(){var e;return function(t){void 0===e&&(e=new n.Object3D),e.lookAt(t),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),center:function(){this.computeBoundingBox();var e=this.boundingBox.center().negate();return this.translate(e.x,e.y,e.z),e},setFromObject:function(e){var t=e.geometry;if(e instanceof n.Points||e instanceof n.Line){var r=new n.Float32Attribute(3*t.vertices.length,3),i=new n.Float32Attribute(3*t.colors.length,3);if(this.addAttribute("position",r.copyVector3sArray(t.vertices)),this.addAttribute("color",i.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var o=new n.Float32Attribute(t.lineDistances.length,1);this.addAttribute("lineDistance",o.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else e instanceof n.Mesh&&t instanceof n.Geometry&&this.fromGeometry(t);return this},updateFromObject:function(e){var t=e.geometry;if(e instanceof n.Mesh){var r=t.__directGeometry;if(void 0===r||t.elementsNeedUpdate===!0)return this.fromGeometry(t);r.verticesNeedUpdate=t.verticesNeedUpdate||t.elementsNeedUpdate,r.normalsNeedUpdate=t.normalsNeedUpdate||t.elementsNeedUpdate,r.colorsNeedUpdate=t.colorsNeedUpdate||t.elementsNeedUpdate,r.uvsNeedUpdate=t.uvsNeedUpdate||t.elementsNeedUpdate,r.groupsNeedUpdate=t.groupsNeedUpdate||t.elementsNeedUpdate,t.elementsNeedUpdate=!1,t.verticesNeedUpdate=!1,t.normalsNeedUpdate=!1,t.colorsNeedUpdate=!1,t.uvsNeedUpdate=!1,t.groupsNeedUpdate=!1,t=r}var i;return t.verticesNeedUpdate===!0&&(i=this.attributes.position,void 0!==i&&(i.copyVector3sArray(t.vertices),i.needsUpdate=!0),t.verticesNeedUpdate=!1),t.normalsNeedUpdate===!0&&(i=this.attributes.normal,void 0!==i&&(i.copyVector3sArray(t.normals),i.needsUpdate=!0),t.normalsNeedUpdate=!1),t.colorsNeedUpdate===!0&&(i=this.attributes.color,void 0!==i&&(i.copyColorsArray(t.colors),i.needsUpdate=!0),t.colorsNeedUpdate=!1),t.uvsNeedUpdate&&(i=this.attributes.uv,void 0!==i&&(i.copyVector2sArray(t.uvs),i.needsUpdate=!0),t.uvsNeedUpdate=!1),t.lineDistancesNeedUpdate&&(i=this.attributes.lineDistance,void 0!==i&&(i.copyArray(t.lineDistances),i.needsUpdate=!0),t.lineDistancesNeedUpdate=!1),t.groupsNeedUpdate&&(t.computeGroups(e.geometry),this.groups=t.groups,t.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=(new n.DirectGeometry).fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){var t=new Float32Array(3*e.vertices.length);if(this.addAttribute("position",new n.BufferAttribute(t,3).copyVector3sArray(e.vertices)),e.normals.length>0){var r=new Float32Array(3*e.normals.length);this.addAttribute("normal",new n.BufferAttribute(r,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var i=new Float32Array(3*e.colors.length);this.addAttribute("color",new n.BufferAttribute(i,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var o=new Float32Array(2*e.uvs.length);this.addAttribute("uv",new n.BufferAttribute(o,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var a=new Float32Array(2*e.uvs2.length);this.addAttribute("uv2",new n.BufferAttribute(a,2).copyVector2sArray(e.uvs2))}if(e.indices.length>0){var s=e.vertices.length>65535?Uint32Array:Uint16Array,c=new s(3*e.indices.length);this.setIndex(new n.BufferAttribute(c,1).copyIndicesArray(e.indices))}this.groups=e.groups;for(var l in e.morphTargets){for(var u=[],h=e.morphTargets[l],p=0,d=h.length;p<d;p++){var f=h[p],m=new n.Float32Attribute(3*f.length,3);u.push(m.copyVector3sArray(f))}this.morphAttributes[l]=u}if(e.skinIndices.length>0){var v=new n.Float32Attribute(4*e.skinIndices.length,4);this.addAttribute("skinIndex",v.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var g=new n.Float32Attribute(4*e.skinWeights.length,4);this.addAttribute("skinWeight",g.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new n.Box3);var e=this.attributes.position.array;void 0!==e?this.boundingBox.setFromArray(e):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var e=new n.Box3,t=new n.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new n.Sphere);var r=this.attributes.position;if(r){var i=r.array,o=this.boundingSphere.center;e.setFromArray(i),e.center(o);for(var a=0,s=0,c=i.length;s<c;s+=3)t.fromArray(i,s),a=Math.max(a,o.distanceToSquared(t));this.boundingSphere.radius=Math.sqrt(a),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var e=this.index,t=this.attributes,r=this.groups;if(t.position){var i=t.position.array;if(void 0===t.normal)this.addAttribute("normal",new n.BufferAttribute(new Float32Array(i.length),3));else for(var o=t.normal.array,a=0,s=o.length;a<s;a++)o[a]=0;var c,l,u,h=t.normal.array,p=new n.Vector3,d=new n.Vector3,f=new n.Vector3,m=new n.Vector3,v=new n.Vector3;if(e){var g=e.array;0===r.length&&this.addGroup(0,g.length);for(var y=0,x=r.length;y<x;++y)for(var b=r[y],w=b.start,_=b.count,a=w,s=w+_;a<s;a+=3)c=3*g[a+0],l=3*g[a+1],u=3*g[a+2],p.fromArray(i,c),d.fromArray(i,l),f.fromArray(i,u),m.subVectors(f,d),v.subVectors(p,d),m.cross(v),h[c]+=m.x,h[c+1]+=m.y,h[c+2]+=m.z,h[l]+=m.x,h[l+1]+=m.y,h[l+2]+=m.z,h[u]+=m.x,h[u+1]+=m.y,h[u+2]+=m.z}else for(var a=0,s=i.length;a<s;a+=9)p.fromArray(i,a),d.fromArray(i,a+3),f.fromArray(i,a+6),m.subVectors(f,d),v.subVectors(p,d),m.cross(v),h[a]=m.x,h[a+1]=m.y,h[a+2]=m.z,h[a+3]=m.x,h[a+4]=m.y,h[a+5]=m.z,h[a+6]=m.x,h[a+7]=m.y,h[a+8]=m.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},merge:function(e,t){if(e instanceof n.BufferGeometry==!1)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);void 0===t&&(t=0);var r=this.attributes;for(var i in r)if(void 0!==e.attributes[i])for(var o=r[i],a=o.array,s=e.attributes[i],c=s.array,l=s.itemSize,u=0,h=l*t;u<c.length;u++,h++)a[h]=c[u];return this},normalizeNormals:function(){for(var e,t,r,n,i=this.attributes.normal.array,o=0,a=i.length;o<a;o+=3)e=i[o],t=i[o+1],r=i[o+2],n=1/Math.sqrt(e*e+t*t+r*r),i[o]*=n,i[o+1]*=n,i[o+2]*=n},toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var e=new n.BufferGeometry,t=this.index.array,r=this.attributes;for(var i in r){for(var o=r[i],a=o.array,s=o.itemSize,c=new a.constructor(t.length*s),l=0,u=0,h=0,p=t.length;h<p;h++){l=t[h]*s;for(var d=0;d<s;d++)c[u++]=a[l++]}e.addAttribute(i,new n.BufferAttribute(c,s))}return e},toJSON:function(){var e={metadata:{version:4.4,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var r in t)void 0!==t[r]&&(e[r]=t[r]);return e}e.data={attributes:{}};var n=this.index;if(null!==n){var i=Array.prototype.slice.call(n.array);e.data.index={type:n.array.constructor.name,array:i}}var o=this.attributes;for(var r in o){var a=o[r],i=Array.prototype.slice.call(a.array);e.data.attributes[r]={itemSize:a.itemSize,type:a.array.constructor.name,array:i,normalized:a.normalized}}var s=this.groups;s.length>0&&(e.data.groups=JSON.parse(JSON.stringify(s)));var c=this.boundingSphere;return null!==c&&(e.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),e},clone:function(){return(new n.BufferGeometry).copy(this)},copy:function(e){var t=e.index;null!==t&&this.setIndex(t.clone());var r=e.attributes;for(var n in r){var i=r[n];this.addAttribute(n,i.clone())}for(var o=e.groups,a=0,s=o.length;a<s;a++){var c=o[a];this.addGroup(c.start,c.count,c.materialIndex)}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),n.BufferGeometry.MaxIndex=65535,n.InstancedBufferGeometry=function(){n.BufferGeometry.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0},n.InstancedBufferGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.InstancedBufferGeometry.prototype.constructor=n.InstancedBufferGeometry,n.InstancedBufferGeometry.prototype.addGroup=function(e,t,r){this.groups.push({start:e,count:t,instances:r})},n.InstancedBufferGeometry.prototype.copy=function(e){var t=e.index;null!==t&&this.setIndex(t.clone());var r=e.attributes;for(var n in r){var i=r[n];this.addAttribute(n,i.clone())}for(var o=e.groups,a=0,s=o.length;a<s;a++){var c=o[a];this.addGroup(c.start,c.count,c.instances)}return this},n.Uniform=function(e){"string"==typeof e&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e,this.dynamic=!1},n.Uniform.prototype={constructor:n.Uniform,onUpdate:function(e){return this.dynamic=!0,this.onUpdateCallback=e,this}},n.AnimationAction=function(){throw new Error("THREE.AnimationAction: Use mixer.clipAction for construction.")},n.AnimationAction._new=function(e,t,r){this._mixer=e,this._clip=t,this._localRoot=r||null;for(var i=t.tracks,o=i.length,a=new Array(o),s={endingStart:n.ZeroCurvatureEnding,endingEnd:n.ZeroCurvatureEnding},c=0;c!==o;++c){var l=i[c].createInterpolant(null);a[c]=l,l.settings=s}this._interpolantSettings=s,this._interpolants=a,this._propertyBindings=new Array(o),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=n.LoopRepeat,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0},n.AnimationAction._new.prototype={constructor:n.AnimationAction._new,play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){this._startTime;return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(e){return this._startTime=e,this},setLoop:function(e,t){return this.loop=e,this.repetitions=t,this},setEffectiveWeight:function(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(e){return this._scheduleFading(e,0,1)},fadeOut:function(e){return this._scheduleFading(e,1,0)},crossFadeFrom:function(e,t,r){this._mixer;if(e.fadeOut(t),this.fadeIn(t),r){var n=this._clip.duration,i=e._clip.duration,o=i/n,a=n/i;e.warp(1,o,t),this.warp(a,1,t)}return this},crossFadeTo:function(e,t,r){return e.crossFadeFrom(this,t,r)},stopFading:function(){var e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},setEffectiveTimeScale:function(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(e){return this.timeScale=this._clip.duration/e,this.stopWarping()},syncWith:function(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()},halt:function(e){return this.warp(this._effectiveTimeScale,0,e)},warp:function(e,t,r){var n=this._mixer,i=n.time,o=this._timeScaleInterpolant,a=this.timeScale;null===o&&(o=n._lendControlInterpolant(),this._timeScaleInterpolant=o);var s=o.parameterPositions,c=o.sampleValues;return s[0]=i,s[1]=i+r,c[0]=e/a,c[1]=t/a,this},stopWarping:function(){var e=this._timeScaleInterpolant;return null!==e&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(e,t,r,n){var i=this._startTime;if(null!==i){var o=(e-i)*r;if(o<0||0===r)return;this._startTime=null,t=r*o}t*=this._updateTimeScale(e);var a=this._updateTime(t),s=this._updateWeight(e);if(s>0)for(var c=this._interpolants,l=this._propertyBindings,u=0,h=c.length;u!==h;++u)c[u].evaluate(a),l[u].accumulate(n,s)},_updateWeight:function(e){var t=0;if(this.enabled){t=this.weight;var r=this._weightInterpolant;if(null!==r){var n=r.evaluate(e)[0];t*=n,e>r.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=t,t},_updateTimeScale:function(e){var t=0;if(!this.paused){t=this.timeScale;var r=this._timeScaleInterpolant;if(null!==r){var n=r.evaluate(e)[0];t*=n,e>r.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t},_updateTime:function(e){var t=this.time+e;if(0===e)return t;var r=this._clip.duration,i=this.loop,o=this._loopCount;if(i===n.LoopOnce){o===-1&&(this.loopCount=0,this._setEndings(!0,!0,!1));e:{if(t>=r)t=r;else{if(!(t<0))break e;t=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{var a=i===n.LoopPingPong;if(o===-1&&(e>=0?(o=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),t>=r||t<0){var s=Math.floor(t/r);t-=r*s,o+=Math.abs(s);var c=this.repetitions-o;if(c<0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=e>0?r:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(0===c){var l=e<0;this._setEndings(l,!l,a)}else this._setEndings(!1,!1,a);this._loopCount=o,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:s})}}if(a&&1===(1&o))return this.time=t,r-t}return this.time=t,t},_setEndings:function(e,t,r){var i=this._interpolantSettings;r?(i.endingStart=n.ZeroSlopeEnding,i.endingEnd=n.ZeroSlopeEnding):(e?i.endingStart=this.zeroSlopeAtStart?n.ZeroSlopeEnding:n.ZeroCurvatureEnding:i.endingStart=n.WrapAroundEnding,t?i.endingEnd=this.zeroSlopeAtEnd?n.ZeroSlopeEnding:n.ZeroCurvatureEnding:i.endingEnd=n.WrapAroundEnding)},_scheduleFading:function(e,t,r){var n=this._mixer,i=n.time,o=this._weightInterpolant;null===o&&(o=n._lendControlInterpolant(),this._weightInterpolant=o);var a=o.parameterPositions,s=o.sampleValues;return a[0]=i,s[0]=t,a[1]=i+e,s[1]=r,this}},n.AnimationClip=function(e,t,r){this.name=e,this.tracks=r,this.duration=void 0!==t?t:-1,this.uuid=n.Math.generateUUID(),this.duration<0&&this.resetDuration(),this.trim(),this.optimize()},n.AnimationClip.prototype={constructor:n.AnimationClip,resetDuration:function(){for(var e=this.tracks,t=0,r=0,n=e.length;r!==n;++r){var i=this.tracks[r];t=Math.max(t,i.times[i.times.length-1])}this.duration=t},trim:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},optimize:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}},Object.assign(n.AnimationClip,{parse:function(e){for(var t=[],r=e.tracks,i=1/(e.fps||1),o=0,a=r.length;o!==a;++o)t.push(n.KeyframeTrack.parse(r[o]).scale(i));return new n.AnimationClip(e.name,e.duration,t)},toJSON:function(e){for(var t=[],r=e.tracks,i={name:e.name,duration:e.duration,tracks:t},o=0,a=r.length;o!==a;++o)t.push(n.KeyframeTrack.toJSON(r[o]));return i},CreateFromMorphTargetSequence:function(e,t,r,i){for(var o=t.length,a=[],s=0;s<o;s++){var c=[],l=[];c.push((s+o-1)%o,s,(s+1)%o),l.push(0,1,0);var u=n.AnimationUtils.getKeyframeOrder(c);c=n.AnimationUtils.sortedArray(c,1,u),l=n.AnimationUtils.sortedArray(l,1,u),i||0!==c[0]||(c.push(o),l.push(l[0])),a.push(new n.NumberKeyframeTrack(".morphTargetInfluences["+t[s].name+"]",c,l).scale(1/r))}return new n.AnimationClip(e,(-1),a)},findByName:function(e,t){var r=e;if(!Array.isArray(e)){var n=e;r=n.geometry&&n.geometry.animations||n.animations}for(var i=0;i<r.length;i++)if(r[i].name===t)return r[i];return null},CreateClipsFromMorphTargetSequences:function(e,t,r){for(var i={},o=/^([\w-]*?)([\d]+)$/,a=0,s=e.length;a<s;a++){var c=e[a],l=c.name.match(o);if(l&&l.length>1){var u=l[1],h=i[u];h||(i[u]=h=[]),h.push(c)}}var p=[];for(var u in i)p.push(n.AnimationClip.CreateFromMorphTargetSequence(u,i[u],t,r));return p},parseAnimation:function(e,t,r){if(!e)return console.error("  no animation in JSONLoader data"),null;for(var i=function(e,t,r,i,o){if(0!==r.length){var a=[],s=[];n.AnimationUtils.flattenJSON(r,a,s,i),0!==a.length&&o.push(new e(t,a,s))}},o=[],a=e.name||"default",s=e.length||-1,c=e.fps||30,l=e.hierarchy||[],u=0;u<l.length;u++){var h=l[u].keys;if(h&&0!==h.length)if(h[0].morphTargets){for(var p={},d=0;d<h.length;d++)if(h[d].morphTargets)for(var f=0;f<h[d].morphTargets.length;f++)p[h[d].morphTargets[f]]=-1;for(var m in p){for(var v=[],g=[],f=0;f!==h[d].morphTargets.length;++f){var y=h[d];v.push(y.time),g.push(y.morphTarget===m?1:0)}o.push(new n.NumberKeyframeTrack(".morphTargetInfluence["+m+"]",v,g))}s=p.length*(c||1)}else{var x=".bones["+t[u].name+"]";i(n.VectorKeyframeTrack,x+".position",h,"pos",o),i(n.QuaternionKeyframeTrack,x+".quaternion",h,"rot",o),i(n.VectorKeyframeTrack,x+".scale",h,"scl",o)}}if(0===o.length)return null;var b=new n.AnimationClip(a,s,o);return b}}),n.AnimationMixer=function(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1},Object.assign(n.AnimationMixer.prototype,n.EventDispatcher.prototype,{clipAction:function(e,t){var r=t||this._root,i=r.uuid,o="string"==typeof e?n.AnimationClip.findByName(r,e):e,a=null!==o?o.uuid:e,s=this._actionsByClip[a],c=null;if(void 0!==s){var l=s.actionByRoot[i];if(void 0!==l)return l;c=s.knownActions[0],null===o&&(o=c._clip)}if(null===o)return null;var u=new n.AnimationMixer._Action(this,o,t);return this._bindAction(u,c),this._addInactiveAction(u,a,i),u},existingAction:function(e,t){var r=t||this._root,i=r.uuid,o="string"==typeof e?n.AnimationClip.findByName(r,e):e,a=o?o.uuid:e,s=this._actionsByClip[a];return void 0!==s?s.actionByRoot[i]||null:null},stopAllAction:function(){var e=this._actions,t=this._nActiveActions,r=this._bindings,n=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var i=0;i!==t;++i)e[i].reset();for(var i=0;i!==n;++i)r[i].useCount=0;return this},update:function(e){e*=this.timeScale;for(var t=this._actions,r=this._nActiveActions,n=this.time+=e,i=Math.sign(e),o=this._accuIndex^=1,a=0;a!==r;++a){var s=t[a];s.enabled&&s._update(n,e,i,o)}for(var c=this._bindings,l=this._nActiveBindings,a=0;a!==l;++a)c[a].apply(o);return this},getRoot:function(){return this._root},uncacheClip:function(e){var t=this._actions,r=e.uuid,n=this._actionsByClip,i=n[r];if(void 0!==i){for(var o=i.knownActions,a=0,s=o.length;a!==s;++a){var c=o[a];this._deactivateAction(c);var l=c._cacheIndex,u=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,u._cacheIndex=l,t[l]=u,t.pop(),this._removeInactiveBindingsForAction(c)}delete n[r]}},uncacheRoot:function(e){var t=e.uuid,r=this._actionsByClip;for(var n in r){var i=r[n].actionByRoot,o=i[t];void 0!==o&&(this._deactivateAction(o),this._removeInactiveAction(o))}var a=this._bindingsByRootAndName,s=a[t];if(void 0!==s)for(var c in s){var l=s[c];l.restoreOriginalState(),this._removeInactiveBinding(l)}},uncacheAction:function(e,t){var r=this.existingAction(e,t);null!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}}),n.AnimationMixer._Action=n.AnimationAction._new,Object.assign(n.AnimationMixer.prototype,{_bindAction:function(e,t){var r=e._localRoot||this._root,i=e._clip.tracks,o=i.length,a=e._propertyBindings,s=e._interpolants,c=r.uuid,l=this._bindingsByRootAndName,u=l[c];void 0===u&&(u={},l[c]=u);for(var h=0;h!==o;++h){var p=i[h],d=p.name,f=u[d];if(void 0!==f)a[h]=f;else{if(f=a[h],void 0!==f){null===f._cacheIndex&&(++f.referenceCount,this._addInactiveBinding(f,c,d));continue}var m=t&&t._propertyBindings[h].binding.parsedPath;f=new n.PropertyMixer(n.PropertyBinding.create(r,d,m),p.ValueTypeName,p.getValueSize()),++f.referenceCount,this._addInactiveBinding(f,c,d),a[h]=f}s[h].resultBuffer=f.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(null===e._cacheIndex){var t=(e._localRoot||this._root).uuid,r=e._clip.uuid,n=this._actionsByClip[r];this._bindAction(e,n&&n.knownActions[0]),this._addInactiveAction(e,r,t)}for(var i=e._propertyBindings,o=0,a=i.length;o!==a;++o){var s=i[o];0===s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){for(var t=e._propertyBindings,r=0,n=t.length;r!==n;++r){var i=t[r];0===--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){var t=e._cacheIndex;return null!==t&&t<this._nActiveActions},_addInactiveAction:function(e,t,r){var n=this._actions,i=this._actionsByClip,o=i[t];if(void 0===o)o={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,i[t]=o;else{var a=o.knownActions;e._byClipCacheIndex=a.length,a.push(e)}e._cacheIndex=n.length,n.push(e),o.actionByRoot[r]=e},_removeInactiveAction:function(e){var t=this._actions,r=t[t.length-1],n=e._cacheIndex;r._cacheIndex=n,t[n]=r,t.pop(),e._cacheIndex=null;var i=e._clip.uuid,o=this._actionsByClip,a=o[i],s=a.knownActions,c=s[s.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l,s[l]=c,s.pop(),e._byClipCacheIndex=null;var u=a.actionByRoot,h=(t._localRoot||this._root).uuid;delete u[h],0===s.length&&delete o[i],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){for(var t=e._propertyBindings,r=0,n=t.length;r!==n;++r){var i=t[r];0===--i.referenceCount&&this._removeInactiveBinding(i)}},_lendAction:function(e){var t=this._actions,r=e._cacheIndex,n=this._nActiveActions++,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_takeBackAction:function(e){var t=this._actions,r=e._cacheIndex,n=--this._nActiveActions,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_addInactiveBinding:function(e,t,r){var n=this._bindingsByRootAndName,i=n[t],o=this._bindings;void 0===i&&(i={},n[t]=i),i[r]=e,e._cacheIndex=o.length,o.push(e)},_removeInactiveBinding:function(e){var t=this._bindings,r=e.binding,n=r.rootNode.uuid,i=r.path,o=this._bindingsByRootAndName,a=o[n],s=t[t.length-1],c=e._cacheIndex;s._cacheIndex=c,t[c]=s,t.pop(),delete a[i];e:{for(var l in a)break e;delete o[n]}},_lendBinding:function(e){var t=this._bindings,r=e._cacheIndex,n=this._nActiveBindings++,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_takeBackBinding:function(e){var t=this._bindings,r=e._cacheIndex,n=--this._nActiveBindings,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_lendControlInterpolant:function(){var e=this._controlInterpolants,t=this._nActiveControlInterpolants++,r=e[t];return void 0===r&&(r=new n.LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),r.__cacheIndex=t,e[t]=r),r},_takeBackControlInterpolant:function(e){var t=this._controlInterpolants,r=e.__cacheIndex,n=--this._nActiveControlInterpolants,i=t[n];e.__cacheIndex=n,t[n]=e,i.__cacheIndex=r,t[r]=i},_controlInterpolantsResultBuffer:new Float32Array(1)}),n.AnimationObjectGroup=function(e){this.uuid=n.Math.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var t={};this._indicesByUUID=t;for(var r=0,i=arguments.length;r!==i;++r)t[arguments[r].uuid]=r;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var o=this;this.stats={objects:{get total(){return o._objects.length},get inUse(){return this.total-o.nCachedObjects_}},get bindingsPerObject(){return o._bindings.length}}},n.AnimationObjectGroup.prototype={constructor:n.AnimationObjectGroup,add:function(e){for(var t=this._objects,r=t.length,i=this.nCachedObjects_,o=this._indicesByUUID,a=this._paths,s=this._parsedPaths,c=this._bindings,l=c.length,u=0,h=arguments.length;u!==h;++u){var p=arguments[u],d=p.uuid,f=o[d];if(void 0===f){f=r++,o[d]=f,t.push(p);for(var m=0,v=l;m!==v;++m)c[m].push(new n.PropertyBinding(p,a[m],s[m]))}else if(f<i){var g=t[f],y=--i,x=t[y];o[x.uuid]=f,t[f]=x,o[d]=y,t[y]=p;for(var m=0,v=l;m!==v;++m){var b=c[m],w=b[y],_=b[f];b[f]=w,void 0===_&&(_=new n.PropertyBinding(p,a[m],s[m])),b[y]=_}}else t[f]!==g&&console.error("Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes...")}this.nCachedObjects_=i},remove:function(e){for(var t=this._objects,r=(t.length,
this.nCachedObjects_),n=this._indicesByUUID,i=this._bindings,o=i.length,a=0,s=arguments.length;a!==s;++a){var c=arguments[a],l=c.uuid,u=n[l];if(void 0!==u&&u>=r){var h=r++,p=t[h];n[p.uuid]=u,t[u]=p,n[l]=h,t[h]=c;for(var d=0,f=o;d!==f;++d){var m=i[d],v=m[h],g=m[u];m[u]=v,m[h]=g}}}this.nCachedObjects_=r},uncache:function(e){for(var t=this._objects,r=t.length,n=this.nCachedObjects_,i=this._indicesByUUID,o=this._bindings,a=o.length,s=0,c=arguments.length;s!==c;++s){var l=arguments[s],u=l.uuid,h=i[u];if(void 0!==h)if(delete i[u],h<n){var p=--n,d=t[p],f=--r,m=t[f];i[d.uuid]=h,t[h]=d,i[m.uuid]=p,t[p]=m,t.pop();for(var v=0,g=a;v!==g;++v){var y=o[v],x=y[p],b=y[f];y[h]=x,y[p]=b,y.pop()}}else{var f=--r,m=t[f];i[m.uuid]=h,t[h]=m,t.pop();for(var v=0,g=a;v!==g;++v){var y=o[v];y[h]=y[f],y.pop()}}}this.nCachedObjects_=n},subscribe_:function(e,t){var r=this._bindingsIndicesByPath,i=r[e],o=this._bindings;if(void 0!==i)return o[i];var a=this._paths,s=this._parsedPaths,c=this._objects,l=c.length,u=this.nCachedObjects_,h=new Array(l);i=o.length,r[e]=i,a.push(e),s.push(t),o.push(h);for(var p=u,d=c.length;p!==d;++p){var f=c[p];h[p]=new n.PropertyBinding(f,e,t)}return h},unsubscribe_:function(e){var t=this._bindingsIndicesByPath,r=t[e];if(void 0!==r){var n=this._paths,i=this._parsedPaths,o=this._bindings,a=o.length-1,s=o[a],c=e[a];t[c]=r,o[r]=s,o.pop(),i[r]=i[a],i.pop(),n[r]=n[a],n.pop()}}},n.AnimationUtils={arraySlice:function(e,t,r){return n.AnimationUtils.isTypedArray(e)?new e.constructor(e.subarray(t,r)):e.slice(t,r)},convertArray:function(e,t,r){return!e||!r&&e.constructor===t?e:"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){function t(t,r){return e[t]-e[r]}for(var r=e.length,n=new Array(r),i=0;i!==r;++i)n[i]=i;return n.sort(t),n},sortedArray:function(e,t,r){for(var n=e.length,i=new e.constructor(n),o=0,a=0;a!==n;++o)for(var s=r[o]*t,c=0;c!==t;++c)i[a++]=e[s+c];return i},flattenJSON:function(e,t,r,n){for(var i=1,o=e[0];void 0!==o&&void 0===o[n];)o=e[i++];if(void 0!==o){var a=o[n];if(void 0!==a)if(Array.isArray(a)){do a=o[n],void 0!==a&&(t.push(o.time),r.push.apply(r,a)),o=e[i++];while(void 0!==o)}else if(void 0!==a.toArray){do a=o[n],void 0!==a&&(t.push(o.time),a.toArray(r,r.length)),o=e[i++];while(void 0!==o)}else do a=o[n],void 0!==a&&(t.push(o.time),r.push(a)),o=e[i++];while(void 0!==o)}}},n.KeyframeTrack=function(e,t,r,i){if(void 0===e)throw new Error("track name is undefined");if(void 0===t||0===t.length)throw new Error("no keyframes in track named "+e);this.name=e,this.times=n.AnimationUtils.convertArray(t,this.TimeBufferType),this.values=n.AnimationUtils.convertArray(r,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation),this.validate(),this.optimize()},n.KeyframeTrack.prototype={constructor:n.KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:n.InterpolateLinear,InterpolantFactoryMethodDiscrete:function(e){return new n.DiscreteInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new n.LinearInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new n.CubicInterpolant(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){var t;switch(e){case n.InterpolateDiscrete:t=this.InterpolantFactoryMethodDiscrete;break;case n.InterpolateLinear:t=this.InterpolantFactoryMethodLinear;break;case n.InterpolateSmooth:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){var r="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(r);this.setInterpolation(this.DefaultInterpolation)}return void console.warn(r)}this.createInterpolant=t},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return n.InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return n.InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return n.InterpolateSmooth}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(0!==e)for(var t=this.times,r=0,n=t.length;r!==n;++r)t[r]+=e;return this},scale:function(e){if(1!==e)for(var t=this.times,r=0,n=t.length;r!==n;++r)t[r]*=e;return this},trim:function(e,t){for(var r=this.times,i=r.length,o=0,a=i-1;o!==i&&r[o]<e;)++o;for(;a!==-1&&r[a]>t;)--a;if(++a,0!==o||a!==i){o>=a&&(a=Math.max(a,1),o=a-1);var s=this.getValueSize();this.times=n.AnimationUtils.arraySlice(r,o,a),this.values=n.AnimationUtils.arraySlice(this.values,o*s,a*s)}return this},validate:function(){var e=!0,t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("invalid value size in track",this),e=!1);var r=this.times,i=this.values,o=r.length;0===o&&(console.error("track is empty",this),e=!1);for(var a=null,s=0;s!==o;s++){var c=r[s];if("number"==typeof c&&isNaN(c)){console.error("time is not a valid number",this,s,c),e=!1;break}if(null!==a&&a>c){console.error("out of order keys",this,s,c,a),e=!1;break}a=c}if(void 0!==i&&n.AnimationUtils.isTypedArray(i))for(var s=0,l=i.length;s!==l;++s){var u=i[s];if(isNaN(u)){console.error("value is not a valid number",this,s,u),e=!1;break}}return e},optimize:function(){for(var e=this.times,t=this.values,r=this.getValueSize(),i=1,o=1,a=e.length-1;o<=a;++o){var s=!1,c=e[o],l=e[o+1];if(c!==l&&(1!==o||c!==c[0]))for(var u=o*r,h=u-r,p=u+r,d=0;d!==r;++d){var f=t[u+d];if(f!==t[h+d]||f!==t[p+d]){s=!0;break}}if(s){if(o!==i){e[i]=e[o];for(var m=o*r,v=i*r,d=0;d!==r;++d)t[v+d]=t[m+d]}++i}}return i!==e.length&&(this.times=n.AnimationUtils.arraySlice(e,0,i),this.values=n.AnimationUtils.arraySlice(t,0,i*r)),this}},Object.assign(n.KeyframeTrack,{parse:function(e){if(void 0===e.type)throw new Error("track type undefined, can not parse");var t=n.KeyframeTrack._getTrackTypeForValueTypeName(e.type);if(void 0===e.times){var r=[],i=[];n.AnimationUtils.flattenJSON(e.keys,r,i,"value"),e.times=r,e.values=i}return void 0!==t.parse?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)},toJSON:function(e){var t,r=e.constructor;if(void 0!==r.toJSON)t=r.toJSON(e);else{t={name:e.name,times:n.AnimationUtils.convertArray(e.times,Array),values:n.AnimationUtils.convertArray(e.values,Array)};var i=e.getInterpolation();i!==e.DefaultInterpolation&&(t.interpolation=i)}return t.type=e.ValueTypeName,t},_getTrackTypeForValueTypeName:function(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return n.NumberKeyframeTrack;case"vector":case"vector2":case"vector3":case"vector4":return n.VectorKeyframeTrack;case"color":return n.ColorKeyframeTrack;case"quaternion":return n.QuaternionKeyframeTrack;case"bool":case"boolean":return n.BooleanKeyframeTrack;case"string":return n.StringKeyframeTrack}throw new Error("Unsupported typeName: "+e)}}),n.PropertyBinding=function(e,t,r){this.path=t,this.parsedPath=r||n.PropertyBinding.parseTrackName(t),this.node=n.PropertyBinding.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e},n.PropertyBinding.prototype={constructor:n.PropertyBinding,getValue:function(e,t){this.bind(),this.getValue(e,t)},setValue:function(e,t){this.bind(),this.setValue(e,t)},bind:function(){var e=this.node,t=this.parsedPath,r=t.objectName,i=t.propertyName,o=t.propertyIndex;if(e||(e=n.PropertyBinding.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e)return void console.error("  trying to update node for track: "+this.path+" but it wasn't found.");if(r){var a=t.objectIndex;switch(r){case"materials":if(!e.material)return void console.error("  can not bind to material as node does not have a material",this);if(!e.material.materials)return void console.error("  can not bind to material.materials as node.material does not have a materials array",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("  can not bind to bones as node does not have a skeleton",this);e=e.skeleton.bones;for(var s=0;s<e.length;s++)if(e[s].name===a){a=s;break}break;default:if(void 0===e[r])return void console.error("  can not bind to objectName of node, undefined",this);e=e[r]}if(void 0!==a){if(void 0===e[a])return void console.error("  trying to bind to objectIndex of objectName, but is undefined:",this,e);e=e[a]}}var c=e[i];if(void 0===c){var l=t.nodeName;return void console.error("  trying to update property for track: "+l+"."+i+" but it wasn't found.",e)}var u=this.Versioning.None;void 0!==e.needsUpdate?(u=this.Versioning.NeedsUpdate,this.targetObject=e):void 0!==e.matrixWorldNeedsUpdate&&(u=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=e);var h=this.BindingType.Direct;if(void 0!==o){if("morphTargetInfluences"===i){if(!e.geometry)return void console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry",this);if(!e.geometry.morphTargets)return void console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets",this);for(var s=0;s<this.node.geometry.morphTargets.length;s++)if(e.geometry.morphTargets[s].name===o){o=s;break}}h=this.BindingType.ArrayElement,this.resolvedProperty=c,this.propertyIndex=o}else void 0!==c.fromArray&&void 0!==c.toArray?(h=this.BindingType.HasFromToArray,this.resolvedProperty=c):void 0!==c.length?(h=this.BindingType.EntireArray,this.resolvedProperty=c):this.propertyName=i;this.getValue=this.GetterByBindingType[h],this.setValue=this.SetterByBindingTypeAndVersioning[h][u]},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}},Object.assign(n.PropertyBinding.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},_getValue_unbound:n.PropertyBinding.prototype.getValue,_setValue_unbound:n.PropertyBinding.prototype.setValue,BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(e,t){e[t]=this.node[this.propertyName]},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)e[t++]=r[n]},function(e,t){e[t]=this.resolvedProperty[this.propertyIndex]},function(e,t){this.resolvedProperty.toArray(e,t)}],SetterByBindingTypeAndVersioning:[[function(e,t){this.node[this.propertyName]=e[t]},function(e,t){this.node[this.propertyName]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.node[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++]},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++];this.targetObject.needsUpdate=!0},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty[this.propertyIndex]=e[t]},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty.fromArray(e,t)},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}]]}),n.PropertyBinding.Composite=function(e,t,r){var i=r||n.PropertyBinding.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)},n.PropertyBinding.Composite.prototype={constructor:n.PropertyBinding.Composite,getValue:function(e,t){this.bind();var r=this._targetGroup.nCachedObjects_,n=this._bindings[r];void 0!==n&&n.getValue(e,t)},setValue:function(e,t){for(var r=this._bindings,n=this._targetGroup.nCachedObjects_,i=r.length;n!==i;++n)r[n].setValue(e,t)},bind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,r=e.length;t!==r;++t)e[t].bind()},unbind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,r=e.length;t!==r;++t)e[t].unbind()}},n.PropertyBinding.create=function(e,t,r){return e instanceof n.AnimationObjectGroup?new n.PropertyBinding.Composite(e,t,r):new n.PropertyBinding(e,t,r)},n.PropertyBinding.parseTrackName=function(e){var t=/^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_.:\- ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/,r=t.exec(e);if(!r)throw new Error("cannot parse trackName at all: "+e);r.index===t.lastIndex&&t.lastIndex++;var n={nodeName:r[3],objectName:r[5],objectIndex:r[7],propertyName:r[9],propertyIndex:r[11]};if(null===n.propertyName||0===n.propertyName.length)throw new Error("can not parse propertyName from trackName: "+e);return n},n.PropertyBinding.findNode=function(e,t){if(!t||""===t||"root"===t||"."===t||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){var r=function(e){for(var r=0;r<e.bones.length;r++){var n=e.bones[r];if(n.name===t)return n}return null},n=r(e.skeleton);if(n)return n}if(e.children){var i=function(e){for(var r=0;r<e.length;r++){var n=e[r];if(n.name===t||n.uuid===t)return n;var o=i(n.children);if(o)return o}return null},o=i(e.children);if(o)return o}return null},n.PropertyMixer=function(e,t,r){this.binding=e,this.valueSize=r;var n,i=Float64Array;switch(t){case"quaternion":n=this._slerp;break;case"string":case"bool":i=Array,n=this._select;break;default:n=this._lerp}this.buffer=new i(4*r),this._mixBufferRegion=n,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0},n.PropertyMixer.prototype={constructor:n.PropertyMixer,accumulate:function(e,t){var r=this.buffer,n=this.valueSize,i=e*n+n,o=this.cumulativeWeight;if(0===o){for(var a=0;a!==n;++a)r[i+a]=r[a];o=t}else{o+=t;var s=t/o;this._mixBufferRegion(r,i,0,s,n)}this.cumulativeWeight=o},apply:function(e){var t=this.valueSize,r=this.buffer,n=e*t+t,i=this.cumulativeWeight,o=this.binding;if(this.cumulativeWeight=0,i<1){var a=3*t;this._mixBufferRegion(r,n,a,1-i,t)}for(var s=t,c=t+t;s!==c;++s)if(r[s]!==r[s+t]){o.setValue(r,n);break}},saveOriginalState:function(){var e=this.binding,t=this.buffer,r=this.valueSize,n=3*r;e.getValue(t,n);for(var i=r,o=n;i!==o;++i)t[i]=t[n+i%r];this.cumulativeWeight=0},restoreOriginalState:function(){var e=3*this.valueSize;this.binding.setValue(this.buffer,e)},_select:function(e,t,r,n,i){if(n>=.5)for(var o=0;o!==i;++o)e[t+o]=e[r+o]},_slerp:function(e,t,r,i,o){n.Quaternion.slerpFlat(e,t,e,t,e,r,i)},_lerp:function(e,t,r,n,i){for(var o=1-n,a=0;a!==i;++a){var s=t+a;e[s]=e[s]*o+e[r+a]*n}}},n.BooleanKeyframeTrack=function(e,t,r){n.KeyframeTrack.call(this,e,t,r)},n.BooleanKeyframeTrack.prototype=Object.assign(Object.create(n.KeyframeTrack.prototype),{constructor:n.BooleanKeyframeTrack,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:n.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),n.ColorKeyframeTrack=function(e,t,r,i){n.KeyframeTrack.call(this,e,t,r,i)},n.ColorKeyframeTrack.prototype=Object.assign(Object.create(n.KeyframeTrack.prototype),{constructor:n.ColorKeyframeTrack,ValueTypeName:"color"}),n.NumberKeyframeTrack=function(e,t,r,i){n.KeyframeTrack.call(this,e,t,r,i)},n.NumberKeyframeTrack.prototype=Object.assign(Object.create(n.KeyframeTrack.prototype),{constructor:n.NumberKeyframeTrack,ValueTypeName:"number"}),n.QuaternionKeyframeTrack=function(e,t,r,i){n.KeyframeTrack.call(this,e,t,r,i)},n.QuaternionKeyframeTrack.prototype=Object.assign(Object.create(n.KeyframeTrack.prototype),{constructor:n.QuaternionKeyframeTrack,ValueTypeName:"quaternion",DefaultInterpolation:n.InterpolateLinear,InterpolantFactoryMethodLinear:function(e){return new n.QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0}),n.StringKeyframeTrack=function(e,t,r,i){n.KeyframeTrack.call(this,e,t,r,i)},n.StringKeyframeTrack.prototype=Object.assign(Object.create(n.KeyframeTrack.prototype),{constructor:n.StringKeyframeTrack,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:n.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),n.VectorKeyframeTrack=function(e,t,r,i){n.KeyframeTrack.call(this,e,t,r,i)},n.VectorKeyframeTrack.prototype=Object.assign(Object.create(n.KeyframeTrack.prototype),{constructor:n.VectorKeyframeTrack,ValueTypeName:"vector"}),n.Audio=function(e){n.Object3D.call(this),this.type="Audio",this.context=e.context,this.source=this.context.createBufferSource(),this.source.onended=this.onEnded.bind(this),this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.startTime=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]},n.Audio.prototype=Object.assign(Object.create(n.Object3D.prototype),{constructor:n.Audio,getOutput:function(){return this.gain},setNodeSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this},setBuffer:function(e){return this.source.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(this.isPlaying===!0)return void console.warn("THREE.Audio: Audio is already playing.");if(this.hasPlaybackControl===!1)return void console.warn("THREE.Audio: this Audio has no playback control.");var e=this.context.createBufferSource();return e.buffer=this.source.buffer,e.loop=this.source.loop,e.onended=this.source.onended,e.start(0,this.startTime),e.playbackRate.value=this.playbackRate,this.isPlaying=!0,this.source=e,this.connect()},pause:function(){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.source.stop(),this.startTime=this.context.currentTime,this.isPlaying=!1,this)},stop:function(){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.source.stop(),this.startTime=0,this.isPlaying=!1,this)},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(e){return e||(e=[]),this.isPlaying===!0?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this},getFilter:function(){return this.getFilters()[0]},setFilter:function(e){return this.setFilters(e?[e]:[])},setPlaybackRate:function(e){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.playbackRate=e,this.isPlaying===!0&&(this.source.playbackRate.value=this.playbackRate),this)},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.source.loop},setLoop:function(e){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):void(this.source.loop=e)},getVolume:function(){return this.gain.gain.value},setVolume:function(e){return this.gain.gain.value=e,this}}),n.AudioAnalyser=function(e,t){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=void 0!==t?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)},Object.assign(n.AudioAnalyser.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var e=0,t=this.getFrequencyData(),r=0;r<t.length;r++)e+=t[r];return e/t.length}}),Object.defineProperty(n,"AudioContext",{get:function(){var e;return function(){return void 0===e&&(e=new(window.AudioContext||window.webkitAudioContext)),e}}()}),n.PositionalAudio=function(e){n.Audio.call(this,e),this.panner=this.context.createPanner(),this.panner.connect(this.gain)},n.PositionalAudio.prototype=Object.assign(Object.create(n.Audio.prototype),{constructor:n.PositionalAudio,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(e){this.panner.refDistance=e},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(e){this.panner.rolloffFactor=e},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(e){this.panner.distanceModel=e},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(e){this.panner.maxDistance=e},updateMatrixWorld:function(){var e=new n.Vector3;return function(t){n.Object3D.prototype.updateMatrixWorld.call(this,t),e.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(e.x,e.y,e.z)}}()}),n.AudioListener=function(){n.Object3D.call(this),this.type="AudioListener",this.context=n.AudioContext,this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null},n.AudioListener.prototype=Object.assign(Object.create(n.Object3D.prototype),{constructor:n.AudioListener,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(e){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(e){this.gain.gain.value=e},updateMatrixWorld:function(){var e=new n.Vector3,t=new n.Quaternion,r=new n.Vector3,i=new n.Vector3;return function(o){n.Object3D.prototype.updateMatrixWorld.call(this,o);var a=this.context.listener,s=this.up;this.matrixWorld.decompose(e,t,r),i.set(0,0,-1).applyQuaternion(t),a.setPosition(e.x,e.y,e.z),a.setOrientation(i.x,i.y,i.z,s.x,s.y,s.z)}}()}),n.Camera=function(){n.Object3D.call(this),this.type="Camera",this.matrixWorldInverse=new n.Matrix4,this.projectionMatrix=new n.Matrix4},n.Camera.prototype=Object.create(n.Object3D.prototype),n.Camera.prototype.constructor=n.Camera,n.Camera.prototype.getWorldDirection=function(){var e=new n.Quaternion;return function(t){var r=t||new n.Vector3;return this.getWorldQuaternion(e),r.set(0,0,-1).applyQuaternion(e)}}(),n.Camera.prototype.lookAt=function(){var e=new n.Matrix4;return function(t){e.lookAt(this.position,t,this.up),this.quaternion.setFromRotationMatrix(e)}}(),n.Camera.prototype.clone=function(){return(new this.constructor).copy(this)},n.Camera.prototype.copy=function(e){return n.Object3D.prototype.copy.call(this,e),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this},n.CubeCamera=function(e,t,r){n.Object3D.call(this),this.type="CubeCamera";var i=90,o=1,a=new n.PerspectiveCamera(i,o,e,t);a.up.set(0,-1,0),a.lookAt(new n.Vector3(1,0,0)),this.add(a);var s=new n.PerspectiveCamera(i,o,e,t);s.up.set(0,-1,0),s.lookAt(new n.Vector3((-1),0,0)),this.add(s);var c=new n.PerspectiveCamera(i,o,e,t);c.up.set(0,0,1),c.lookAt(new n.Vector3(0,1,0)),this.add(c);var l=new n.PerspectiveCamera(i,o,e,t);l.up.set(0,0,-1),l.lookAt(new n.Vector3(0,(-1),0)),this.add(l);var u=new n.PerspectiveCamera(i,o,e,t);u.up.set(0,-1,0),u.lookAt(new n.Vector3(0,0,1)),this.add(u);var h=new n.PerspectiveCamera(i,o,e,t);h.up.set(0,-1,0),h.lookAt(new n.Vector3(0,0,(-1))),this.add(h);var p={format:n.RGBFormat,magFilter:n.LinearFilter,minFilter:n.LinearFilter};this.renderTarget=new n.WebGLRenderTargetCube(r,r,p),this.updateCubeMap=function(e,t){null===this.parent&&this.updateMatrixWorld();var r=this.renderTarget,n=r.texture.generateMipmaps;r.texture.generateMipmaps=!1,r.activeCubeFace=0,e.render(t,a,r),r.activeCubeFace=1,e.render(t,s,r),r.activeCubeFace=2,e.render(t,c,r),r.activeCubeFace=3,e.render(t,l,r),r.activeCubeFace=4,e.render(t,u,r),r.texture.generateMipmaps=n,r.activeCubeFace=5,e.render(t,h,r),e.setRenderTarget(null)}},n.CubeCamera.prototype=Object.create(n.Object3D.prototype),n.CubeCamera.prototype.constructor=n.CubeCamera,n.OrthographicCamera=function(e,t,r,i,o,a){n.Camera.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=r,this.bottom=i,this.near=void 0!==o?o:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()},n.OrthographicCamera.prototype=Object.assign(Object.create(n.Camera.prototype),{constructor:n.OrthographicCamera,copy:function(e){return n.Camera.prototype.copy.call(this,e),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this},setViewOffset:function(e,t,r,n,i,o){this.view={fullWidth:e,fullHeight:t,offsetX:r,offsetY:n,width:i,height:o},this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null,this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),r=(this.right+this.left)/2,n=(this.top+this.bottom)/2,i=r-e,o=r+e,a=n+t,s=n-t;if(null!==this.view){var c=this.zoom/(this.view.width/this.view.fullWidth),l=this.zoom/(this.view.height/this.view.fullHeight),u=(this.right-this.left)/this.view.width,h=(this.top-this.bottom)/this.view.height;i+=u*(this.view.offsetX/c),o=i+u*(this.view.width/c),a-=h*(this.view.offsetY/l),s=a-h*(this.view.height/l)}this.projectionMatrix.makeOrthographic(i,o,a,s,this.near,this.far)},toJSON:function(e){var t=n.Object3D.prototype.toJSON.call(this,e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}),n.PerspectiveCamera=function(e,t,r,i){n.Camera.call(this),this.type="PerspectiveCamera",this.fov=void 0!==e?e:50,this.zoom=1,this.near=void 0!==r?r:.1,this.far=void 0!==i?i:2e3,this.focus=10,this.aspect=void 0!==t?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()},n.PerspectiveCamera.prototype=Object.assign(Object.create(n.Camera.prototype),{constructor:n.PerspectiveCamera,copy:function(e){return n.Camera.prototype.copy.call(this,e),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){var t=.5*this.getFilmHeight()/e;this.fov=2*n.Math.RAD2DEG*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){var e=Math.tan(.5*n.Math.DEG2RAD*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return 2*n.Math.RAD2DEG*Math.atan(Math.tan(.5*n.Math.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,r,n,i,o){this.aspect=e/t,this.view={fullWidth:e,fullHeight:t,offsetX:r,offsetY:n,width:i,height:o},this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null,this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=this.near,t=e*Math.tan(.5*n.Math.DEG2RAD*this.fov)/this.zoom,r=2*t,i=this.aspect*r,o=-.5*i,a=this.view;if(null!==a){var s=a.fullWidth,c=a.fullHeight;o+=a.offsetX*i/s,t-=a.offsetY*r/c,i*=a.width/s,r*=a.height/c}var l=this.filmOffset;0!==l&&(o+=e*l/this.getFilmWidth()),this.projectionMatrix.makeFrustum(o,o+i,t-r,t,e,this.far)},toJSON:function(e){var t=n.Object3D.prototype.toJSON.call(this,e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}),n.StereoCamera=function(){this.type="StereoCamera",this.aspect=1,this.cameraL=new n.PerspectiveCamera,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new n.PerspectiveCamera,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1},Object.assign(n.StereoCamera.prototype,{update:function(){var e,t,r,i,o,a=new n.Matrix4,s=new n.Matrix4;return function(c){var l=e!==c.focus||t!==c.fov||r!==c.aspect*this.aspect||i!==c.near||o!==c.far;if(l){e=c.focus,t=c.fov,r=c.aspect*this.aspect,i=c.near,o=c.far;var u,h,p=c.projectionMatrix.clone(),d=.032,f=d*i/e,m=i*Math.tan(n.Math.DEG2RAD*t*.5);s.elements[12]=-d,a.elements[12]=d,u=-m*r+f,h=m*r+f,p.elements[0]=2*i/(h-u),p.elements[8]=(h+u)/(h-u),this.cameraL.projectionMatrix.copy(p),u=-m*r-f,h=m*r-f,p.elements[0]=2*i/(h-u),p.elements[8]=(h+u)/(h-u),this.cameraR.projectionMatrix.copy(p)}this.cameraL.matrixWorld.copy(c.matrixWorld).multiply(s),this.cameraR.matrixWorld.copy(c.matrixWorld).multiply(a)}}()}),n.Light=function(e,t){n.Object3D.call(this),this.type="Light",this.color=new n.Color(e),this.intensity=void 0!==t?t:1,this.receiveShadow=void 0},n.Light.prototype=Object.assign(Object.create(n.Object3D.prototype),{constructor:n.Light,copy:function(e){return n.Object3D.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){var t=n.Object3D.prototype.toJSON.call(this,e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),t}}),n.LightShadow=function(e){this.camera=e,this.bias=0,this.radius=1,this.mapSize=new n.Vector2(512,512),this.map=null,this.matrix=new n.Matrix4},Object.assign(n.LightShadow.prototype,{copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return(new this.constructor).copy(this)}}),n.AmbientLight=function(e,t){n.Light.call(this,e,t),this.type="AmbientLight",this.castShadow=void 0},n.AmbientLight.prototype=Object.assign(Object.create(n.Light.prototype),{constructor:n.AmbientLight}),n.DirectionalLight=function(e,t){n.Light.call(this,e,t),this.type="DirectionalLight",this.position.copy(n.Object3D.DefaultUp),this.updateMatrix(),this.target=new n.Object3D,this.shadow=new n.DirectionalLightShadow},n.DirectionalLight.prototype=Object.assign(Object.create(n.Light.prototype),{constructor:n.DirectionalLight,copy:function(e){return n.Light.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),n.DirectionalLightShadow=function(e){n.LightShadow.call(this,new n.OrthographicCamera((-5),5,5,(-5),.5,500))},n.DirectionalLightShadow.prototype=Object.assign(Object.create(n.LightShadow.prototype),{constructor:n.DirectionalLightShadow}),n.HemisphereLight=function(e,t,r){n.Light.call(this,e,r),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(n.Object3D.DefaultUp),this.updateMatrix(),this.groundColor=new n.Color(t)},n.HemisphereLight.prototype=Object.assign(Object.create(n.Light.prototype),{constructor:n.HemisphereLight,copy:function(e){return n.Light.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}),n.PointLight=function(e,t,r,i){
n.Light.call(this,e,t),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}}),this.distance=void 0!==r?r:0,this.decay=void 0!==i?i:1,this.shadow=new n.LightShadow(new n.PerspectiveCamera(90,1,.5,500))},n.PointLight.prototype=Object.assign(Object.create(n.Light.prototype),{constructor:n.PointLight,copy:function(e){return n.Light.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}),n.SpotLight=function(e,t,r,i,o,a){n.Light.call(this,e,t),this.type="SpotLight",this.position.copy(n.Object3D.DefaultUp),this.updateMatrix(),this.target=new n.Object3D,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}}),this.distance=void 0!==r?r:0,this.angle=void 0!==i?i:Math.PI/3,this.penumbra=void 0!==o?o:0,this.decay=void 0!==a?a:1,this.shadow=new n.SpotLightShadow},n.SpotLight.prototype=Object.assign(Object.create(n.Light.prototype),{constructor:n.SpotLight,copy:function(e){return n.Light.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),n.SpotLightShadow=function(){n.LightShadow.call(this,new n.PerspectiveCamera(50,1,.5,500))},n.SpotLightShadow.prototype=Object.assign(Object.create(n.LightShadow.prototype),{constructor:n.SpotLightShadow,update:function(e){var t=2*n.Math.RAD2DEG*e.angle,r=this.mapSize.width/this.mapSize.height,i=e.distance||500,o=this.camera;t===o.fov&&r===o.aspect&&i===o.far||(o.fov=t,o.aspect=r,o.far=i,o.updateProjectionMatrix())}}),n.AudioLoader=function(e){this.manager=void 0!==e?e:n.DefaultLoadingManager},Object.assign(n.AudioLoader.prototype,{load:function(e,t,r,i){var o=new n.XHRLoader(this.manager);o.setResponseType("arraybuffer"),o.load(e,function(e){var r=n.AudioContext;r.decodeAudioData(e,function(e){t(e)})},r,i)}}),n.Cache={enabled:!1,files:{},add:function(e,t){this.enabled!==!1&&(this.files[e]=t)},get:function(e){if(this.enabled!==!1)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}},n.Loader=function(){this.onLoadStart=function(){},this.onLoadProgress=function(){},this.onLoadComplete=function(){}},n.Loader.prototype={constructor:n.Loader,crossOrigin:void 0,extractUrlBase:function(e){var t=e.split("/");return 1===t.length?"./":(t.pop(),t.join("/")+"/")},initMaterials:function(e,t,r){for(var n=[],i=0;i<e.length;++i)n[i]=this.createMaterial(e[i],t,r);return n},createMaterial:function(){var e,t,r;return function(i,o,a){function s(e,r,i,s,l){var u,h=o+e,p=n.Loader.Handlers.get(h);null!==p?u=p.load(h):(t.setCrossOrigin(a),u=t.load(h)),void 0!==r&&(u.repeat.fromArray(r),1!==r[0]&&(u.wrapS=n.RepeatWrapping),1!==r[1]&&(u.wrapT=n.RepeatWrapping)),void 0!==i&&u.offset.fromArray(i),void 0!==s&&("repeat"===s[0]&&(u.wrapS=n.RepeatWrapping),"mirror"===s[0]&&(u.wrapS=n.MirroredRepeatWrapping),"repeat"===s[1]&&(u.wrapT=n.RepeatWrapping),"mirror"===s[1]&&(u.wrapT=n.MirroredRepeatWrapping)),void 0!==l&&(u.anisotropy=l);var d=n.Math.generateUUID();return c[d]=u,d}void 0===e&&(e=new n.Color),void 0===t&&(t=new n.TextureLoader),void 0===r&&(r=new n.MaterialLoader);var c={},l={uuid:n.Math.generateUUID(),type:"MeshLambertMaterial"};for(var u in i){var h=i[u];switch(u){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":l.name=h;break;case"blending":l.blending=n[h];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",u,"is no longer supported.");break;case"colorDiffuse":l.color=e.fromArray(h).getHex();break;case"colorSpecular":l.specular=e.fromArray(h).getHex();break;case"colorEmissive":l.emissive=e.fromArray(h).getHex();break;case"specularCoef":l.shininess=h;break;case"shading":"basic"===h.toLowerCase()&&(l.type="MeshBasicMaterial"),"phong"===h.toLowerCase()&&(l.type="MeshPhongMaterial"),"standard"===h.toLowerCase()&&(l.type="MeshStandardMaterial");break;case"mapDiffuse":l.map=s(h,i.mapDiffuseRepeat,i.mapDiffuseOffset,i.mapDiffuseWrap,i.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":l.emissiveMap=s(h,i.mapEmissiveRepeat,i.mapEmissiveOffset,i.mapEmissiveWrap,i.mapEmissiveAnisotropy);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":l.lightMap=s(h,i.mapLightRepeat,i.mapLightOffset,i.mapLightWrap,i.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":l.aoMap=s(h,i.mapAORepeat,i.mapAOOffset,i.mapAOWrap,i.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":l.bumpMap=s(h,i.mapBumpRepeat,i.mapBumpOffset,i.mapBumpWrap,i.mapBumpAnisotropy);break;case"mapBumpScale":l.bumpScale=h;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":l.normalMap=s(h,i.mapNormalRepeat,i.mapNormalOffset,i.mapNormalWrap,i.mapNormalAnisotropy);break;case"mapNormalFactor":l.normalScale=[h,h];break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":l.specularMap=s(h,i.mapSpecularRepeat,i.mapSpecularOffset,i.mapSpecularWrap,i.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":l.metalnessMap=s(h,i.mapMetalnessRepeat,i.mapMetalnessOffset,i.mapMetalnessWrap,i.mapMetalnessAnisotropy);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":l.roughnessMap=s(h,i.mapRoughnessRepeat,i.mapRoughnessOffset,i.mapRoughnessWrap,i.mapRoughnessAnisotropy);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":l.alphaMap=s(h,i.mapAlphaRepeat,i.mapAlphaOffset,i.mapAlphaWrap,i.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":l.side=n.BackSide;break;case"doubleSided":l.side=n.DoubleSide;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),l.opacity=h;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":l[u]=h;break;case"vertexColors":h===!0&&(l.vertexColors=n.VertexColors),"face"===h&&(l.vertexColors=n.FaceColors);break;default:console.error("THREE.Loader.createMaterial: Unsupported",u,h)}}return"MeshBasicMaterial"===l.type&&delete l.emissive,"MeshPhongMaterial"!==l.type&&delete l.specular,l.opacity<1&&(l.transparent=!0),r.setTextures(c),r.parse(l)}}()},n.Loader.Handlers={handlers:[],add:function(e,t){this.handlers.push(e,t)},get:function(e){for(var t=this.handlers,r=0,n=t.length;r<n;r+=2){var i=t[r],o=t[r+1];if(i.test(e))return o}return null}},n.XHRLoader=function(e){this.manager=void 0!==e?e:n.DefaultLoadingManager},Object.assign(n.XHRLoader.prototype,{load:function(e,t,r,i){void 0!==this.path&&(e=this.path+e);var o=this,a=n.Cache.get(e);if(void 0!==a)return o.manager.itemStart(e),setTimeout(function(){t&&t(a),o.manager.itemEnd(e)},0),a;var s=new XMLHttpRequest;return s.overrideMimeType("text/plain"),s.open("GET",e,!0),s.addEventListener("load",function(r){var a=r.target.response;n.Cache.add(e,a),200===this.status?(t&&t(a),o.manager.itemEnd(e)):0===this.status?(console.warn("THREE.XHRLoader: HTTP Status 0 received."),t&&t(a),o.manager.itemEnd(e)):(i&&i(r),o.manager.itemError(e))},!1),void 0!==r&&s.addEventListener("progress",function(e){r(e)},!1),s.addEventListener("error",function(t){i&&i(t),o.manager.itemError(e)},!1),void 0!==this.responseType&&(s.responseType=this.responseType),void 0!==this.withCredentials&&(s.withCredentials=this.withCredentials),s.send(null),o.manager.itemStart(e),s},setPath:function(e){return this.path=e,this},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this}}),n.FontLoader=function(e){this.manager=void 0!==e?e:n.DefaultLoadingManager},Object.assign(n.FontLoader.prototype,{load:function(e,t,r,i){var o=this,a=new n.XHRLoader(this.manager);a.load(e,function(e){var r;try{r=JSON.parse(e)}catch(n){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),r=JSON.parse(e.substring(65,e.length-2))}var i=o.parse(r);t&&t(i)},r,i)},parse:function(e){return new n.Font(e)}}),n.ImageLoader=function(e){this.manager=void 0!==e?e:n.DefaultLoadingManager},Object.assign(n.ImageLoader.prototype,{load:function(e,t,r,i){var o=this,a=document.createElementNS("http://www.w3.org/1999/xhtml","img");if(a.onload=function(){URL.revokeObjectURL(a.src),t&&t(a),o.manager.itemEnd(e)},0===e.indexOf("data:"))a.src=e;else{var s=new n.XHRLoader;s.setPath(this.path),s.setResponseType("blob"),s.load(e,function(e){a.src=URL.createObjectURL(e)},r,i)}return o.manager.itemStart(e),a},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),n.JSONLoader=function(e){"boolean"==typeof e&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),e=void 0),this.manager=void 0!==e?e:n.DefaultLoadingManager,this.withCredentials=!1},Object.assign(n.JSONLoader.prototype,{load:function(e,t,r,i){var o=this,a=this.texturePath&&"string"==typeof this.texturePath?this.texturePath:n.Loader.prototype.extractUrlBase(e),s=new n.XHRLoader(this.manager);s.setWithCredentials(this.withCredentials),s.load(e,function(r){var n=JSON.parse(r),i=n.metadata;if(void 0!==i){var s=i.type;if(void 0!==s){if("object"===s.toLowerCase())return void console.error("THREE.JSONLoader: "+e+" should be loaded with THREE.ObjectLoader instead.");if("scene"===s.toLowerCase())return void console.error("THREE.JSONLoader: "+e+" should be loaded with THREE.SceneLoader instead.")}}var c=o.parse(n,a);t(c.geometry,c.materials)},r,i)},setTexturePath:function(e){this.texturePath=e},parse:function(e,t){function r(t){function r(e,t){return e&1<<t}var i,o,a,c,l,u,h,p,d,f,m,v,g,y,x,b,w,_,M,S,T,E,A,C,L,P,R,D=e.faces,I=e.vertices,B=e.normals,O=e.colors,F=0;if(void 0!==e.uvs){for(i=0;i<e.uvs.length;i++)e.uvs[i].length&&F++;for(i=0;i<F;i++)s.faceVertexUvs[i]=[]}for(c=0,l=I.length;c<l;)_=new n.Vector3,_.x=I[c++]*t,_.y=I[c++]*t,_.z=I[c++]*t,s.vertices.push(_);for(c=0,l=D.length;c<l;)if(f=D[c++],m=r(f,0),v=r(f,1),g=r(f,3),y=r(f,4),x=r(f,5),b=r(f,6),w=r(f,7),m){if(S=new n.Face3,S.a=D[c],S.b=D[c+1],S.c=D[c+3],T=new n.Face3,T.a=D[c+1],T.b=D[c+2],T.c=D[c+3],c+=4,v&&(d=D[c++],S.materialIndex=d,T.materialIndex=d),a=s.faces.length,g)for(i=0;i<F;i++)for(C=e.uvs[i],s.faceVertexUvs[i][a]=[],s.faceVertexUvs[i][a+1]=[],o=0;o<4;o++)p=D[c++],P=C[2*p],R=C[2*p+1],L=new n.Vector2(P,R),2!==o&&s.faceVertexUvs[i][a].push(L),0!==o&&s.faceVertexUvs[i][a+1].push(L);if(y&&(h=3*D[c++],S.normal.set(B[h++],B[h++],B[h]),T.normal.copy(S.normal)),x)for(i=0;i<4;i++)h=3*D[c++],A=new n.Vector3(B[h++],B[h++],B[h]),2!==i&&S.vertexNormals.push(A),0!==i&&T.vertexNormals.push(A);if(b&&(u=D[c++],E=O[u],S.color.setHex(E),T.color.setHex(E)),w)for(i=0;i<4;i++)u=D[c++],E=O[u],2!==i&&S.vertexColors.push(new n.Color(E)),0!==i&&T.vertexColors.push(new n.Color(E));s.faces.push(S),s.faces.push(T)}else{if(M=new n.Face3,M.a=D[c++],M.b=D[c++],M.c=D[c++],v&&(d=D[c++],M.materialIndex=d),a=s.faces.length,g)for(i=0;i<F;i++)for(C=e.uvs[i],s.faceVertexUvs[i][a]=[],o=0;o<3;o++)p=D[c++],P=C[2*p],R=C[2*p+1],L=new n.Vector2(P,R),s.faceVertexUvs[i][a].push(L);if(y&&(h=3*D[c++],M.normal.set(B[h++],B[h++],B[h])),x)for(i=0;i<3;i++)h=3*D[c++],A=new n.Vector3(B[h++],B[h++],B[h]),M.vertexNormals.push(A);if(b&&(u=D[c++],M.color.setHex(O[u])),w)for(i=0;i<3;i++)u=D[c++],M.vertexColors.push(new n.Color(O[u]));s.faces.push(M)}}function i(){var t=void 0!==e.influencesPerVertex?e.influencesPerVertex:2;if(e.skinWeights)for(var r=0,i=e.skinWeights.length;r<i;r+=t){var o=e.skinWeights[r],a=t>1?e.skinWeights[r+1]:0,c=t>2?e.skinWeights[r+2]:0,l=t>3?e.skinWeights[r+3]:0;s.skinWeights.push(new n.Vector4(o,a,c,l))}if(e.skinIndices)for(var r=0,i=e.skinIndices.length;r<i;r+=t){var u=e.skinIndices[r],h=t>1?e.skinIndices[r+1]:0,p=t>2?e.skinIndices[r+2]:0,d=t>3?e.skinIndices[r+3]:0;s.skinIndices.push(new n.Vector4(u,h,p,d))}s.bones=e.bones,s.bones&&s.bones.length>0&&(s.skinWeights.length!==s.skinIndices.length||s.skinIndices.length!==s.vertices.length)&&console.warn("When skinning, number of vertices ("+s.vertices.length+"), skinIndices ("+s.skinIndices.length+"), and skinWeights ("+s.skinWeights.length+") should match.")}function o(t){if(void 0!==e.morphTargets)for(var r=0,i=e.morphTargets.length;r<i;r++){s.morphTargets[r]={},s.morphTargets[r].name=e.morphTargets[r].name,s.morphTargets[r].vertices=[];for(var o=s.morphTargets[r].vertices,a=e.morphTargets[r].vertices,c=0,l=a.length;c<l;c+=3){var u=new n.Vector3;u.x=a[c]*t,u.y=a[c+1]*t,u.z=a[c+2]*t,o.push(u)}}if(void 0!==e.morphColors&&e.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');for(var h=s.faces,p=e.morphColors[0].colors,r=0,i=h.length;r<i;r++)h[r].color.fromArray(p,3*r)}}function a(){var t=[],r=[];void 0!==e.animation&&r.push(e.animation),void 0!==e.animations&&(e.animations.length?r=r.concat(e.animations):r.push(e.animations));for(var i=0;i<r.length;i++){var o=n.AnimationClip.parseAnimation(r[i],s.bones);o&&t.push(o)}if(s.morphTargets){var a=n.AnimationClip.CreateClipsFromMorphTargetSequences(s.morphTargets,10);t=t.concat(a)}t.length>0&&(s.animations=t)}var s=new n.Geometry,c=void 0!==e.scale?1/e.scale:1;if(r(c),i(),o(c),a(),s.computeFaceNormals(),s.computeBoundingSphere(),void 0===e.materials||0===e.materials.length)return{geometry:s};var l=n.Loader.prototype.initMaterials(e.materials,t,this.crossOrigin);return{geometry:s,materials:l}}}),n.LoadingManager=function(e,t,r){var n=this,i=!1,o=0,a=0;this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=r,this.itemStart=function(e){a++,i===!1&&void 0!==n.onStart&&n.onStart(e,o,a),i=!0},this.itemEnd=function(e){o++,void 0!==n.onProgress&&n.onProgress(e,o,a),o===a&&(i=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(e){void 0!==n.onError&&n.onError(e)}},n.DefaultLoadingManager=new n.LoadingManager,n.BufferGeometryLoader=function(e){this.manager=void 0!==e?e:n.DefaultLoadingManager},Object.assign(n.BufferGeometryLoader.prototype,{load:function(e,t,r,i){var o=this,a=new n.XHRLoader(o.manager);a.load(e,function(e){t(o.parse(JSON.parse(e)))},r,i)},parse:function(e){var t=new n.BufferGeometry,r=e.data.index,i={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};if(void 0!==r){var o=new i[r.type](r.array);t.setIndex(new n.BufferAttribute(o,1))}var a=e.data.attributes;for(var s in a){var c=a[s],o=new i[c.type](c.array);t.addAttribute(s,new n.BufferAttribute(o,c.itemSize,c.normalized))}var l=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==l)for(var u=0,h=l.length;u!==h;++u){var p=l[u];t.addGroup(p.start,p.count,p.materialIndex)}var d=e.data.boundingSphere;if(void 0!==d){var f=new n.Vector3;void 0!==d.center&&f.fromArray(d.center),t.boundingSphere=new n.Sphere(f,d.radius)}return t}}),n.MaterialLoader=function(e){this.manager=void 0!==e?e:n.DefaultLoadingManager,this.textures={}},Object.assign(n.MaterialLoader.prototype,{load:function(e,t,r,i){var o=this,a=new n.XHRLoader(o.manager);a.load(e,function(e){t(o.parse(JSON.parse(e)))},r,i)},setTextures:function(e){this.textures=e},getTexture:function(e){var t=this.textures;return void 0===t[e]&&console.warn("THREE.MaterialLoader: Undefined texture",e),t[e]},parse:function(e){var t=new n[e.type];if(void 0!==e.uuid&&(t.uuid=e.uuid),void 0!==e.name&&(t.name=e.name),void 0!==e.color&&t.color.setHex(e.color),void 0!==e.roughness&&(t.roughness=e.roughness),void 0!==e.metalness&&(t.metalness=e.metalness),void 0!==e.emissive&&t.emissive.setHex(e.emissive),void 0!==e.specular&&t.specular.setHex(e.specular),void 0!==e.shininess&&(t.shininess=e.shininess),void 0!==e.uniforms&&(t.uniforms=e.uniforms),void 0!==e.vertexShader&&(t.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(t.fragmentShader=e.fragmentShader),void 0!==e.vertexColors&&(t.vertexColors=e.vertexColors),void 0!==e.shading&&(t.shading=e.shading),void 0!==e.blending&&(t.blending=e.blending),void 0!==e.side&&(t.side=e.side),void 0!==e.opacity&&(t.opacity=e.opacity),void 0!==e.transparent&&(t.transparent=e.transparent),void 0!==e.alphaTest&&(t.alphaTest=e.alphaTest),void 0!==e.depthTest&&(t.depthTest=e.depthTest),void 0!==e.depthWrite&&(t.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(t.colorWrite=e.colorWrite),void 0!==e.wireframe&&(t.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(t.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.size&&(t.size=e.size),void 0!==e.sizeAttenuation&&(t.sizeAttenuation=e.sizeAttenuation),void 0!==e.map&&(t.map=this.getTexture(e.map)),void 0!==e.alphaMap&&(t.alphaMap=this.getTexture(e.alphaMap),t.transparent=!0),void 0!==e.bumpMap&&(t.bumpMap=this.getTexture(e.bumpMap)),void 0!==e.bumpScale&&(t.bumpScale=e.bumpScale),void 0!==e.normalMap&&(t.normalMap=this.getTexture(e.normalMap)),void 0!==e.normalScale){var r=e.normalScale;Array.isArray(r)===!1&&(r=[r,r]),t.normalScale=(new n.Vector2).fromArray(r)}if(void 0!==e.displacementMap&&(t.displacementMap=this.getTexture(e.displacementMap)),void 0!==e.displacementScale&&(t.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(t.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(t.roughnessMap=this.getTexture(e.roughnessMap)),void 0!==e.metalnessMap&&(t.metalnessMap=this.getTexture(e.metalnessMap)),void 0!==e.emissiveMap&&(t.emissiveMap=this.getTexture(e.emissiveMap)),void 0!==e.emissiveIntensity&&(t.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(t.specularMap=this.getTexture(e.specularMap)),void 0!==e.envMap&&(t.envMap=this.getTexture(e.envMap),t.combine=n.MultiplyOperation),void 0!==e.reflectivity&&(t.reflectivity=e.reflectivity),void 0!==e.lightMap&&(t.lightMap=this.getTexture(e.lightMap)),void 0!==e.lightMapIntensity&&(t.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(t.aoMap=this.getTexture(e.aoMap)),void 0!==e.aoMapIntensity&&(t.aoMapIntensity=e.aoMapIntensity),void 0!==e.materials)for(var i=0,o=e.materials.length;i<o;i++)t.materials.push(this.parse(e.materials[i]));return t}}),n.ObjectLoader=function(e){this.manager=void 0!==e?e:n.DefaultLoadingManager,this.texturePath=""},Object.assign(n.ObjectLoader.prototype,{load:function(e,t,r,i){""===this.texturePath&&(this.texturePath=e.substring(0,e.lastIndexOf("/")+1));var o=this,a=new n.XHRLoader(o.manager);a.load(e,function(e){o.parse(JSON.parse(e),t)},r,i)},setTexturePath:function(e){this.texturePath=e},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e,t){var r=this.parseGeometries(e.geometries),n=this.parseImages(e.images,function(){void 0!==t&&t(a)}),i=this.parseTextures(e.textures,n),o=this.parseMaterials(e.materials,i),a=this.parseObject(e.object,r,o);return e.animations&&(a.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(a),a},parseGeometries:function(e){var t={};if(void 0!==e)for(var r=new n.JSONLoader,i=new n.BufferGeometryLoader,o=0,a=e.length;o<a;o++){var s,c=e[o];switch(c.type){case"PlaneGeometry":case"PlaneBufferGeometry":s=new n[c.type](c.width,c.height,c.widthSegments,c.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":s=new n[c.type](c.width,c.height,c.depth,c.widthSegments,c.heightSegments,c.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":s=new n[c.type](c.radius,c.segments,c.thetaStart,c.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":s=new n[c.type](c.radiusTop,c.radiusBottom,c.height,c.radialSegments,c.heightSegments,c.openEnded,c.thetaStart,c.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":s=new n[c.type](c.radius,c.height,c.radialSegments,c.heightSegments,c.openEnded,c.thetaStart,c.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":s=new n[c.type](c.radius,c.widthSegments,c.heightSegments,c.phiStart,c.phiLength,c.thetaStart,c.thetaLength);break;case"DodecahedronGeometry":case"IcosahedronGeometry":case"OctahedronGeometry":case"TetrahedronGeometry":s=new n[c.type](c.radius,c.detail);break;case"RingGeometry":case"RingBufferGeometry":s=new n[c.type](c.innerRadius,c.outerRadius,c.thetaSegments,c.phiSegments,c.thetaStart,c.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":s=new n[c.type](c.radius,c.tube,c.radialSegments,c.tubularSegments,c.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":s=new n[c.type](c.radius,c.tube,c.tubularSegments,c.radialSegments,c.p,c.q);break;case"LatheGeometry":case"LatheBufferGeometry":s=new n[c.type](c.points,c.segments,c.phiStart,c.phiLength);break;case"BufferGeometry":s=i.parse(c);break;case"Geometry":s=r.parse(c.data,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+c.type+'"');continue}s.uuid=c.uuid,void 0!==c.name&&(s.name=c.name),t[c.uuid]=s}return t},parseMaterials:function(e,t){var r={};if(void 0!==e){var i=new n.MaterialLoader;i.setTextures(t);for(var o=0,a=e.length;o<a;o++){var s=i.parse(e[o]);r[s.uuid]=s}}return r},parseAnimations:function(e){for(var t=[],r=0;r<e.length;r++){var i=n.AnimationClip.parse(e[r]);t.push(i)}return t},parseImages:function(e,t){function r(e){return i.manager.itemStart(e),s.load(e,function(){i.manager.itemEnd(e)})}var i=this,o={};if(void 0!==e&&e.length>0){var a=new n.LoadingManager(t),s=new n.ImageLoader(a);s.setCrossOrigin(this.crossOrigin);for(var c=0,l=e.length;c<l;c++){var u=e[c],h=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(u.url)?u.url:i.texturePath+u.url;o[u.uuid]=r(h)}}return o},parseTextures:function(e,t){function r(e){return"number"==typeof e?e:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e),n[e])}var i={};if(void 0!==e)for(var o=0,a=e.length;o<a;o++){var s=e[o];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===t[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image);var c=new n.Texture(t[s.image]);c.needsUpdate=!0,c.uuid=s.uuid,void 0!==s.name&&(c.name=s.name),void 0!==s.mapping&&(c.mapping=r(s.mapping)),void 0!==s.offset&&c.offset.fromArray(s.offset),void 0!==s.repeat&&c.repeat.fromArray(s.repeat),void 0!==s.wrap&&(c.wrapS=r(s.wrap[0]),c.wrapT=r(s.wrap[1])),void 0!==s.minFilter&&(c.minFilter=r(s.minFilter)),void 0!==s.magFilter&&(c.magFilter=r(s.magFilter)),void 0!==s.anisotropy&&(c.anisotropy=s.anisotropy),void 0!==s.flipY&&(c.flipY=s.flipY),i[s.uuid]=c}return i},parseObject:function(){var e=new n.Matrix4;return function(t,r,i){function o(e){return void 0===r[e]&&console.warn("THREE.ObjectLoader: Undefined geometry",e),r[e]}function a(e){if(void 0!==e)return void 0===i[e]&&console.warn("THREE.ObjectLoader: Undefined material",e),i[e]}var s;switch(t.type){case"Scene":s=new n.Scene;break;case"PerspectiveCamera":s=new n.PerspectiveCamera(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(s.focus=t.focus),void 0!==t.zoom&&(s.zoom=t.zoom),void 0!==t.filmGauge&&(s.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(s.filmOffset=t.filmOffset),void 0!==t.view&&(s.view=Object.assign({},t.view));break;case"OrthographicCamera":s=new n.OrthographicCamera(t.left,t.right,t.top,t.bottom,t.near,t.far);break;case"AmbientLight":s=new n.AmbientLight(t.color,t.intensity);break;case"DirectionalLight":s=new n.DirectionalLight(t.color,t.intensity);break;case"PointLight":s=new n.PointLight(t.color,t.intensity,t.distance,t.decay);break;case"SpotLight":s=new n.SpotLight(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":s=new n.HemisphereLight(t.color,t.groundColor,t.intensity);break;case"Mesh":var c=o(t.geometry),l=a(t.material);s=c.bones&&c.bones.length>0?new n.SkinnedMesh(c,l):new n.Mesh(c,l);break;case"LOD":s=new n.LOD;break;case"Line":s=new n.Line(o(t.geometry),a(t.material),t.mode);break;case"PointCloud":case"Points":s=new n.Points(o(t.geometry),a(t.material));break;case"Sprite":s=new n.Sprite(a(t.material));break;case"Group":s=new n.Group;break;default:s=new n.Object3D}if(s.uuid=t.uuid,void 0!==t.name&&(s.name=t.name),void 0!==t.matrix?(e.fromArray(t.matrix),e.decompose(s.position,s.quaternion,s.scale)):(void 0!==t.position&&s.position.fromArray(t.position),void 0!==t.rotation&&s.rotation.fromArray(t.rotation),void 0!==t.scale&&s.scale.fromArray(t.scale)),void 0!==t.castShadow&&(s.castShadow=t.castShadow),void 0!==t.receiveShadow&&(s.receiveShadow=t.receiveShadow),void 0!==t.visible&&(s.visible=t.visible),void 0!==t.userData&&(s.userData=t.userData),void 0!==t.children)for(var u in t.children)s.add(this.parseObject(t.children[u],r,i));if("LOD"===t.type)for(var h=t.levels,p=0;p<h.length;p++){var d=h[p],u=s.getObjectByProperty("uuid",d.object);void 0!==u&&s.addLevel(u,d.distance)}return s}}()}),n.TextureLoader=function(e){this.manager=void 0!==e?e:n.DefaultLoadingManager},Object.assign(n.TextureLoader.prototype,{load:function(e,t,r,i){var o=new n.Texture,a=new n.ImageLoader(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,function(r){var i=e.search(/\.(jpg|jpeg)$/)>0||0===e.search(/^data\:image\/jpeg/);o.format=i?n.RGBFormat:n.RGBAFormat,o.image=r,o.needsUpdate=!0,void 0!==t&&t(o)},r,i),o},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),n.CubeTextureLoader=function(e){this.manager=void 0!==e?e:n.DefaultLoadingManager},Object.assign(n.CubeTextureLoader.prototype,{load:function(e,t,r,i){function o(r){s.load(e[r],function(e){a.images[r]=e,c++,6===c&&(a.needsUpdate=!0,t&&t(a))},void 0,i)}var a=new n.CubeTexture,s=new n.ImageLoader(this.manager);s.setCrossOrigin(this.crossOrigin),s.setPath(this.path);for(var c=0,l=0;l<e.length;++l)o(l);return a},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),n.DataTextureLoader=n.BinaryTextureLoader=function(e){this.manager=void 0!==e?e:n.DefaultLoadingManager,this._parser=null},Object.assign(n.BinaryTextureLoader.prototype,{load:function(e,t,r,i){var o=this,a=new n.DataTexture,s=new n.XHRLoader(this.manager);return s.setResponseType("arraybuffer"),s.load(e,function(e){var r=o._parser(e);r&&(void 0!==r.image?a.image=r.image:void 0!==r.data&&(a.image.width=r.width,a.image.height=r.height,a.image.data=r.data),a.wrapS=void 0!==r.wrapS?r.wrapS:n.ClampToEdgeWrapping,a.wrapT=void 0!==r.wrapT?r.wrapT:n.ClampToEdgeWrapping,a.magFilter=void 0!==r.magFilter?r.magFilter:n.LinearFilter,a.minFilter=void 0!==r.minFilter?r.minFilter:n.LinearMipMapLinearFilter,a.anisotropy=void 0!==r.anisotropy?r.anisotropy:1,void 0!==r.format&&(a.format=r.format),void 0!==r.type&&(a.type=r.type),void 0!==r.mipmaps&&(a.mipmaps=r.mipmaps),1===r.mipmapCount&&(a.minFilter=n.LinearFilter),a.needsUpdate=!0,t&&t(a,r))},r,i),a}}),n.CompressedTextureLoader=function(e){this.manager=void 0!==e?e:n.DefaultLoadingManager,this._parser=null},Object.assign(n.CompressedTextureLoader.prototype,{load:function(e,t,r,i){function o(o){l.load(e[o],function(e){var r=a._parser(e,!0);s[o]={width:r.width,height:r.height,format:r.format,mipmaps:r.mipmaps},u+=1,6===u&&(1===r.mipmapCount&&(c.minFilter=n.LinearFilter),c.format=r.format,c.needsUpdate=!0,t&&t(c))},r,i)}var a=this,s=[],c=new n.CompressedTexture;c.image=s;var l=new n.XHRLoader(this.manager);if(l.setPath(this.path),l.setResponseType("arraybuffer"),Array.isArray(e))for(var u=0,h=0,p=e.length;h<p;++h)o(h);else l.load(e,function(e){var r=a._parser(e,!0);if(r.isCubemap)for(var i=r.mipmaps.length/r.mipmapCount,o=0;o<i;o++){s[o]={mipmaps:[]};for(var l=0;l<r.mipmapCount;l++)s[o].mipmaps.push(r.mipmaps[o*r.mipmapCount+l]),s[o].format=r.format,s[o].width=r.width,s[o].height=r.height}else c.image.width=r.width,c.image.height=r.height,c.mipmaps=r.mipmaps;1===r.mipmapCount&&(c.minFilter=n.LinearFilter),c.format=r.format,c.needsUpdate=!0,t&&t(c)},r,i);return c},setPath:function(e){return this.path=e,this}}),n.Material=function(){Object.defineProperty(this,"id",{value:n.MaterialIdCount++}),this.uuid=n.Math.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=n.NormalBlending,this.side=n.FrontSide,this.shading=n.SmoothShading,this.vertexColors=n.NoColors,this.opacity=1,this.transparent=!1,this.blendSrc=n.SrcAlphaFactor,this.blendDst=n.OneMinusSrcAlphaFactor,this.blendEquation=n.AddEquation,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=n.LessEqualDepth,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipShadows=!1,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.alphaTest=0,this.premultipliedAlpha=!1,this.overdraw=0,this.visible=!0,this._needsUpdate=!0},n.Material.prototype={constructor:n.Material,get needsUpdate(){return this._needsUpdate},set needsUpdate(e){e===!0&&this.update(),this._needsUpdate=e},setValues:function(e){if(void 0!==e)for(var t in e){var r=e[t];if(void 0!==r){var i=this[t];void 0!==i?i instanceof n.Color?i.set(r):i instanceof n.Vector3&&r instanceof n.Vector3?i.copy(r):"overdraw"===t?this[t]=Number(r):this[t]=r:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}else console.warn("THREE.Material: '"+t+"' parameter is undefined.")}},toJSON:function(e){function t(e){var t=[];for(var r in e){var n=e[r];delete n.metadata,t.push(n)}return t}var r=void 0===e;r&&(e={textures:{},images:{}});var i={metadata:{version:4.4,type:"Material",generator:"Material.toJSON"}};if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),this.color instanceof n.Color&&(i.color=this.color.getHex()),void 0!==this.roughness&&(i.roughness=this.roughness),void 0!==this.metalness&&(i.metalness=this.metalness),this.emissive instanceof n.Color&&(i.emissive=this.emissive.getHex()),this.specular instanceof n.Color&&(i.specular=this.specular.getHex()),void 0!==this.shininess&&(i.shininess=this.shininess),this.map instanceof n.Texture&&(i.map=this.map.toJSON(e).uuid),this.alphaMap instanceof n.Texture&&(i.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap instanceof n.Texture&&(i.lightMap=this.lightMap.toJSON(e).uuid),this.bumpMap instanceof n.Texture&&(i.bumpMap=this.bumpMap.toJSON(e).uuid,i.bumpScale=this.bumpScale),this.normalMap instanceof n.Texture&&(i.normalMap=this.normalMap.toJSON(e).uuid,i.normalScale=this.normalScale.toArray()),this.displacementMap instanceof n.Texture&&(i.displacementMap=this.displacementMap.toJSON(e).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap instanceof n.Texture&&(i.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap instanceof n.Texture&&(i.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap instanceof n.Texture&&(i.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap instanceof n.Texture&&(i.specularMap=this.specularMap.toJSON(e).uuid),this.envMap instanceof n.Texture&&(i.envMap=this.envMap.toJSON(e).uuid,i.reflectivity=this.reflectivity),void 0!==this.size&&(i.size=this.size),void 0!==this.sizeAttenuation&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==n.NormalBlending&&(i.blending=this.blending),this.shading!==n.SmoothShading&&(i.shading=this.shading),this.side!==n.FrontSide&&(i.side=this.side),
this.vertexColors!==n.NoColors&&(i.vertexColors=this.vertexColors),this.opacity<1&&(i.opacity=this.opacity),this.transparent===!0&&(i.transparent=this.transparent),this.alphaTest>0&&(i.alphaTest=this.alphaTest),this.premultipliedAlpha===!0&&(i.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(i.wireframe=this.wireframe),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),r){var o=t(e.textures),a=t(e.images);o.length>0&&(i.textures=o),a.length>0&&(i.images=a)}return i},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.lights=e.lights,this.blending=e.blending,this.side=e.side,this.shading=e.shading,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.overdraw=e.overdraw,this.visible=e.visible,this.clipShadows=e.clipShadows;var t=e.clippingPlanes,r=null;if(null!==t){var n=t.length;r=new Array(n);for(var i=0;i!==n;++i)r[i]=t[i].clone()}return this.clippingPlanes=r,this},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}},Object.assign(n.Material.prototype,n.EventDispatcher.prototype),n.MaterialIdCount=0,n.LineBasicMaterial=function(e){n.Material.call(this),this.type="LineBasicMaterial",this.color=new n.Color(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(e)},n.LineBasicMaterial.prototype=Object.create(n.Material.prototype),n.LineBasicMaterial.prototype.constructor=n.LineBasicMaterial,n.LineBasicMaterial.prototype.copy=function(e){return n.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this},n.LineDashedMaterial=function(e){n.Material.call(this),this.type="LineDashedMaterial",this.color=new n.Color(16777215),this.linewidth=1,this.scale=1,this.dashSize=3,this.gapSize=1,this.lights=!1,this.setValues(e)},n.LineDashedMaterial.prototype=Object.create(n.Material.prototype),n.LineDashedMaterial.prototype.constructor=n.LineDashedMaterial,n.LineDashedMaterial.prototype.copy=function(e){return n.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this},n.MeshBasicMaterial=function(e){n.Material.call(this),this.type="MeshBasicMaterial",this.color=new n.Color(16777215),this.map=null,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=n.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(e)},n.MeshBasicMaterial.prototype=Object.create(n.Material.prototype),n.MeshBasicMaterial.prototype.constructor=n.MeshBasicMaterial,n.MeshBasicMaterial.prototype.copy=function(e){return n.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this},n.MeshDepthMaterial=function(e){n.Material.call(this),this.type="MeshDepthMaterial",this.depthPacking=n.BasicDepthPacking,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(e)},n.MeshDepthMaterial.prototype=Object.create(n.Material.prototype),n.MeshDepthMaterial.prototype.constructor=n.MeshDepthMaterial,n.MeshDepthMaterial.prototype.copy=function(e){return n.Material.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},n.MeshLambertMaterial=function(e){n.Material.call(this),this.type="MeshLambertMaterial",this.color=new n.Color(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new n.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=n.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)},n.MeshLambertMaterial.prototype=Object.create(n.Material.prototype),n.MeshLambertMaterial.prototype.constructor=n.MeshLambertMaterial,n.MeshLambertMaterial.prototype.copy=function(e){return n.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},n.MeshNormalMaterial=function(e){n.Material.call(this,e),this.type="MeshNormalMaterial",this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.morphTargets=!1,this.setValues(e)},n.MeshNormalMaterial.prototype=Object.create(n.Material.prototype),n.MeshNormalMaterial.prototype.constructor=n.MeshNormalMaterial,n.MeshNormalMaterial.prototype.copy=function(e){return n.Material.prototype.copy.call(this,e),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},n.MeshPhongMaterial=function(e){n.Material.call(this),this.type="MeshPhongMaterial",this.color=new n.Color(16777215),this.specular=new n.Color(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new n.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new n.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=n.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)},n.MeshPhongMaterial.prototype=Object.create(n.Material.prototype),n.MeshPhongMaterial.prototype.constructor=n.MeshPhongMaterial,n.MeshPhongMaterial.prototype.copy=function(e){return n.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},n.MeshStandardMaterial=function(e){n.Material.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new n.Color(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new n.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new n.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)},n.MeshStandardMaterial.prototype=Object.create(n.Material.prototype),n.MeshStandardMaterial.prototype.constructor=n.MeshStandardMaterial,n.MeshStandardMaterial.prototype.copy=function(e){return n.Material.prototype.copy.call(this,e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},n.MeshPhysicalMaterial=function(e){n.MeshStandardMaterial.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(e)},n.MeshPhysicalMaterial.prototype=Object.create(n.MeshStandardMaterial.prototype),n.MeshPhysicalMaterial.prototype.constructor=n.MeshPhysicalMaterial,n.MeshPhysicalMaterial.prototype.copy=function(e){return n.MeshStandardMaterial.prototype.copy.call(this,e),this.defines={PHYSICAL:""},this.reflectivity=e.reflectivity,this.clearCoat=e.clearCoat,this.clearCoatRoughness=e.clearCoatRoughness,this},n.MultiMaterial=function(e){this.uuid=n.Math.generateUUID(),this.type="MultiMaterial",this.materials=e instanceof Array?e:[],this.visible=!0},n.MultiMaterial.prototype={constructor:n.MultiMaterial,toJSON:function(e){for(var t={metadata:{version:4.2,type:"material",generator:"MaterialExporter"},uuid:this.uuid,type:this.type,materials:[]},r=this.materials,n=0,i=r.length;n<i;n++){var o=r[n].toJSON(e);delete o.metadata,t.materials.push(o)}return t.visible=this.visible,t},clone:function(){for(var e=new this.constructor,t=0;t<this.materials.length;t++)e.materials.push(this.materials[t].clone());return e.visible=this.visible,e}},n.PointsMaterial=function(e){n.Material.call(this),this.type="PointsMaterial",this.color=new n.Color(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.lights=!1,this.setValues(e)},n.PointsMaterial.prototype=Object.create(n.Material.prototype),n.PointsMaterial.prototype.constructor=n.PointsMaterial,n.PointsMaterial.prototype.copy=function(e){return n.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this},n.ShaderMaterial=function(e){n.Material.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,void 0!==e&&(void 0!==e.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))},n.ShaderMaterial.prototype=Object.create(n.Material.prototype),n.ShaderMaterial.prototype.constructor=n.ShaderMaterial,n.ShaderMaterial.prototype.copy=function(e){return n.Material.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=n.UniformsUtils.clone(e.uniforms),this.defines=e.defines,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=e.extensions,this},n.ShaderMaterial.prototype.toJSON=function(e){var t=n.Material.prototype.toJSON.call(this,e);return t.uniforms=this.uniforms,t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t},n.RawShaderMaterial=function(e){n.ShaderMaterial.call(this,e),this.type="RawShaderMaterial"},n.RawShaderMaterial.prototype=Object.create(n.ShaderMaterial.prototype),n.RawShaderMaterial.prototype.constructor=n.RawShaderMaterial,n.SpriteMaterial=function(e){n.Material.call(this),this.type="SpriteMaterial",this.color=new n.Color(16777215),this.map=null,this.rotation=0,this.fog=!1,this.lights=!1,this.setValues(e)},n.SpriteMaterial.prototype=Object.create(n.Material.prototype),n.SpriteMaterial.prototype.constructor=n.SpriteMaterial,n.SpriteMaterial.prototype.copy=function(e){return n.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.rotation=e.rotation,this},n.ShadowMaterial=function(){n.ShaderMaterial.call(this,{uniforms:n.UniformsUtils.merge([n.UniformsLib.lights,{opacity:{value:1}}]),vertexShader:n.ShaderChunk.shadow_vert,fragmentShader:n.ShaderChunk.shadow_frag}),this.lights=!0,this.transparent=!0,Object.defineProperties(this,{opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(e){this.uniforms.opacity.value=e}}})},n.ShadowMaterial.prototype=Object.create(n.ShaderMaterial.prototype),n.ShadowMaterial.prototype.constructor=n.ShadowMaterial,n.Texture=function(e,t,r,i,o,a,s,c,l,u){Object.defineProperty(this,"id",{value:n.TextureIdCount++}),this.uuid=n.Math.generateUUID(),this.name="",this.sourceFile="",this.image=void 0!==e?e:n.Texture.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:n.Texture.DEFAULT_MAPPING,this.wrapS=void 0!==r?r:n.ClampToEdgeWrapping,this.wrapT=void 0!==i?i:n.ClampToEdgeWrapping,this.magFilter=void 0!==o?o:n.LinearFilter,this.minFilter=void 0!==a?a:n.LinearMipMapLinearFilter,this.anisotropy=void 0!==l?l:1,this.format=void 0!==s?s:n.RGBAFormat,this.type=void 0!==c?c:n.UnsignedByteType,this.offset=new n.Vector2(0,0),this.repeat=new n.Vector2(1,1),this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==u?u:n.LinearEncoding,this.version=0,this.onUpdate=null},n.Texture.DEFAULT_IMAGE=void 0,n.Texture.DEFAULT_MAPPING=n.UVMapping,n.Texture.prototype={constructor:n.Texture,set needsUpdate(e){e===!0&&this.version++},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){function t(e){var t;return void 0!==e.toDataURL?t=e:(t=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),t.width=e.width,t.height=e.height,t.getContext("2d").drawImage(e,0,0,e.width,e.height)),t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}if(void 0!==e.textures[this.uuid])return e.textures[this.uuid];var r={metadata:{version:4.4,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var i=this.image;void 0===i.uuid&&(i.uuid=n.Math.generateUUID()),void 0===e.images[i.uuid]&&(e.images[i.uuid]={uuid:i.uuid,url:t(i)}),r.image=i.uuid}return e.textures[this.uuid]=r,r},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(e){if(this.mapping===n.UVMapping){if(e.multiply(this.repeat),e.add(this.offset),e.x<0||e.x>1)switch(this.wrapS){case n.RepeatWrapping:e.x=e.x-Math.floor(e.x);break;case n.ClampToEdgeWrapping:e.x=e.x<0?0:1;break;case n.MirroredRepeatWrapping:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case n.RepeatWrapping:e.y=e.y-Math.floor(e.y);break;case n.ClampToEdgeWrapping:e.y=e.y<0?0:1;break;case n.MirroredRepeatWrapping:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}this.flipY&&(e.y=1-e.y)}}},Object.assign(n.Texture.prototype,n.EventDispatcher.prototype),n.TextureIdCount=0,n.DepthTexture=function(e,t,r,i,o,a,s,c,l){n.Texture.call(this,null,i,o,a,s,c,n.DepthFormat,r,l),this.image={width:e,height:t},this.type=void 0!==r?r:n.UnsignedShortType,this.magFilter=void 0!==s?s:n.NearestFilter,this.minFilter=void 0!==c?c:n.NearestFilter,this.flipY=!1,this.generateMipmaps=!1},n.DepthTexture.prototype=Object.create(n.Texture.prototype),n.DepthTexture.prototype.constructor=n.DepthTexture,n.CanvasTexture=function(e,t,r,i,o,a,s,c,l){n.Texture.call(this,e,t,r,i,o,a,s,c,l),this.needsUpdate=!0},n.CanvasTexture.prototype=Object.create(n.Texture.prototype),n.CanvasTexture.prototype.constructor=n.CanvasTexture,n.CubeTexture=function(e,t,r,i,o,a,s,c,l,u){e=void 0!==e?e:[],t=void 0!==t?t:n.CubeReflectionMapping,n.Texture.call(this,e,t,r,i,o,a,s,c,l,u),this.flipY=!1},n.CubeTexture.prototype=Object.create(n.Texture.prototype),n.CubeTexture.prototype.constructor=n.CubeTexture,Object.defineProperty(n.CubeTexture.prototype,"images",{get:function(){return this.image},set:function(e){this.image=e}}),n.CompressedTexture=function(e,t,r,i,o,a,s,c,l,u,h,p){n.Texture.call(this,null,a,s,c,l,u,i,o,h,p),this.image={width:t,height:r},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1},n.CompressedTexture.prototype=Object.create(n.Texture.prototype),n.CompressedTexture.prototype.constructor=n.CompressedTexture,n.DataTexture=function(e,t,r,i,o,a,s,c,l,u,h,p){n.Texture.call(this,null,a,s,c,l,u,i,o,h,p),this.image={data:e,width:t,height:r},this.magFilter=void 0!==l?l:n.NearestFilter,this.minFilter=void 0!==u?u:n.NearestFilter,this.flipY=!1,this.generateMipmaps=!1},n.DataTexture.prototype=Object.create(n.Texture.prototype),n.DataTexture.prototype.constructor=n.DataTexture,n.VideoTexture=function(e,t,r,i,o,a,s,c,l){function u(){requestAnimationFrame(u),e.readyState>=e.HAVE_CURRENT_DATA&&(h.needsUpdate=!0)}n.Texture.call(this,e,t,r,i,o,a,s,c,l),this.generateMipmaps=!1;var h=this;u()},n.VideoTexture.prototype=Object.create(n.Texture.prototype),n.VideoTexture.prototype.constructor=n.VideoTexture,n.Group=function(){n.Object3D.call(this),this.type="Group"},n.Group.prototype=Object.assign(Object.create(n.Object3D.prototype),{constructor:n.Group}),n.Points=function(e,t){n.Object3D.call(this),this.type="Points",this.geometry=void 0!==e?e:new n.BufferGeometry,this.material=void 0!==t?t:new n.PointsMaterial({color:16777215*Math.random()})},n.Points.prototype=Object.assign(Object.create(n.Object3D.prototype),{constructor:n.Points,raycast:function(){var e=new n.Matrix4,t=new n.Ray,r=new n.Sphere;return function(i,o){function a(e,r){var n=t.distanceSqToPoint(e);if(n<p){var a=t.closestPointToPoint(e);a.applyMatrix4(l);var c=i.ray.origin.distanceTo(a);if(c<i.near||c>i.far)return;o.push({distance:c,distanceToRay:Math.sqrt(n),point:a.clone(),index:r,face:null,object:s})}}var s=this,c=this.geometry,l=this.matrixWorld,u=i.params.Points.threshold;if(null===c.boundingSphere&&c.computeBoundingSphere(),r.copy(c.boundingSphere),r.applyMatrix4(l),i.ray.intersectsSphere(r)!==!1){e.getInverse(l),t.copy(i.ray).applyMatrix4(e);var h=u/((this.scale.x+this.scale.y+this.scale.z)/3),p=h*h,d=new n.Vector3;if(c instanceof n.BufferGeometry){var f=c.index,m=c.attributes,v=m.position.array;if(null!==f)for(var g=f.array,y=0,x=g.length;y<x;y++){var b=g[y];d.fromArray(v,3*b),a(d,b)}else for(var y=0,w=v.length/3;y<w;y++)d.fromArray(v,3*y),a(d,y)}else for(var _=c.vertices,y=0,w=_.length;y<w;y++)a(_[y],y)}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),n.Line=function(e,t,r){return 1===r?(console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),new n.LineSegments(e,t)):(n.Object3D.call(this),this.type="Line",this.geometry=void 0!==e?e:new n.BufferGeometry,void(this.material=void 0!==t?t:new n.LineBasicMaterial({color:16777215*Math.random()})))},n.Line.prototype=Object.assign(Object.create(n.Object3D.prototype),{constructor:n.Line,raycast:function(){var e=new n.Matrix4,t=new n.Ray,r=new n.Sphere;return function(i,o){var a=i.linePrecision,s=a*a,c=this.geometry,l=this.matrixWorld;if(null===c.boundingSphere&&c.computeBoundingSphere(),r.copy(c.boundingSphere),r.applyMatrix4(l),i.ray.intersectsSphere(r)!==!1){e.getInverse(l),t.copy(i.ray).applyMatrix4(e);var u=new n.Vector3,h=new n.Vector3,p=new n.Vector3,d=new n.Vector3,f=this instanceof n.LineSegments?2:1;if(c instanceof n.BufferGeometry){var m=c.index,v=c.attributes,g=v.position.array;if(null!==m)for(var y=m.array,x=0,b=y.length-1;x<b;x+=f){var w=y[x],_=y[x+1];u.fromArray(g,3*w),h.fromArray(g,3*_);var M=t.distanceSqToSegment(u,h,d,p);if(!(M>s)){d.applyMatrix4(this.matrixWorld);var S=i.ray.origin.distanceTo(d);S<i.near||S>i.far||o.push({distance:S,point:p.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}else for(var x=0,b=g.length/3-1;x<b;x+=f){u.fromArray(g,3*x),h.fromArray(g,3*x+3);var M=t.distanceSqToSegment(u,h,d,p);if(!(M>s)){d.applyMatrix4(this.matrixWorld);var S=i.ray.origin.distanceTo(d);S<i.near||S>i.far||o.push({distance:S,point:p.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}}else if(c instanceof n.Geometry)for(var T=c.vertices,E=T.length,x=0;x<E-1;x+=f){var M=t.distanceSqToSegment(T[x],T[x+1],d,p);if(!(M>s)){d.applyMatrix4(this.matrixWorld);var S=i.ray.origin.distanceTo(d);S<i.near||S>i.far||o.push({distance:S,point:p.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),n.LineSegments=function(e,t){n.Line.call(this,e,t),this.type="LineSegments"},n.LineSegments.prototype=Object.assign(Object.create(n.Line.prototype),{constructor:n.LineSegments}),n.Mesh=function(e,t){n.Object3D.call(this),this.type="Mesh",this.geometry=void 0!==e?e:new n.BufferGeometry,this.material=void 0!==t?t:new n.MeshBasicMaterial({color:16777215*Math.random()}),this.drawMode=n.TrianglesDrawMode,this.updateMorphTargets()},n.Mesh.prototype=Object.assign(Object.create(n.Object3D.prototype),{constructor:n.Mesh,setDrawMode:function(e){this.drawMode=e},copy:function(e){return n.Object3D.prototype.copy.call(this,e),this.drawMode=e.drawMode,this},updateMorphTargets:function(){if(void 0!==this.geometry.morphTargets&&this.geometry.morphTargets.length>0){this.morphTargetBase=-1,this.morphTargetInfluences=[],this.morphTargetDictionary={};for(var e=0,t=this.geometry.morphTargets.length;e<t;e++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[e].name]=e}},getMorphTargetIndexByName:function(e){return void 0!==this.morphTargetDictionary[e]?this.morphTargetDictionary[e]:(console.warn("THREE.Mesh.getMorphTargetIndexByName: morph target "+e+" does not exist. Returning 0."),0)},raycast:function(){function e(e,t,r,i,o,a,s){return n.Triangle.barycoordFromPoint(e,t,r,i,v),o.multiplyScalar(v.x),a.multiplyScalar(v.y),s.multiplyScalar(v.z),o.add(a).add(s),o.clone()}function t(e,t,r,i,o,a,s){var c,l=e.material;if(c=l.side===n.BackSide?r.intersectTriangle(a,o,i,!0,s):r.intersectTriangle(i,o,a,l.side!==n.DoubleSide,s),null===c)return null;y.copy(s),y.applyMatrix4(e.matrixWorld);var u=t.ray.origin.distanceTo(y);return u<t.near||u>t.far?null:{distance:u,point:y.clone(),object:e}}function r(r,i,o,a,u,h,p,v){s.fromArray(a,3*h),c.fromArray(a,3*p),l.fromArray(a,3*v);var y=t(r,i,o,s,c,l,g);return y&&(u&&(d.fromArray(u,2*h),f.fromArray(u,2*p),m.fromArray(u,2*v),y.uv=e(g,s,c,l,d,f,m)),y.face=new n.Face3(h,p,v,n.Triangle.normal(s,c,l)),y.faceIndex=h),y}var i=new n.Matrix4,o=new n.Ray,a=new n.Sphere,s=new n.Vector3,c=new n.Vector3,l=new n.Vector3,u=new n.Vector3,h=new n.Vector3,p=new n.Vector3,d=new n.Vector2,f=new n.Vector2,m=new n.Vector2,v=new n.Vector3,g=new n.Vector3,y=new n.Vector3;return function(v,y){var x=this.geometry,b=this.material,w=this.matrixWorld;if(void 0!==b&&(null===x.boundingSphere&&x.computeBoundingSphere(),a.copy(x.boundingSphere),a.applyMatrix4(w),v.ray.intersectsSphere(a)!==!1&&(i.getInverse(w),o.copy(v.ray).applyMatrix4(i),null===x.boundingBox||o.intersectsBox(x.boundingBox)!==!1))){var _,M;if(x instanceof n.BufferGeometry){var S,T,E,A=x.index,C=x.attributes,L=C.position.array;if(void 0!==C.uv&&(_=C.uv.array),null!==A)for(var P=A.array,R=0,D=P.length;R<D;R+=3)S=P[R],T=P[R+1],E=P[R+2],M=r(this,v,o,L,_,S,T,E),M&&(M.faceIndex=Math.floor(R/3),y.push(M));else for(var R=0,D=L.length;R<D;R+=9)S=R/3,T=S+1,E=S+2,M=r(this,v,o,L,_,S,T,E),M&&(M.index=S,y.push(M))}else if(x instanceof n.Geometry){var I,B,O,F=b instanceof n.MultiMaterial,N=F===!0?b.materials:null,U=x.vertices,G=x.faces,V=x.faceVertexUvs[0];V.length>0&&(_=V);for(var k=0,z=G.length;k<z;k++){var j=G[k],H=F===!0?N[j.materialIndex]:b;if(void 0!==H){if(I=U[j.a],B=U[j.b],O=U[j.c],H.morphTargets===!0){var W=x.morphTargets,X=this.morphTargetInfluences;s.set(0,0,0),c.set(0,0,0),l.set(0,0,0);for(var q=0,Y=W.length;q<Y;q++){var Z=X[q];if(0!==Z){var K=W[q].vertices;s.addScaledVector(u.subVectors(K[j.a],I),Z),c.addScaledVector(h.subVectors(K[j.b],B),Z),l.addScaledVector(p.subVectors(K[j.c],O),Z)}}s.add(I),c.add(B),l.add(O),I=s,B=c,O=l}if(M=t(this,v,o,I,B,O,g)){if(_){var Q=_[k];d.copy(Q[0]),f.copy(Q[1]),m.copy(Q[2]),M.uv=e(g,I,B,O,d,f,m)}M.face=j,M.faceIndex=k,y.push(M)}}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),n.Bone=function(e){n.Object3D.call(this),this.type="Bone",this.skin=e},n.Bone.prototype=Object.assign(Object.create(n.Object3D.prototype),{constructor:n.Bone,copy:function(e){return n.Object3D.prototype.copy.call(this,e),this.skin=e.skin,this}}),n.Skeleton=function(e,t,r){if(this.useVertexTexture=void 0===r||r,this.identityMatrix=new n.Matrix4,e=e||[],this.bones=e.slice(0),this.useVertexTexture){var i=Math.sqrt(4*this.bones.length);i=n.Math.nextPowerOfTwo(Math.ceil(i)),i=Math.max(i,4),this.boneTextureWidth=i,this.boneTextureHeight=i,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new n.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,n.RGBAFormat,n.FloatType)}else this.boneMatrices=new Float32Array(16*this.bones.length);if(void 0===t)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn("THREE.Skeleton bonInverses is the wrong length."),this.boneInverses=[];for(var o=0,a=this.bones.length;o<a;o++)this.boneInverses.push(new n.Matrix4)}},Object.assign(n.Skeleton.prototype,{calculateInverses:function(){this.boneInverses=[];for(var e=0,t=this.bones.length;e<t;e++){var r=new n.Matrix4;this.bones[e]&&r.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(r)}},pose:function(){for(var e,t=0,r=this.bones.length;t<r;t++)e=this.bones[t],e&&e.matrixWorld.getInverse(this.boneInverses[t]);for(var t=0,r=this.bones.length;t<r;t++)e=this.bones[t],e&&(e.parent instanceof n.Bone?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))},update:function(){var e=new n.Matrix4;return function(){for(var t=0,r=this.bones.length;t<r;t++){var n=this.bones[t]?this.bones[t].matrixWorld:this.identityMatrix;e.multiplyMatrices(n,this.boneInverses[t]),e.toArray(this.boneMatrices,16*t)}this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}(),clone:function(){return new n.Skeleton(this.bones,this.boneInverses,this.useVertexTexture)}}),n.SkinnedMesh=function(e,t,r){n.Mesh.call(this,e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new n.Matrix4,this.bindMatrixInverse=new n.Matrix4;var i=[];if(this.geometry&&void 0!==this.geometry.bones){for(var o,a,s=0,c=this.geometry.bones.length;s<c;++s)a=this.geometry.bones[s],o=new n.Bone(this),i.push(o),o.name=a.name,o.position.fromArray(a.pos),o.quaternion.fromArray(a.rotq),void 0!==a.scl&&o.scale.fromArray(a.scl);for(var s=0,c=this.geometry.bones.length;s<c;++s)a=this.geometry.bones[s],a.parent!==-1&&null!==a.parent&&void 0!==i[a.parent]?i[a.parent].add(i[s]):this.add(i[s])}this.normalizeSkinWeights(),this.updateMatrixWorld(!0),this.bind(new n.Skeleton(i,(void 0),r),this.matrixWorld)},n.SkinnedMesh.prototype=Object.assign(Object.create(n.Mesh.prototype),{constructor:n.SkinnedMesh,bind:function(e,t){this.skeleton=e,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){if(this.geometry instanceof n.Geometry)for(var e=0;e<this.geometry.skinWeights.length;e++){var t=this.geometry.skinWeights[e],r=1/t.lengthManhattan();r!==1/0?t.multiplyScalar(r):t.set(1,0,0,0)}else if(this.geometry instanceof n.BufferGeometry)for(var i=new n.Vector4,o=this.geometry.attributes.skinWeight,e=0;e<o.count;e++){i.x=o.getX(e),i.y=o.getY(e),i.z=o.getZ(e),i.w=o.getW(e);var r=1/i.lengthManhattan();r!==1/0?i.multiplyScalar(r):i.set(1,0,0,0),o.setXYZW(e,i.x,i.y,i.z,i.w)}},updateMatrixWorld:function(e){n.Mesh.prototype.updateMatrixWorld.call(this,!0),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh unrecognized bindMode: "+this.bindMode);
},clone:function(){return new this.constructor(this.geometry,this.material,this.skeleton.useVertexTexture).copy(this)}}),n.LOD=function(){n.Object3D.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})},n.LOD.prototype=Object.assign(Object.create(n.Object3D.prototype),{constructor:n.LOD,copy:function(e){n.Object3D.prototype.copy.call(this,e,!1);for(var t=e.levels,r=0,i=t.length;r<i;r++){var o=t[r];this.addLevel(o.object.clone(),o.distance)}return this},addLevel:function(e,t){void 0===t&&(t=0),t=Math.abs(t);for(var r=this.levels,n=0;n<r.length&&!(t<r[n].distance);n++);r.splice(n,0,{distance:t,object:e}),this.add(e)},getObjectForDistance:function(e){for(var t=this.levels,r=1,n=t.length;r<n&&!(e<t[r].distance);r++);return t[r-1].object},raycast:function(){var e=new n.Vector3;return function(t,r){e.setFromMatrixPosition(this.matrixWorld);var n=t.ray.origin.distanceTo(e);this.getObjectForDistance(n).raycast(t,r)}}(),update:function(){var e=new n.Vector3,t=new n.Vector3;return function(r){var n=this.levels;if(n.length>1){e.setFromMatrixPosition(r.matrixWorld),t.setFromMatrixPosition(this.matrixWorld);var i=e.distanceTo(t);n[0].object.visible=!0;for(var o=1,a=n.length;o<a&&i>=n[o].distance;o++)n[o-1].object.visible=!1,n[o].object.visible=!0;for(;o<a;o++)n[o].object.visible=!1}}}(),toJSON:function(e){var t=n.Object3D.prototype.toJSON.call(this,e);t.object.levels=[];for(var r=this.levels,i=0,o=r.length;i<o;i++){var a=r[i];t.object.levels.push({object:a.object.uuid,distance:a.distance})}return t}}),n.Sprite=function(e){n.Object3D.call(this),this.type="Sprite",this.material=void 0!==e?e:new n.SpriteMaterial},n.Sprite.prototype=Object.assign(Object.create(n.Object3D.prototype),{constructor:n.Sprite,raycast:function(){var e=new n.Vector3;return function(t,r){e.setFromMatrixPosition(this.matrixWorld);var n=t.ray.distanceSqToPoint(e),i=this.scale.x*this.scale.y/4;n>i||r.push({distance:Math.sqrt(n),point:this.position,face:null,object:this})}}(),clone:function(){return new this.constructor(this.material).copy(this)}}),n.LensFlare=function(e,t,r,i,o){n.Object3D.call(this),this.lensFlares=[],this.positionScreen=new n.Vector3,this.customUpdateCallback=void 0,void 0!==e&&this.add(e,t,r,i,o)},n.LensFlare.prototype=Object.assign(Object.create(n.Object3D.prototype),{constructor:n.LensFlare,copy:function(e){n.Object3D.prototype.copy.call(this,e),this.positionScreen.copy(e.positionScreen),this.customUpdateCallback=e.customUpdateCallback;for(var t=0,r=e.lensFlares.length;t<r;t++)this.lensFlares.push(e.lensFlares[t]);return this},add:function(e,t,r,i,o,a){void 0===t&&(t=-1),void 0===r&&(r=0),void 0===a&&(a=1),void 0===o&&(o=new n.Color(16777215)),void 0===i&&(i=n.NormalBlending),r=Math.min(r,Math.max(0,r)),this.lensFlares.push({texture:e,size:t,distance:r,x:0,y:0,z:0,scale:1,rotation:0,opacity:a,color:o,blending:i})},updateLensFlares:function(){var e,t,r=this.lensFlares.length,n=2*-this.positionScreen.x,i=2*-this.positionScreen.y;for(e=0;e<r;e++)t=this.lensFlares[e],t.x=this.positionScreen.x+n*t.distance,t.y=this.positionScreen.y+i*t.distance,t.wantedRotation=t.x*Math.PI*.25,t.rotation+=.25*(t.wantedRotation-t.rotation)}}),n.Scene=function(){n.Object3D.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0},n.Scene.prototype=Object.create(n.Object3D.prototype),n.Scene.prototype.constructor=n.Scene,n.Scene.prototype.copy=function(e,t){return n.Object3D.prototype.copy.call(this,e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this},n.Fog=function(e,t,r){this.name="",this.color=new n.Color(e),this.near=void 0!==t?t:1,this.far=void 0!==r?r:1e3},n.Fog.prototype.clone=function(){return new n.Fog(this.color.getHex(),this.near,this.far)},n.FogExp2=function(e,t){this.name="",this.color=new n.Color(e),this.density=void 0!==t?t:25e-5},n.FogExp2.prototype.clone=function(){return new n.FogExp2(this.color.getHex(),this.density)},n.ShaderChunk={},n.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",n.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",n.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",n.ShaderChunk.aomap_fragment="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",n.ShaderChunk.aomap_pars_fragment="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",n.ShaderChunk.begin_vertex="\nvec3 transformed = vec3( position );\n",n.ShaderChunk.beginnormal_vertex="\nvec3 objectNormal = vec3( normal );\n",n.ShaderChunk.bsdfs="bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",n.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",n.ShaderChunk.clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n#endif\n",n.ShaderChunk.clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",n.ShaderChunk.clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n",n.ShaderChunk.clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",n.ShaderChunk.color_fragment="#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",n.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",n.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",n.ShaderChunk.color_vertex="#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",n.ShaderChunk.common="#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n",n.ShaderChunk.cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",n.ShaderChunk.defaultnormal_vertex="#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n",n.ShaderChunk.displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",n.ShaderChunk.displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",n.ShaderChunk.emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",n.ShaderChunk.emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",n.ShaderChunk.encodings_pars_fragment="\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n",n.ShaderChunk.encodings_fragment="  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",n.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",n.ShaderChunk.envmap_pars_fragment="#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",n.ShaderChunk.envmap_pars_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",n.ShaderChunk.envmap_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",n.ShaderChunk.fog_fragment="#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",n.ShaderChunk.fog_pars_fragment="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",n.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",n.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",n.ShaderChunk.lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",n.ShaderChunk.lights_pars="uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\n\t\t\tdirectLight.color = pointLight.color;\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#include <normal_flip>\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#include <normal_flip>\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",
n.ShaderChunk.lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",n.ShaderChunk.lights_phong_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",n.ShaderChunk.lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",n.ShaderChunk.lights_physical_pars_fragment="struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",n.ShaderChunk.lights_template="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\t\t\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",n.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif",n.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n",n.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif",n.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n",n.ShaderChunk.map_fragment="#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",n.ShaderChunk.map_pars_fragment="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",n.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",n.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n",n.ShaderChunk.metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n",n.ShaderChunk.metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",n.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",n.ShaderChunk.morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",n.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",n.ShaderChunk.normal_flip="#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n",n.ShaderChunk.normal_fragment="#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",n.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n",n.ShaderChunk.packing="vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",n.ShaderChunk.premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",n.ShaderChunk.project_vertex="#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n",n.ShaderChunk.roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n",n.ShaderChunk.roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",n.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",n.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",n.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",n.ShaderChunk.shadowmask_pars_fragment="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",n.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",n.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",n.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n",n.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",n.ShaderChunk.specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",n.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",n.ShaderChunk.tonemapping_fragment="#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",n.ShaderChunk.tonemapping_pars_fragment="#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",n.ShaderChunk.uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",n.ShaderChunk.uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",n.ShaderChunk.uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",n.ShaderChunk.uv_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",n.ShaderChunk.uv_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n",n.ShaderChunk.uv_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",n.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n",n.UniformsUtils={merge:function(e){for(var t={},r=0;r<e.length;r++){var n=this.clone(e[r]);for(var i in n)t[i]=n[i]}return t},clone:function(e){var t={};for(var r in e){t[r]={};for(var i in e[r]){var o=e[r][i];o instanceof n.Color||o instanceof n.Vector2||o instanceof n.Vector3||o instanceof n.Vector4||o instanceof n.Matrix3||o instanceof n.Matrix4||o instanceof n.Texture?t[r][i]=o.clone():Array.isArray(o)?t[r][i]=o.slice():t[r][i]=o}}return t}},n.UniformsLib={common:{diffuse:{value:new n.Color(15658734)},opacity:{value:1},map:{value:null},offsetRepeat:{value:new n.Vector4(0,0,1,1)},specularMap:{value:null},alphaMap:{value:null},envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new n.Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new n.Color(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}}},points:{diffuse:{value:new n.Color(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},offsetRepeat:{value:new n.Vector4(0,0,1,1)}}},n.ShaderChunk.cube_frag="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",n.ShaderChunk.cube_vert="varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",
n.ShaderChunk.depth_frag="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",n.ShaderChunk.depth_vert="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",n.ShaderChunk.distanceRGBA_frag="uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n",n.ShaderChunk.distanceRGBA_vert="varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n",n.ShaderChunk.equirect_frag="uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",n.ShaderChunk.equirect_vert="varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",n.ShaderChunk.linedashed_frag="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",n.ShaderChunk.linedashed_vert="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",n.ShaderChunk.meshbasic_frag="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight;\n\treflectedLight.directDiffuse = vec3( 0.0 );\n\treflectedLight.directSpecular = vec3( 0.0 );\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\n\treflectedLight.indirectSpecular = vec3( 0.0 );\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",n.ShaderChunk.meshbasic_vert="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n}\n",n.ShaderChunk.meshlambert_frag="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",n.ShaderChunk.meshlambert_vert="#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n}\n",n.ShaderChunk.meshphong_frag="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",n.ShaderChunk.meshphong_vert="#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n}\n",n.ShaderChunk.meshphysical_frag="#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",n.ShaderChunk.meshphysical_vert="#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n",n.ShaderChunk.normal_frag="uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <packing>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\n\t#include <logdepthbuf_fragment>\n}\n",n.ShaderChunk.normal_vert="varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvNormal = normalize( normalMatrix * normal );\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",n.ShaderChunk.points_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",n.ShaderChunk.points_vert="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n",n.ShaderChunk.shadow_frag="uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n",n.ShaderChunk.shadow_vert="#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n",n.ShaderLib={basic:{uniforms:n.UniformsUtils.merge([n.UniformsLib.common,n.UniformsLib.aomap,n.UniformsLib.fog]),vertexShader:n.ShaderChunk.meshbasic_vert,fragmentShader:n.ShaderChunk.meshbasic_frag},lambert:{uniforms:n.UniformsUtils.merge([n.UniformsLib.common,n.UniformsLib.aomap,n.UniformsLib.lightmap,n.UniformsLib.emissivemap,n.UniformsLib.fog,n.UniformsLib.lights,{emissive:{value:new n.Color(0)}}]),vertexShader:n.ShaderChunk.meshlambert_vert,fragmentShader:n.ShaderChunk.meshlambert_frag},phong:{uniforms:n.UniformsUtils.merge([n.UniformsLib.common,n.UniformsLib.aomap,n.UniformsLib.lightmap,n.UniformsLib.emissivemap,n.UniformsLib.bumpmap,n.UniformsLib.normalmap,n.UniformsLib.displacementmap,n.UniformsLib.fog,n.UniformsLib.lights,{emissive:{value:new n.Color(0)},specular:{value:new n.Color(1118481)},shininess:{value:30}}]),vertexShader:n.ShaderChunk.meshphong_vert,fragmentShader:n.ShaderChunk.meshphong_frag},standard:{uniforms:n.UniformsUtils.merge([n.UniformsLib.common,n.UniformsLib.aomap,n.UniformsLib.lightmap,n.UniformsLib.emissivemap,n.UniformsLib.bumpmap,n.UniformsLib.normalmap,n.UniformsLib.displacementmap,n.UniformsLib.roughnessmap,n.UniformsLib.metalnessmap,n.UniformsLib.fog,n.UniformsLib.lights,{emissive:{value:new n.Color(0)},roughness:{value:.5},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:n.ShaderChunk.meshphysical_vert,fragmentShader:n.ShaderChunk.meshphysical_frag},points:{uniforms:n.UniformsUtils.merge([n.UniformsLib.points,n.UniformsLib.fog]),vertexShader:n.ShaderChunk.points_vert,fragmentShader:n.ShaderChunk.points_frag},dashed:{uniforms:n.UniformsUtils.merge([n.UniformsLib.common,n.UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:n.ShaderChunk.linedashed_vert,fragmentShader:n.ShaderChunk.linedashed_frag},depth:{uniforms:n.UniformsUtils.merge([n.UniformsLib.common,n.UniformsLib.displacementmap]),vertexShader:n.ShaderChunk.depth_vert,fragmentShader:n.ShaderChunk.depth_frag},normal:{uniforms:{opacity:{value:1}},vertexShader:n.ShaderChunk.normal_vert,fragmentShader:n.ShaderChunk.normal_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:n.ShaderChunk.cube_vert,fragmentShader:n.ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null},tFlip:{value:-1}},vertexShader:n.ShaderChunk.equirect_vert,fragmentShader:n.ShaderChunk.equirect_frag},distanceRGBA:{uniforms:{lightPos:{value:new n.Vector3}},vertexShader:n.ShaderChunk.distanceRGBA_vert,fragmentShader:n.ShaderChunk.distanceRGBA_frag}},n.ShaderLib.physical={uniforms:n.UniformsUtils.merge([n.ShaderLib.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:n.ShaderChunk.meshphysical_vert,fragmentShader:n.ShaderChunk.meshphysical_frag},n.WebGLRenderer=function(e){function t(){return null===te?fe:1}function r(e,t,r,n){j===!0&&(e*=n,t*=n,r*=n),De.clearColor(e,t,r,n)}function i(){De.init(),De.scissor(ae.copy(me).multiplyScalar(fe)),De.viewport(ce.copy(ge).multiplyScalar(fe)),r(ue.r,ue.g,ue.b,he)}function o(){ee=null,oe=null,ie="",ne=-1,De.reset()}function a(e){e.preventDefault(),o(),i(),Ie.clear()}function s(e){var t=e.target;t.removeEventListener("dispose",s),c(t)}function c(e){l(e),Ie["delete"](e)}function l(e){var t=Ie.get(e).program;e.program=void 0,void 0!==t&&Fe.releaseProgram(t)}function u(e,t,r,i){var o;if(r instanceof n.InstancedBufferGeometry&&(o=Pe.get("ANGLE_instanced_arrays"),null===o))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");void 0===i&&(i=0),De.initAttributes();var a=r.attributes,s=t.getAttributes(),c=e.defaultAttributeValues;for(var l in s){var u=s[l];if(u>=0){var h=a[l];if(void 0!==h){var p=Ae.FLOAT,d=h.array,f=h.normalized;d instanceof Float32Array?p=Ae.FLOAT:d instanceof Float64Array?console.warn("Unsupported data buffer format: Float64Array"):d instanceof Uint16Array?p=Ae.UNSIGNED_SHORT:d instanceof Int16Array?p=Ae.SHORT:d instanceof Uint32Array?p=Ae.UNSIGNED_INT:d instanceof Int32Array?p=Ae.INT:d instanceof Int8Array?p=Ae.BYTE:d instanceof Uint8Array&&(p=Ae.UNSIGNED_BYTE);var m=h.itemSize,v=Oe.getAttributeBuffer(h);if(h instanceof n.InterleavedBufferAttribute){var g=h.data,y=g.stride,x=h.offset;g instanceof n.InstancedInterleavedBuffer?(De.enableAttributeAndDivisor(u,g.meshPerAttribute,o),void 0===r.maxInstancedCount&&(r.maxInstancedCount=g.meshPerAttribute*g.count)):De.enableAttribute(u),Ae.bindBuffer(Ae.ARRAY_BUFFER,v),Ae.vertexAttribPointer(u,m,p,f,y*g.array.BYTES_PER_ELEMENT,(i*y+x)*g.array.BYTES_PER_ELEMENT)}else h instanceof n.InstancedBufferAttribute?(De.enableAttributeAndDivisor(u,h.meshPerAttribute,o),void 0===r.maxInstancedCount&&(r.maxInstancedCount=h.meshPerAttribute*h.count)):De.enableAttribute(u),Ae.bindBuffer(Ae.ARRAY_BUFFER,v),Ae.vertexAttribPointer(u,m,p,f,0,i*m*h.array.BYTES_PER_ELEMENT)}else if(void 0!==c){var b=c[l];if(void 0!==b)switch(b.length){case 2:Ae.vertexAttrib2fv(u,b);break;case 3:Ae.vertexAttrib3fv(u,b);break;case 4:Ae.vertexAttrib4fv(u,b);break;default:Ae.vertexAttrib1fv(u,b)}}}}De.disableUnusedAttributes()}function h(e,t){return Math.abs(t[0])-Math.abs(e[0])}function p(e,t){return e.object.renderOrder!==t.object.renderOrder?e.object.renderOrder-t.object.renderOrder:e.material.program&&t.material.program&&e.material.program!==t.material.program?e.material.program.id-t.material.program.id:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function d(e,t){return e.object.renderOrder!==t.object.renderOrder?e.object.renderOrder-t.object.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function f(e,t,r,n,i){var o,a;r.transparent?(o=Y,a=++Z):(o=X,a=++q);var s=o[a];void 0!==s?(s.id=e.id,s.object=e,s.geometry=t,s.material=r,s.z=Se.z,s.group=i):(s={id:e.id,object:e,geometry:t,material:r,z:Se.z,group:i},o.push(s))}function m(e){var t=e.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),_e.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),g(_e)}function v(e){return _e.center.set(0,0,0),_e.radius=.7071067811865476,_e.applyMatrix4(e.matrixWorld),g(_e)}function g(e){if(!ye.intersectsSphere(e))return!1;var t=xe.numPlanes;if(0===t)return!0;var r=$.clippingPlanes,n=e.center,i=-e.radius,o=0;do if(r[o].distanceToPoint(n)<i)return!1;while(++o!==t);return!0}function y(e,t){if(e.visible!==!1){if(e.layers.test(t.layers))if(e instanceof n.Light)W.push(e);else if(e instanceof n.Sprite)e.frustumCulled!==!1&&v(e)!==!0||Q.push(e);else if(e instanceof n.LensFlare)J.push(e);else if(e instanceof n.ImmediateRenderObject)$.sortObjects===!0&&(Se.setFromMatrixPosition(e.matrixWorld),Se.applyProjection(Me)),f(e,null,e.material,Se.z,null);else if((e instanceof n.Mesh||e instanceof n.Line||e instanceof n.Points)&&(e instanceof n.SkinnedMesh&&e.skeleton.update(),e.frustumCulled===!1||m(e)===!0)){var r=e.material;if(r.visible===!0){$.sortObjects===!0&&(Se.setFromMatrixPosition(e.matrixWorld),Se.applyProjection(Me));var i=Oe.update(e);if(r instanceof n.MultiMaterial)for(var o=i.groups,a=r.materials,s=0,c=o.length;s<c;s++){var l=o[s],u=a[l.materialIndex];u.visible===!0&&f(e,i,u,Se.z,l)}else f(e,i,r,Se.z,null)}}for(var h=e.children,s=0,c=h.length;s<c;s++)y(h[s],t)}}function x(e,t,r,i){for(var o=0,a=e.length;o<a;o++){var s=e[o],c=s.object,l=s.geometry,u=void 0===i?s.material:i,h=s.group;if(c.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,c.matrixWorld),c.normalMatrix.getNormalMatrix(c.modelViewMatrix),c instanceof n.ImmediateRenderObject){w(u);var p=_(t,r,u,c);ie="",c.render(function(e){$.renderBufferImmediate(e,p,u)})}else $.renderBufferDirect(t,r,l,u,c,h)}}function b(e,t,r){var i=Ie.get(e),o=Fe.getParameters(e,Te,t,xe.numPlanes,r),a=Fe.getProgramCode(e,o),c=i.program,u=!0;if(void 0===c)e.addEventListener("dispose",s);else if(c.code!==a)l(e);else{if(void 0!==o.shaderID)return;u=!1}if(u){if(o.shaderID){var h=n.ShaderLib[o.shaderID];i.__webglShader={name:e.type,uniforms:n.UniformsUtils.clone(h.uniforms),vertexShader:h.vertexShader,fragmentShader:h.fragmentShader}}else i.__webglShader={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};e.__webglShader=i.__webglShader,c=Fe.acquireProgram(e,o,a),i.program=c,e.program=c}var p=c.getAttributes();if(e.morphTargets){e.numSupportedMorphTargets=0;for(var d=0;d<$.maxMorphTargets;d++)p["morphTarget"+d]>=0&&e.numSupportedMorphTargets++}if(e.morphNormals){e.numSupportedMorphNormals=0;for(var d=0;d<$.maxMorphNormals;d++)p["morphNormal"+d]>=0&&e.numSupportedMorphNormals++}var f=i.__webglShader.uniforms;(e instanceof n.ShaderMaterial||e instanceof n.RawShaderMaterial)&&e.clipping!==!0||(i.numClippingPlanes=xe.numPlanes,f.clippingPlanes=xe.uniform),e.lights&&(i.lightsHash=Te.hash,f.ambientLightColor.value=Te.ambient,f.directionalLights.value=Te.directional,f.spotLights.value=Te.spot,f.pointLights.value=Te.point,f.hemisphereLights.value=Te.hemi,f.directionalShadowMap.value=Te.directionalShadowMap,f.directionalShadowMatrix.value=Te.directionalShadowMatrix,f.spotShadowMap.value=Te.spotShadowMap,f.spotShadowMatrix.value=Te.spotShadowMatrix,f.pointShadowMap.value=Te.pointShadowMap,f.pointShadowMatrix.value=Te.pointShadowMatrix);var m=i.program.getUniforms(),v=n.WebGLUniforms.seqWithValue(m.seq,f);i.uniformsList=v,i.dynamicUniforms=n.WebGLUniforms.splitDynamic(v,f)}function w(e){e.side!==n.DoubleSide?De.enable(Ae.CULL_FACE):De.disable(Ae.CULL_FACE),De.setFlipSided(e.side===n.BackSide),e.transparent===!0?De.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha):De.setBlending(n.NoBlending),De.setDepthFunc(e.depthFunc),De.setDepthTest(e.depthTest),De.setDepthWrite(e.depthWrite),De.setColorWrite(e.colorWrite),De.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)}function _(e,t,r,i){le=0;var o=Ie.get(r);if(be){if(we||e!==oe){var a=e===oe&&r.id===ne;xe.setState(r.clippingPlanes,r.clipShadows,e,o,a)}void 0!==o.numClippingPlanes&&o.numClippingPlanes!==xe.numPlanes&&(r.needsUpdate=!0)}void 0===o.program&&(r.needsUpdate=!0),void 0!==o.lightsHash&&o.lightsHash!==Te.hash&&(r.needsUpdate=!0),r.needsUpdate&&(b(r,t,i),r.needsUpdate=!1);var s=!1,c=!1,l=!1,u=o.program,h=u.getUniforms(),p=o.__webglShader.uniforms;if(u.id!==ee&&(Ae.useProgram(u.program),ee=u.id,s=!0,c=!0,l=!0),r.id!==ne&&(ne=r.id,c=!0),s||e!==oe){if(h.set(Ae,e,"projectionMatrix"),Re.logarithmicDepthBuffer&&h.setValue(Ae,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),e!==oe&&(oe=e,c=!0,l=!0),r instanceof n.ShaderMaterial||r instanceof n.MeshPhongMaterial||r instanceof n.MeshStandardMaterial||r.envMap){var d=h.map.cameraPosition;void 0!==d&&d.setValue(Ae,Se.setFromMatrixPosition(e.matrixWorld))}(r instanceof n.MeshPhongMaterial||r instanceof n.MeshLambertMaterial||r instanceof n.MeshBasicMaterial||r instanceof n.MeshStandardMaterial||r instanceof n.ShaderMaterial||r.skinning)&&h.setValue(Ae,"viewMatrix",e.matrixWorldInverse),h.set(Ae,$,"toneMappingExposure"),h.set(Ae,$,"toneMappingWhitePoint")}if(r.skinning){h.setOptional(Ae,i,"bindMatrix"),h.setOptional(Ae,i,"bindMatrixInverse");var f=i.skeleton;f&&(Re.floatVertexTextures&&f.useVertexTexture?(h.set(Ae,f,"boneTexture"),h.set(Ae,f,"boneTextureWidth"),h.set(Ae,f,"boneTextureHeight")):h.setOptional(Ae,f,"boneMatrices"))}c&&(r.lights&&D(p,l),t&&r.fog&&A(p,t),(r instanceof n.MeshBasicMaterial||r instanceof n.MeshLambertMaterial||r instanceof n.MeshPhongMaterial||r instanceof n.MeshStandardMaterial||r instanceof n.MeshDepthMaterial)&&M(p,r),r instanceof n.LineBasicMaterial?S(p,r):r instanceof n.LineDashedMaterial?(S(p,r),T(p,r)):r instanceof n.PointsMaterial?E(p,r):r instanceof n.MeshLambertMaterial?C(p,r):r instanceof n.MeshPhongMaterial?L(p,r):r instanceof n.MeshPhysicalMaterial?R(p,r):r instanceof n.MeshStandardMaterial?P(p,r):r instanceof n.MeshDepthMaterial?r.displacementMap&&(p.displacementMap.value=r.displacementMap,p.displacementScale.value=r.displacementScale,p.displacementBias.value=r.displacementBias):r instanceof n.MeshNormalMaterial&&(p.opacity.value=r.opacity),n.WebGLUniforms.upload(Ae,o.uniformsList,p,$)),h.set(Ae,i,"modelViewMatrix"),h.set(Ae,i,"normalMatrix"),h.setValue(Ae,"modelMatrix",i.matrixWorld);var m=o.dynamicUniforms;return null!==m&&(n.WebGLUniforms.evalDynamic(m,p,i,e),n.WebGLUniforms.upload(Ae,m,p,$)),u}function M(e,t){e.opacity.value=t.opacity,e.diffuse.value=t.color,t.emissive&&e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),e.map.value=t.map,e.specularMap.value=t.specularMap,e.alphaMap.value=t.alphaMap,t.aoMap&&(e.aoMap.value=t.aoMap,e.aoMapIntensity.value=t.aoMapIntensity);var r;if(t.map?r=t.map:t.specularMap?r=t.specularMap:t.displacementMap?r=t.displacementMap:t.normalMap?r=t.normalMap:t.bumpMap?r=t.bumpMap:t.roughnessMap?r=t.roughnessMap:t.metalnessMap?r=t.metalnessMap:t.alphaMap?r=t.alphaMap:t.emissiveMap&&(r=t.emissiveMap),void 0!==r){r instanceof n.WebGLRenderTarget&&(r=r.texture);var i=r.offset,o=r.repeat;e.offsetRepeat.value.set(i.x,i.y,o.x,o.y)}e.envMap.value=t.envMap,e.flipEnvMap.value=t.envMap instanceof n.CubeTexture?-1:1,e.reflectivity.value=t.reflectivity,e.refractionRatio.value=t.refractionRatio}function S(e,t){e.diffuse.value=t.color,e.opacity.value=t.opacity}function T(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}function E(e,t){
if(e.diffuse.value=t.color,e.opacity.value=t.opacity,e.size.value=t.size*fe,e.scale.value=.5*N.clientHeight,e.map.value=t.map,null!==t.map){var r=t.map.offset,n=t.map.repeat;e.offsetRepeat.value.set(r.x,r.y,n.x,n.y)}}function A(e,t){e.fogColor.value=t.color,t instanceof n.Fog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t instanceof n.FogExp2&&(e.fogDensity.value=t.density)}function C(e,t){t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap)}function L(e,t){e.specular.value=t.specular,e.shininess.value=Math.max(t.shininess,1e-4),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function P(e,t){e.roughness.value=t.roughness,e.metalness.value=t.metalness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap),t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}function R(e,t){e.clearCoat.value=t.clearCoat,e.clearCoatRoughness.value=t.clearCoatRoughness,P(e,t)}function D(e,t){e.ambientLightColor.needsUpdate=t,e.directionalLights.needsUpdate=t,e.pointLights.needsUpdate=t,e.spotLights.needsUpdate=t,e.hemisphereLights.needsUpdate=t}function I(e){for(var t=0,r=0,n=e.length;r<n;r++){var i=e[r];i.castShadow&&(Te.shadows[t++]=i)}Te.shadows.length=t}function B(e,t){var r,i,o,a,s,c,l,u=0,h=0,p=0,d=t.matrixWorldInverse,f=0,m=0,v=0,g=0;for(r=0,i=e.length;r<i;r++)if(o=e[r],a=o.color,s=o.intensity,c=o.distance,l=o.shadow&&o.shadow.map?o.shadow.map.texture:null,o instanceof n.AmbientLight)u+=a.r*s,h+=a.g*s,p+=a.b*s;else if(o instanceof n.DirectionalLight){var y=Ne.get(o);y.color.copy(o.color).multiplyScalar(o.intensity),y.direction.setFromMatrixPosition(o.matrixWorld),Se.setFromMatrixPosition(o.target.matrixWorld),y.direction.sub(Se),y.direction.transformDirection(d),y.shadow=o.castShadow,o.castShadow&&(y.shadowBias=o.shadow.bias,y.shadowRadius=o.shadow.radius,y.shadowMapSize=o.shadow.mapSize),Te.directionalShadowMap[f]=l,Te.directionalShadowMatrix[f]=o.shadow.matrix,Te.directional[f++]=y}else if(o instanceof n.SpotLight){var y=Ne.get(o);y.position.setFromMatrixPosition(o.matrixWorld),y.position.applyMatrix4(d),y.color.copy(a).multiplyScalar(s),y.distance=c,y.direction.setFromMatrixPosition(o.matrixWorld),Se.setFromMatrixPosition(o.target.matrixWorld),y.direction.sub(Se),y.direction.transformDirection(d),y.coneCos=Math.cos(o.angle),y.penumbraCos=Math.cos(o.angle*(1-o.penumbra)),y.decay=0===o.distance?0:o.decay,y.shadow=o.castShadow,o.castShadow&&(y.shadowBias=o.shadow.bias,y.shadowRadius=o.shadow.radius,y.shadowMapSize=o.shadow.mapSize),Te.spotShadowMap[v]=l,Te.spotShadowMatrix[v]=o.shadow.matrix,Te.spot[v++]=y}else if(o instanceof n.PointLight){var y=Ne.get(o);y.position.setFromMatrixPosition(o.matrixWorld),y.position.applyMatrix4(d),y.color.copy(o.color).multiplyScalar(o.intensity),y.distance=o.distance,y.decay=0===o.distance?0:o.decay,y.shadow=o.castShadow,o.castShadow&&(y.shadowBias=o.shadow.bias,y.shadowRadius=o.shadow.radius,y.shadowMapSize=o.shadow.mapSize),Te.pointShadowMap[m]=l,void 0===Te.pointShadowMatrix[m]&&(Te.pointShadowMatrix[m]=new n.Matrix4),Se.setFromMatrixPosition(o.matrixWorld).negate(),Te.pointShadowMatrix[m].identity().setPosition(Se),Te.point[m++]=y}else if(o instanceof n.HemisphereLight){var y=Ne.get(o);y.direction.setFromMatrixPosition(o.matrixWorld),y.direction.transformDirection(d),y.direction.normalize(),y.skyColor.copy(o.color).multiplyScalar(s),y.groundColor.copy(o.groundColor).multiplyScalar(s),Te.hemi[g++]=y}Te.ambient[0]=u,Te.ambient[1]=h,Te.ambient[2]=p,Te.directional.length=f,Te.spot.length=v,Te.point.length=m,Te.hemi.length=g,Te.hash=f+","+m+","+v+","+g+","+Te.shadows.length}function O(){var e=le;return e>=Re.maxTextures&&console.warn("WebGLRenderer: trying to use "+e+" texture units while this GPU supports only "+Re.maxTextures),le+=1,e}function F(e){var t;if(e===n.RepeatWrapping)return Ae.REPEAT;if(e===n.ClampToEdgeWrapping)return Ae.CLAMP_TO_EDGE;if(e===n.MirroredRepeatWrapping)return Ae.MIRRORED_REPEAT;if(e===n.NearestFilter)return Ae.NEAREST;if(e===n.NearestMipMapNearestFilter)return Ae.NEAREST_MIPMAP_NEAREST;if(e===n.NearestMipMapLinearFilter)return Ae.NEAREST_MIPMAP_LINEAR;if(e===n.LinearFilter)return Ae.LINEAR;if(e===n.LinearMipMapNearestFilter)return Ae.LINEAR_MIPMAP_NEAREST;if(e===n.LinearMipMapLinearFilter)return Ae.LINEAR_MIPMAP_LINEAR;if(e===n.UnsignedByteType)return Ae.UNSIGNED_BYTE;if(e===n.UnsignedShort4444Type)return Ae.UNSIGNED_SHORT_4_4_4_4;if(e===n.UnsignedShort5551Type)return Ae.UNSIGNED_SHORT_5_5_5_1;if(e===n.UnsignedShort565Type)return Ae.UNSIGNED_SHORT_5_6_5;if(e===n.ByteType)return Ae.BYTE;if(e===n.ShortType)return Ae.SHORT;if(e===n.UnsignedShortType)return Ae.UNSIGNED_SHORT;if(e===n.IntType)return Ae.INT;if(e===n.UnsignedIntType)return Ae.UNSIGNED_INT;if(e===n.FloatType)return Ae.FLOAT;if(t=Pe.get("OES_texture_half_float"),null!==t&&e===n.HalfFloatType)return t.HALF_FLOAT_OES;if(e===n.AlphaFormat)return Ae.ALPHA;if(e===n.RGBFormat)return Ae.RGB;if(e===n.RGBAFormat)return Ae.RGBA;if(e===n.LuminanceFormat)return Ae.LUMINANCE;if(e===n.LuminanceAlphaFormat)return Ae.LUMINANCE_ALPHA;if(e===n.DepthFormat)return Ae.DEPTH_COMPONENT;if(e===n.AddEquation)return Ae.FUNC_ADD;if(e===n.SubtractEquation)return Ae.FUNC_SUBTRACT;if(e===n.ReverseSubtractEquation)return Ae.FUNC_REVERSE_SUBTRACT;if(e===n.ZeroFactor)return Ae.ZERO;if(e===n.OneFactor)return Ae.ONE;if(e===n.SrcColorFactor)return Ae.SRC_COLOR;if(e===n.OneMinusSrcColorFactor)return Ae.ONE_MINUS_SRC_COLOR;if(e===n.SrcAlphaFactor)return Ae.SRC_ALPHA;if(e===n.OneMinusSrcAlphaFactor)return Ae.ONE_MINUS_SRC_ALPHA;if(e===n.DstAlphaFactor)return Ae.DST_ALPHA;if(e===n.OneMinusDstAlphaFactor)return Ae.ONE_MINUS_DST_ALPHA;if(e===n.DstColorFactor)return Ae.DST_COLOR;if(e===n.OneMinusDstColorFactor)return Ae.ONE_MINUS_DST_COLOR;if(e===n.SrcAlphaSaturateFactor)return Ae.SRC_ALPHA_SATURATE;if(t=Pe.get("WEBGL_compressed_texture_s3tc"),null!==t){if(e===n.RGB_S3TC_DXT1_Format)return t.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===n.RGBA_S3TC_DXT1_Format)return t.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===n.RGBA_S3TC_DXT3_Format)return t.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===n.RGBA_S3TC_DXT5_Format)return t.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(t=Pe.get("WEBGL_compressed_texture_pvrtc"),null!==t){if(e===n.RGB_PVRTC_4BPPV1_Format)return t.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===n.RGB_PVRTC_2BPPV1_Format)return t.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===n.RGBA_PVRTC_4BPPV1_Format)return t.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===n.RGBA_PVRTC_2BPPV1_Format)return t.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t=Pe.get("WEBGL_compressed_texture_etc1"),null!==t&&e===n.RGB_ETC1_Format)return t.COMPRESSED_RGB_ETC1_WEBGL;if(t=Pe.get("EXT_blend_minmax"),null!==t){if(e===n.MinEquation)return t.MIN_EXT;if(e===n.MaxEquation)return t.MAX_EXT}return 0}console.log("THREE.WebGLRenderer",n.REVISION),e=e||{};var N=void 0!==e.canvas?e.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),U=void 0!==e.context?e.context:null,G=void 0!==e.alpha&&e.alpha,V=void 0===e.depth||e.depth,k=void 0===e.stencil||e.stencil,z=void 0!==e.antialias&&e.antialias,j=void 0===e.premultipliedAlpha||e.premultipliedAlpha,H=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,W=[],X=[],q=-1,Y=[],Z=-1,K=new Float32Array(8),Q=[],J=[];this.domElement=N,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=n.LinearToneMapping,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var $=this,ee=null,te=null,re=null,ne=-1,ie="",oe=null,ae=new n.Vector4,se=null,ce=new n.Vector4,le=0,ue=new n.Color(0),he=0,pe=N.width,de=N.height,fe=1,me=new n.Vector4(0,0,pe,de),ve=!1,ge=new n.Vector4(0,0,pe,de),ye=new n.Frustum,xe=new n.WebGLClipping,be=!1,we=!1,_e=new n.Sphere,Me=new n.Matrix4,Se=new n.Vector3,Te={hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],shadows:[]},Ee={calls:0,vertices:0,faces:0,points:0};this.info={render:Ee,memory:{geometries:0,textures:0},programs:null};var Ae;try{var Ce={alpha:G,depth:V,stencil:k,antialias:z,premultipliedAlpha:j,preserveDrawingBuffer:H};if(Ae=U||N.getContext("webgl",Ce)||N.getContext("experimental-webgl",Ce),null===Ae)throw null!==N.getContext("webgl")?"Error creating WebGL context with your selected attributes.":"Error creating WebGL context.";void 0===Ae.getShaderPrecisionFormat&&(Ae.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}),N.addEventListener("webglcontextlost",a,!1)}catch(Le){console.error("THREE.WebGLRenderer: "+Le)}var Pe=new n.WebGLExtensions(Ae);Pe.get("WEBGL_depth_texture"),Pe.get("OES_texture_float"),Pe.get("OES_texture_float_linear"),Pe.get("OES_texture_half_float"),Pe.get("OES_texture_half_float_linear"),Pe.get("OES_standard_derivatives"),Pe.get("ANGLE_instanced_arrays"),Pe.get("OES_element_index_uint")&&(n.BufferGeometry.MaxIndex=4294967296);var Re=new n.WebGLCapabilities(Ae,Pe,e),De=new n.WebGLState(Ae,Pe,F),Ie=new n.WebGLProperties,Be=new n.WebGLTextures(Ae,Pe,De,Ie,Re,F,this.info),Oe=new n.WebGLObjects(Ae,Ie,this.info),Fe=new n.WebGLPrograms(this,Re),Ne=new n.WebGLLights;this.info.programs=Fe.programs;var Ue=new n.WebGLBufferRenderer(Ae,Pe,Ee),Ge=new n.WebGLIndexedBufferRenderer(Ae,Pe,Ee),Ve=new n.OrthographicCamera((-1),1,1,(-1),0,1),ke=new n.PerspectiveCamera,ze=new n.Mesh(new n.PlaneBufferGeometry(2,2),new n.MeshBasicMaterial({depthTest:!1,depthWrite:!1,fog:!1})),je=n.ShaderLib.cube,He=new n.Mesh(new n.BoxBufferGeometry(5,5,5),new n.ShaderMaterial({uniforms:je.uniforms,vertexShader:je.vertexShader,fragmentShader:je.fragmentShader,side:n.BackSide,depthTest:!1,depthWrite:!1,fog:!1}));i(),this.context=Ae,this.capabilities=Re,this.extensions=Pe,this.properties=Ie,this.state=De;var We=new n.WebGLShadowMap(this,Te,Oe,Re);this.shadowMap=We;var Xe=new n.SpritePlugin(this,Q),qe=new n.LensFlarePlugin(this,J);this.getContext=function(){return Ae},this.getContextAttributes=function(){return Ae.getContextAttributes()},this.forceContextLoss=function(){Pe.get("WEBGL_lose_context").loseContext()},this.getMaxAnisotropy=function(){return Re.getMaxAnisotropy()},this.getPrecision=function(){return Re.precision},this.getPixelRatio=function(){return fe},this.setPixelRatio=function(e){void 0!==e&&(fe=e,this.setSize(ge.z,ge.w,!1))},this.getSize=function(){return{width:pe,height:de}},this.setSize=function(e,t,r){pe=e,de=t,N.width=e*fe,N.height=t*fe,r!==!1&&(N.style.width=e+"px",N.style.height=t+"px"),this.setViewport(0,0,e,t)},this.setViewport=function(e,t,r,n){De.viewport(ge.set(e,t,r,n))},this.setScissor=function(e,t,r,n){De.scissor(me.set(e,t,r,n))},this.setScissorTest=function(e){De.setScissorTest(ve=e)},this.getClearColor=function(){return ue},this.setClearColor=function(e,t){ue.set(e),he=void 0!==t?t:1,r(ue.r,ue.g,ue.b,he)},this.getClearAlpha=function(){return he},this.setClearAlpha=function(e){he=e,r(ue.r,ue.g,ue.b,he)},this.clear=function(e,t,r){var n=0;(void 0===e||e)&&(n|=Ae.COLOR_BUFFER_BIT),(void 0===t||t)&&(n|=Ae.DEPTH_BUFFER_BIT),(void 0===r||r)&&(n|=Ae.STENCIL_BUFFER_BIT),Ae.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.clearTarget=function(e,t,r,n){this.setRenderTarget(e),this.clear(t,r,n)},this.resetGLState=o,this.dispose=function(){Y=[],Z=-1,X=[],q=-1,N.removeEventListener("webglcontextlost",a,!1)},this.renderBufferImmediate=function(e,t,r){De.initAttributes();var i=Ie.get(e);e.hasPositions&&!i.position&&(i.position=Ae.createBuffer()),e.hasNormals&&!i.normal&&(i.normal=Ae.createBuffer()),e.hasUvs&&!i.uv&&(i.uv=Ae.createBuffer()),e.hasColors&&!i.color&&(i.color=Ae.createBuffer());var o=t.getAttributes();if(e.hasPositions&&(Ae.bindBuffer(Ae.ARRAY_BUFFER,i.position),Ae.bufferData(Ae.ARRAY_BUFFER,e.positionArray,Ae.DYNAMIC_DRAW),De.enableAttribute(o.position),Ae.vertexAttribPointer(o.position,3,Ae.FLOAT,!1,0,0)),e.hasNormals){if(Ae.bindBuffer(Ae.ARRAY_BUFFER,i.normal),"MeshPhongMaterial"!==r.type&&"MeshStandardMaterial"!==r.type&&"MeshPhysicalMaterial"!==r.type&&r.shading===n.FlatShading)for(var a=0,s=3*e.count;a<s;a+=9){var c=e.normalArray,l=(c[a+0]+c[a+3]+c[a+6])/3,u=(c[a+1]+c[a+4]+c[a+7])/3,h=(c[a+2]+c[a+5]+c[a+8])/3;c[a+0]=l,c[a+1]=u,c[a+2]=h,c[a+3]=l,c[a+4]=u,c[a+5]=h,c[a+6]=l,c[a+7]=u,c[a+8]=h}Ae.bufferData(Ae.ARRAY_BUFFER,e.normalArray,Ae.DYNAMIC_DRAW),De.enableAttribute(o.normal),Ae.vertexAttribPointer(o.normal,3,Ae.FLOAT,!1,0,0)}e.hasUvs&&r.map&&(Ae.bindBuffer(Ae.ARRAY_BUFFER,i.uv),Ae.bufferData(Ae.ARRAY_BUFFER,e.uvArray,Ae.DYNAMIC_DRAW),De.enableAttribute(o.uv),Ae.vertexAttribPointer(o.uv,2,Ae.FLOAT,!1,0,0)),e.hasColors&&r.vertexColors!==n.NoColors&&(Ae.bindBuffer(Ae.ARRAY_BUFFER,i.color),Ae.bufferData(Ae.ARRAY_BUFFER,e.colorArray,Ae.DYNAMIC_DRAW),De.enableAttribute(o.color),Ae.vertexAttribPointer(o.color,3,Ae.FLOAT,!1,0,0)),De.disableUnusedAttributes(),Ae.drawArrays(Ae.TRIANGLES,0,e.count),e.count=0},this.renderBufferDirect=function(e,r,i,o,a,s){w(o);var c=_(e,r,o,a),l=!1,p=i.id+"_"+c.id+"_"+o.wireframe;p!==ie&&(ie=p,l=!0);var d=a.morphTargetInfluences;if(void 0!==d){for(var f=[],m=0,v=d.length;m<v;m++){var g=d[m];f.push([g,m])}f.sort(h),f.length>8&&(f.length=8);for(var y=i.morphAttributes,m=0,v=f.length;m<v;m++){var g=f[m];if(K[m]=g[0],0!==g[0]){var x=g[1];o.morphTargets===!0&&y.position&&i.addAttribute("morphTarget"+m,y.position[x]),o.morphNormals===!0&&y.normal&&i.addAttribute("morphNormal"+m,y.normal[x])}else o.morphTargets===!0&&i.removeAttribute("morphTarget"+m),o.morphNormals===!0&&i.removeAttribute("morphNormal"+m)}c.getUniforms().setValue(Ae,"morphTargetInfluences",K),l=!0}var x=i.index,b=i.attributes.position;o.wireframe===!0&&(x=Oe.getWireframeAttribute(i));var M;null!==x?(M=Ge,M.setIndex(x)):M=Ue,l&&(u(o,c,i),null!==x&&Ae.bindBuffer(Ae.ELEMENT_ARRAY_BUFFER,Oe.getAttributeBuffer(x)));var S=0,T=1/0;null!==x?T=x.count:void 0!==b&&(T=b.count);var E=i.drawRange.start,A=i.drawRange.count,C=null!==s?s.start:0,L=null!==s?s.count:1/0,P=Math.max(S,E,C),R=Math.min(S+T,E+A,C+L)-1,D=Math.max(0,R-P+1);if(a instanceof n.Mesh)if(o.wireframe===!0)De.setLineWidth(o.wireframeLinewidth*t()),M.setMode(Ae.LINES);else switch(a.drawMode){case n.TrianglesDrawMode:M.setMode(Ae.TRIANGLES);break;case n.TriangleStripDrawMode:M.setMode(Ae.TRIANGLE_STRIP);break;case n.TriangleFanDrawMode:M.setMode(Ae.TRIANGLE_FAN)}else if(a instanceof n.Line){var I=o.linewidth;void 0===I&&(I=1),De.setLineWidth(I*t()),a instanceof n.LineSegments?M.setMode(Ae.LINES):M.setMode(Ae.LINE_STRIP)}else a instanceof n.Points&&M.setMode(Ae.POINTS);i instanceof n.InstancedBufferGeometry?i.maxInstancedCount>0&&M.renderInstances(i,P,D):M.render(P,D)},this.render=function(e,t,i,o){if(t instanceof n.Camera==!1)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");var a=e.fog;ie="",ne=-1,oe=null,e.autoUpdate===!0&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),t.matrixWorldInverse.getInverse(t.matrixWorld),Me.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),ye.setFromMatrix(Me),W.length=0,q=-1,Z=-1,Q.length=0,J.length=0,we=this.localClippingEnabled,be=xe.init(this.clippingPlanes,we,t),y(e,t),X.length=q+1,Y.length=Z+1,$.sortObjects===!0&&(X.sort(p),Y.sort(d)),be&&xe.beginShadows(),I(W),We.render(e,t),B(W,t),be&&xe.endShadows(),Ee.calls=0,Ee.vertices=0,Ee.faces=0,Ee.points=0,void 0===i&&(i=null),this.setRenderTarget(i);var s=e.background;if(null===s?r(ue.r,ue.g,ue.b,he):s instanceof n.Color&&r(s.r,s.g,s.b,1),(this.autoClear||o)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil),s instanceof n.CubeTexture?(ke.projectionMatrix.copy(t.projectionMatrix),ke.matrixWorld.extractRotation(t.matrixWorld),ke.matrixWorldInverse.getInverse(ke.matrixWorld),He.material.uniforms.tCube.value=s,He.modelViewMatrix.multiplyMatrices(ke.matrixWorldInverse,He.matrixWorld),Oe.update(He),$.renderBufferDirect(ke,null,He.geometry,He.material,He,null)):s instanceof n.Texture&&(ze.material.map=s,Oe.update(ze),$.renderBufferDirect(Ve,null,ze.geometry,ze.material,ze,null)),e.overrideMaterial){var c=e.overrideMaterial;x(X,t,a,c),x(Y,t,a,c)}else De.setBlending(n.NoBlending),x(X,t,a),x(Y,t,a);Xe.render(e,t),qe.render(e,t,ce),i&&Be.updateRenderTargetMipmap(i),De.setDepthTest(!0),De.setDepthWrite(!0),De.setColorWrite(!0)},this.setFaceCulling=function(e,t){De.setCullFace(e),De.setFlipSided(t===n.FrontFaceDirectionCW)},this.allocTextureUnit=O,this.setTexture2D=function(){var e=!1;return function(t,r){t instanceof n.WebGLRenderTarget&&(e||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),e=!0),t=t.texture),Be.setTexture2D(t,r)}}(),this.setTexture=function(){var e=!1;return function(t,r){e||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),e=!0),Be.setTexture2D(t,r)}}(),this.setTextureCube=function(){var e=!1;return function(t,r){t instanceof n.WebGLRenderTargetCube&&(e||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),e=!0),t=t.texture),t instanceof n.CubeTexture||Array.isArray(t.image)&&6===t.image.length?Be.setTextureCube(t,r):Be.setTextureCubeDynamic(t,r)}}(),this.getCurrentRenderTarget=function(){return te},this.setRenderTarget=function(e){te=e,e&&void 0===Ie.get(e).__webglFramebuffer&&Be.setupRenderTarget(e);var t,r=e instanceof n.WebGLRenderTargetCube;if(e){var i=Ie.get(e);t=r?i.__webglFramebuffer[e.activeCubeFace]:i.__webglFramebuffer,ae.copy(e.scissor),se=e.scissorTest,ce.copy(e.viewport)}else t=null,ae.copy(me).multiplyScalar(fe),se=ve,ce.copy(ge).multiplyScalar(fe);if(re!==t&&(Ae.bindFramebuffer(Ae.FRAMEBUFFER,t),re=t),De.scissor(ae),De.setScissorTest(se),De.viewport(ce),r){var o=Ie.get(e.texture);Ae.framebufferTexture2D(Ae.FRAMEBUFFER,Ae.COLOR_ATTACHMENT0,Ae.TEXTURE_CUBE_MAP_POSITIVE_X+e.activeCubeFace,o.__webglTexture,e.activeMipMapLevel)}},this.readRenderTargetPixels=function(e,t,r,i,o,a){if(e instanceof n.WebGLRenderTarget==!1)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");var s=Ie.get(e).__webglFramebuffer;if(s){var c=!1;s!==re&&(Ae.bindFramebuffer(Ae.FRAMEBUFFER,s),c=!0);try{var l=e.texture;if(l.format!==n.RGBAFormat&&F(l.format)!==Ae.getParameter(Ae.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(l.type===n.UnsignedByteType||F(l.type)===Ae.getParameter(Ae.IMPLEMENTATION_COLOR_READ_TYPE)||l.type===n.FloatType&&Pe.get("WEBGL_color_buffer_float")||l.type===n.HalfFloatType&&Pe.get("EXT_color_buffer_half_float")))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");Ae.checkFramebufferStatus(Ae.FRAMEBUFFER)===Ae.FRAMEBUFFER_COMPLETE?t>=0&&t<=e.width-i&&r>=0&&r<=e.height-o&&Ae.readPixels(t,r,i,o,F(l.format),F(l.type),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{c&&Ae.bindFramebuffer(Ae.FRAMEBUFFER,re)}}}},n.WebGLRenderTarget=function(e,t,r){this.uuid=n.Math.generateUUID(),this.width=e,this.height=t,this.scissor=new n.Vector4(0,0,e,t),this.scissorTest=!1,this.viewport=new n.Vector4(0,0,e,t),r=r||{},void 0===r.minFilter&&(r.minFilter=n.LinearFilter),this.texture=new n.Texture((void 0),(void 0),r.wrapS,r.wrapT,r.magFilter,r.minFilter,r.format,r.type,r.anisotropy,r.encoding),this.depthBuffer=void 0===r.depthBuffer||r.depthBuffer,this.stencilBuffer=void 0===r.stencilBuffer||r.stencilBuffer,this.depthTexture=null},Object.assign(n.WebGLRenderTarget.prototype,n.EventDispatcher.prototype,{setSize:function(e,t){this.width===e&&this.height===t||(this.width=e,this.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),n.WebGLRenderTargetCube=function(e,t,r){n.WebGLRenderTarget.call(this,e,t,r),this.activeCubeFace=0,this.activeMipMapLevel=0},n.WebGLRenderTargetCube.prototype=Object.create(n.WebGLRenderTarget.prototype),n.WebGLRenderTargetCube.prototype.constructor=n.WebGLRenderTargetCube,n.WebGLBufferRenderer=function(e,t,r){function i(e){s=e}function o(t,n){e.drawArrays(s,t,n),r.calls++,r.vertices+=n,s===e.TRIANGLES&&(r.faces+=n/3)}function a(i){var o=t.get("ANGLE_instanced_arrays");if(null===o)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");var a=i.attributes.position,c=0;a instanceof n.InterleavedBufferAttribute?(c=a.data.count,o.drawArraysInstancedANGLE(s,0,c,i.maxInstancedCount)):(c=a.count,o.drawArraysInstancedANGLE(s,0,c,i.maxInstancedCount)),r.calls++,r.vertices+=c*i.maxInstancedCount,s===e.TRIANGLES&&(r.faces+=i.maxInstancedCount*c/3)}var s;this.setMode=i,this.render=o,this.renderInstances=a},n.WebGLClipping=function(){function e(){u.value!==i&&(u.value=i,u.needsUpdate=o>0),r.numPlanes=o}function t(e,t,n,i){var o=null!==e?e.length:0,a=null;if(0!==o){if(a=u.value,i!==!0||null===a){var s=n+4*o,h=t.matrixWorldInverse;l.getNormalMatrix(h),(null===a||a.length<s)&&(a=new Float32Array(s));for(var p=0,d=n;p!==o;++p,d+=4)c.copy(e[p]).applyMatrix4(h,l),c.normal.toArray(a,d),a[d+3]=c.constant}u.value=a,u.needsUpdate=!0}return r.numPlanes=o,a}var r=this,i=null,o=0,a=!1,s=!1,c=new n.Plane,l=new n.Matrix3,u={value:null,needsUpdate:!1};this.uniform=u,this.numPlanes=0,this.init=function(e,r,n){var s=0!==e.length||r||0!==o||a;return a=r,i=t(e,n,0),o=e.length,s},this.beginShadows=function(){s=!0,t(null)},this.endShadows=function(){s=!1,e()},this.setState=function(r,n,c,l,h){if(!a||null===r||0===r.length||s&&!n)s?t(null):e();else{var p=s?0:o,d=4*p,f=l.clippingState||null;u.value=f,f=t(r,c,d,h);for(var m=0;m!==d;++m)f[m]=i[m];l.clippingState=f,this.numPlanes+=p}}},n.WebGLIndexedBufferRenderer=function(e,t,r){function n(e){s=e}function i(r){r.array instanceof Uint32Array&&t.get("OES_element_index_uint")?(c=e.UNSIGNED_INT,l=4):(c=e.UNSIGNED_SHORT,l=2)}function o(t,n){e.drawElements(s,n,c,t*l),r.calls++,r.vertices+=n,s===e.TRIANGLES&&(r.faces+=n/3)}function a(n,i,o){var a=t.get("ANGLE_instanced_arrays");return null===a?void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."):(a.drawElementsInstancedANGLE(s,o,c,i*l,n.maxInstancedCount),r.calls++,r.vertices+=o*n.maxInstancedCount,void(s===e.TRIANGLES&&(r.faces+=n.maxInstancedCount*o/3)))}var s,c,l;this.setMode=n,this.setIndex=i,this.render=o,this.renderInstances=a},n.WebGLExtensions=function(e){var t={};this.get=function(r){if(void 0!==t[r])return t[r];var n;switch(r){case"WEBGL_depth_texture":n=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;case"WEBGL_compressed_texture_etc1":n=e.getExtension("WEBGL_compressed_texture_etc1");break;default:n=e.getExtension(r)}return null===n&&console.warn("THREE.WebGLRenderer: "+r+" extension not supported."),t[r]=n,n}},n.WebGLCapabilities=function(e,t,r){function n(){if(void 0!==o)return o;var r=t.get("EXT_texture_filter_anisotropic");return o=null!==r?e.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}function i(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}var o;this.getMaxAnisotropy=n,this.getMaxPrecision=i,this.precision=void 0!==r.precision?r.precision:"highp",this.logarithmicDepthBuffer=void 0!==r.logarithmicDepthBuffer&&r.logarithmicDepthBuffer,this.maxTextures=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),this.maxVertexTextures=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),this.maxTextureSize=e.getParameter(e.MAX_TEXTURE_SIZE),this.maxCubemapSize=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),this.maxAttributes=e.getParameter(e.MAX_VERTEX_ATTRIBS),this.maxVertexUniforms=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),this.maxVaryings=e.getParameter(e.MAX_VARYING_VECTORS),this.maxFragmentUniforms=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),this.vertexTextures=this.maxVertexTextures>0,this.floatFragmentTextures=!!t.get("OES_texture_float"),this.floatVertexTextures=this.vertexTextures&&this.floatFragmentTextures;var a=i(this.precision);a!==this.precision&&(console.warn("THREE.WebGLRenderer:",this.precision,"not supported, using",a,"instead."),this.precision=a),this.logarithmicDepthBuffer&&(this.logarithmicDepthBuffer=!!t.get("EXT_frag_depth"))},n.WebGLGeometries=function(e,t,r){function i(e){var t=e.geometry;if(void 0!==u[t.id])return u[t.id];t.addEventListener("dispose",o);var i;return t instanceof n.BufferGeometry?i=t:t instanceof n.Geometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new n.BufferGeometry).setFromObject(e)),i=t._bufferGeometry),u[t.id]=i,r.memory.geometries++,i}function o(e){var n=e.target,i=u[n.id];null!==i.index&&s(i.index),c(i.attributes),n.removeEventListener("dispose",o),delete u[n.id];var a=t.get(n);a.wireframe&&s(a.wireframe),t["delete"](n);var l=t.get(i);l.wireframe&&s(l.wireframe),t["delete"](i),r.memory.geometries--}function a(e){return e instanceof n.InterleavedBufferAttribute?t.get(e.data).__webglBuffer:t.get(e).__webglBuffer}function s(t){var r=a(t);void 0!==r&&(e.deleteBuffer(r),l(t))}function c(e){for(var t in e)s(e[t])}function l(e){e instanceof n.InterleavedBufferAttribute?t["delete"](e.data):t["delete"](e)}var u={};this.get=i},n.WebGLLights=function(){var e={};this.get=function(t){if(void 0!==e[t.id])return e[t.id];var r;switch(t.type){case"DirectionalLight":r={direction:new n.Vector3,color:new n.Color,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new n.Vector2};break;case"SpotLight":r={position:new n.Vector3,direction:new n.Vector3,color:new n.Color,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new n.Vector2};break;case"PointLight":r={position:new n.Vector3,color:new n.Color,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new n.Vector2};break;case"HemisphereLight":r={direction:new n.Vector3,skyColor:new n.Color,groundColor:new n.Color}}return e[t.id]=r,r}},n.WebGLObjects=function(e,t,r){function i(t){var r=h.get(t);t.geometry instanceof n.Geometry&&r.updateFromObject(t);var i=r.index,a=r.attributes;null!==i&&o(i,e.ELEMENT_ARRAY_BUFFER);for(var s in a)o(a[s],e.ARRAY_BUFFER);var c=r.morphAttributes;for(var s in c)for(var l=c[s],u=0,p=l.length;u<p;u++)o(l[u],e.ARRAY_BUFFER);return r}function o(e,r){var i=e instanceof n.InterleavedBufferAttribute?e.data:e,o=t.get(i);void 0===o.__webglBuffer?a(o,i,r):o.version!==i.version&&s(o,i,r)}function a(t,r,n){t.__webglBuffer=e.createBuffer(),e.bindBuffer(n,t.__webglBuffer);var i=r.dynamic?e.DYNAMIC_DRAW:e.STATIC_DRAW;e.bufferData(n,r.array,i),t.version=r.version}function s(t,r,n){e.bindBuffer(n,t.__webglBuffer),r.dynamic===!1||r.updateRange.count===-1?e.bufferSubData(n,0,r.array):0===r.updateRange.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(e.bufferSubData(n,r.updateRange.offset*r.array.BYTES_PER_ELEMENT,r.array.subarray(r.updateRange.offset,r.updateRange.offset+r.updateRange.count)),r.updateRange.count=0),t.version=r.version}function c(e){return e instanceof n.InterleavedBufferAttribute?t.get(e.data).__webglBuffer:t.get(e).__webglBuffer}function l(r){var i=t.get(r);if(void 0!==i.wireframe)return i.wireframe;var a=[],s=r.index,c=r.attributes,l=c.position;if(null!==s)for(var h={},p=s.array,d=0,f=p.length;d<f;d+=3){var m=p[d+0],v=p[d+1],g=p[d+2];u(h,m,v)&&a.push(m,v),u(h,v,g)&&a.push(v,g),u(h,g,m)&&a.push(g,m)}else for(var p=c.position.array,d=0,f=p.length/3-1;d<f;d+=3){var m=d+0,v=d+1,g=d+2;a.push(m,v,v,g,g,m)}var y=l.count>65535?Uint32Array:Uint16Array,x=new n.BufferAttribute(new y(a),1);return o(x,e.ELEMENT_ARRAY_BUFFER),i.wireframe=x,x}function u(e,t,r){if(t>r){var n=t;t=r,r=n}var i=e[t];return void 0===i?(e[t]=[r],!0):i.indexOf(r)===-1&&(i.push(r),!0)}var h=new n.WebGLGeometries(e,t,r);this.getAttributeBuffer=c,this.getWireframeAttribute=l,this.update=i},n.WebGLProgram=function(){function e(e){switch(e){case n.LinearEncoding:return["Linear","( value )"];case n.sRGBEncoding:return["sRGB","( value )"];case n.RGBEEncoding:return["RGBE","( value )"];case n.RGBM7Encoding:return["RGBM","( value, 7.0 )"];case n.RGBM16Encoding:return["RGBM","( value, 16.0 )"];case n.RGBDEncoding:return["RGBD","( value, 256.0 )"];case n.GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+e)}}function t(t,r){var n=e(r);return"vec4 "+t+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function r(t,r){var n=e(r);return"vec4 "+t+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function i(e,t){var r;switch(t){case n.LinearToneMapping:r="Linear";break;case n.ReinhardToneMapping:r="Reinhard";break;case n.Uncharted2ToneMapping:r="Uncharted2";break;case n.CineonToneMapping:r="OptimizedCineon";break;default:throw new Error("unsupported toneMapping: "+t)}return"vec3 "+e+"( vec3 color ) { return "+r+"ToneMapping( color ); }"}function o(e,t,r){e=e||{};var n=[e.derivatives||t.envMapCubeUV||t.bumpMap||t.normalMap||t.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(e.fragDepth||t.logarithmicDepthBuffer)&&r.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",e.drawBuffers&&r.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(e.shaderTextureLOD||t.envMap)&&r.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""];
return n.filter(c).join("\n")}function a(e){var t=[];for(var r in e){var n=e[r];n!==!1&&t.push("#define "+r+" "+n)}return t.join("\n")}function s(e,t,r){for(var n={},i=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),o=0;o<i;o++){var a=e.getActiveAttrib(t,o),s=a.name;n[s]=e.getAttribLocation(t,s)}return n}function c(e){return""!==e}function l(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights)}function u(e){function t(e,t){var r=n.ShaderChunk[t];if(void 0===r)throw new Error("Can not resolve #include <"+t+">");return u(r)}var r=/#include +<([\w\d.]+)>/g;return e.replace(r,t)}function h(e){function t(e,t,r,n){for(var i="",o=parseInt(t);o<parseInt(r);o++)i+=n.replace(/\[ i \]/g,"[ "+o+" ]");return i}var r=/for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;return e.replace(r,t)}var p=0;return function(e,d,f,m){var v=e.context,g=f.extensions,y=f.defines,x=f.__webglShader.vertexShader,b=f.__webglShader.fragmentShader,w="SHADOWMAP_TYPE_BASIC";m.shadowMapType===n.PCFShadowMap?w="SHADOWMAP_TYPE_PCF":m.shadowMapType===n.PCFSoftShadowMap&&(w="SHADOWMAP_TYPE_PCF_SOFT");var _="ENVMAP_TYPE_CUBE",M="ENVMAP_MODE_REFLECTION",S="ENVMAP_BLENDING_MULTIPLY";if(m.envMap){switch(f.envMap.mapping){case n.CubeReflectionMapping:case n.CubeRefractionMapping:_="ENVMAP_TYPE_CUBE";break;case n.CubeUVReflectionMapping:case n.CubeUVRefractionMapping:_="ENVMAP_TYPE_CUBE_UV";break;case n.EquirectangularReflectionMapping:case n.EquirectangularRefractionMapping:_="ENVMAP_TYPE_EQUIREC";break;case n.SphericalReflectionMapping:_="ENVMAP_TYPE_SPHERE"}switch(f.envMap.mapping){case n.CubeRefractionMapping:case n.EquirectangularRefractionMapping:M="ENVMAP_MODE_REFRACTION"}switch(f.combine){case n.MultiplyOperation:S="ENVMAP_BLENDING_MULTIPLY";break;case n.MixOperation:S="ENVMAP_BLENDING_MIX";break;case n.AddOperation:S="ENVMAP_BLENDING_ADD"}}var T,E,A=e.gammaFactor>0?e.gammaFactor:1,C=o(g,m,e.extensions),L=a(y),P=v.createProgram();f instanceof n.RawShaderMaterial?(T=[L].filter(c).join("\n"),E=[L].filter(c).join("\n")):(T=["precision "+m.precision+" float;","precision "+m.precision+" int;","#define SHADER_NAME "+f.__webglShader.name,L,m.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+A,"#define MAX_BONES "+m.maxBones,m.map?"#define USE_MAP":"",m.envMap?"#define USE_ENVMAP":"",m.envMap?"#define "+M:"",m.lightMap?"#define USE_LIGHTMAP":"",m.aoMap?"#define USE_AOMAP":"",m.emissiveMap?"#define USE_EMISSIVEMAP":"",m.bumpMap?"#define USE_BUMPMAP":"",m.normalMap?"#define USE_NORMALMAP":"",m.displacementMap&&m.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",m.specularMap?"#define USE_SPECULARMAP":"",m.roughnessMap?"#define USE_ROUGHNESSMAP":"",m.metalnessMap?"#define USE_METALNESSMAP":"",m.alphaMap?"#define USE_ALPHAMAP":"",m.vertexColors?"#define USE_COLOR":"",m.flatShading?"#define FLAT_SHADED":"",m.skinning?"#define USE_SKINNING":"",m.useVertexTexture?"#define BONE_TEXTURE":"",m.morphTargets?"#define USE_MORPHTARGETS":"",m.morphNormals&&m.flatShading===!1?"#define USE_MORPHNORMALS":"",m.doubleSided?"#define DOUBLE_SIDED":"",m.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+m.numClippingPlanes,m.shadowMapEnabled?"#define USE_SHADOWMAP":"",m.shadowMapEnabled?"#define "+w:"",m.sizeAttenuation?"#define USE_SIZEATTENUATION":"",m.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",m.logarithmicDepthBuffer&&e.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(c).join("\n"),E=[C,"precision "+m.precision+" float;","precision "+m.precision+" int;","#define SHADER_NAME "+f.__webglShader.name,L,m.alphaTest?"#define ALPHATEST "+m.alphaTest:"","#define GAMMA_FACTOR "+A,m.useFog&&m.fog?"#define USE_FOG":"",m.useFog&&m.fogExp?"#define FOG_EXP2":"",m.map?"#define USE_MAP":"",m.envMap?"#define USE_ENVMAP":"",m.envMap?"#define "+_:"",m.envMap?"#define "+M:"",m.envMap?"#define "+S:"",m.lightMap?"#define USE_LIGHTMAP":"",m.aoMap?"#define USE_AOMAP":"",m.emissiveMap?"#define USE_EMISSIVEMAP":"",m.bumpMap?"#define USE_BUMPMAP":"",m.normalMap?"#define USE_NORMALMAP":"",m.specularMap?"#define USE_SPECULARMAP":"",m.roughnessMap?"#define USE_ROUGHNESSMAP":"",m.metalnessMap?"#define USE_METALNESSMAP":"",m.alphaMap?"#define USE_ALPHAMAP":"",m.vertexColors?"#define USE_COLOR":"",m.flatShading?"#define FLAT_SHADED":"",m.doubleSided?"#define DOUBLE_SIDED":"",m.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+m.numClippingPlanes,m.shadowMapEnabled?"#define USE_SHADOWMAP":"",m.shadowMapEnabled?"#define "+w:"",m.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",m.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",m.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",m.logarithmicDepthBuffer&&e.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",m.envMap&&e.extensions.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",m.toneMapping!==n.NoToneMapping?"#define TONE_MAPPING":"",m.toneMapping!==n.NoToneMapping?n.ShaderChunk.tonemapping_pars_fragment:"",m.toneMapping!==n.NoToneMapping?i("toneMapping",m.toneMapping):"",m.outputEncoding||m.mapEncoding||m.envMapEncoding||m.emissiveMapEncoding?n.ShaderChunk.encodings_pars_fragment:"",m.mapEncoding?t("mapTexelToLinear",m.mapEncoding):"",m.envMapEncoding?t("envMapTexelToLinear",m.envMapEncoding):"",m.emissiveMapEncoding?t("emissiveMapTexelToLinear",m.emissiveMapEncoding):"",m.outputEncoding?r("linearToOutputTexel",m.outputEncoding):"",m.depthPacking?"#define DEPTH_PACKING "+f.depthPacking:"","\n"].filter(c).join("\n")),x=u(x,m),x=l(x,m),b=u(b,m),b=l(b,m),f instanceof n.ShaderMaterial==!1&&(x=h(x),b=h(b));var R=T+x,D=E+b,I=n.WebGLShader(v,v.VERTEX_SHADER,R),B=n.WebGLShader(v,v.FRAGMENT_SHADER,D);v.attachShader(P,I),v.attachShader(P,B),void 0!==f.index0AttributeName?v.bindAttribLocation(P,0,f.index0AttributeName):m.morphTargets===!0&&v.bindAttribLocation(P,0,"position"),v.linkProgram(P);var O=v.getProgramInfoLog(P),F=v.getShaderInfoLog(I),N=v.getShaderInfoLog(B),U=!0,G=!0;v.getProgramParameter(P,v.LINK_STATUS)===!1?(U=!1,console.error("THREE.WebGLProgram: shader error: ",v.getError(),"gl.VALIDATE_STATUS",v.getProgramParameter(P,v.VALIDATE_STATUS),"gl.getProgramInfoLog",O,F,N)):""!==O?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",O):""!==F&&""!==N||(G=!1),G&&(this.diagnostics={runnable:U,material:f,programLog:O,vertexShader:{log:F,prefix:T},fragmentShader:{log:N,prefix:E}}),v.deleteShader(I),v.deleteShader(B);var V;this.getUniforms=function(){return void 0===V&&(V=new n.WebGLUniforms(v,P,e)),V};var k;return this.getAttributes=function(){return void 0===k&&(k=s(v,P)),k},this.destroy=function(){v.deleteProgram(P),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.id=p++,this.code=d,this.usedTimes=1,this.program=P,this.vertexShader=I,this.fragmentShader=B,this}}(),n.WebGLPrograms=function(e,t){function r(e){if(t.floatVertexTextures&&e&&e.skeleton&&e.skeleton.useVertexTexture)return 1024;var r=t.maxVertexUniforms,i=Math.floor((r-20)/4),o=i;return void 0!==e&&e instanceof n.SkinnedMesh&&(o=Math.min(e.skeleton.bones.length,o),o<e.skeleton.bones.length&&console.warn("WebGLRenderer: too many bones - "+e.skeleton.bones.length+", this GPU supports just "+o+" (try OpenGL instead of ANGLE)")),o}function i(e,t){var r;return e?e instanceof n.Texture?r=e.encoding:e instanceof n.WebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),r=e.texture.encoding):r=n.LinearEncoding,r===n.LinearEncoding&&t&&(r=n.GammaEncoding),r}var o=[],a={MeshDepthMaterial:"depth",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points"},s=["precision","supportsVertexTextures","map","mapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","displacementMap","specularMap","roughnessMap","metalnessMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","depthPacking"];this.getParameters=function(o,s,c,l,u){var h=a[o.type],p=r(u),d=e.getPrecision();null!==o.precision&&(d=t.getMaxPrecision(o.precision),d!==o.precision&&console.warn("THREE.WebGLProgram.getParameters:",o.precision,"not supported, using",d,"instead."));var f=e.getCurrentRenderTarget(),m={shaderID:h,precision:d,supportsVertexTextures:t.vertexTextures,outputEncoding:i(f?f.texture:null,e.gammaOutput),map:!!o.map,mapEncoding:i(o.map,e.gammaInput),envMap:!!o.envMap,envMapMode:o.envMap&&o.envMap.mapping,envMapEncoding:i(o.envMap,e.gammaInput),envMapCubeUV:!!o.envMap&&(o.envMap.mapping===n.CubeUVReflectionMapping||o.envMap.mapping===n.CubeUVRefractionMapping),lightMap:!!o.lightMap,aoMap:!!o.aoMap,emissiveMap:!!o.emissiveMap,emissiveMapEncoding:i(o.emissiveMap,e.gammaInput),bumpMap:!!o.bumpMap,normalMap:!!o.normalMap,displacementMap:!!o.displacementMap,roughnessMap:!!o.roughnessMap,metalnessMap:!!o.metalnessMap,specularMap:!!o.specularMap,alphaMap:!!o.alphaMap,combine:o.combine,vertexColors:o.vertexColors,fog:!!c,useFog:o.fog,fogExp:c instanceof n.FogExp2,flatShading:o.shading===n.FlatShading,sizeAttenuation:o.sizeAttenuation,logarithmicDepthBuffer:t.logarithmicDepthBuffer,skinning:o.skinning,maxBones:p,useVertexTexture:t.floatVertexTextures&&u&&u.skeleton&&u.skeleton.useVertexTexture,morphTargets:o.morphTargets,morphNormals:o.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:s.directional.length,numPointLights:s.point.length,numSpotLights:s.spot.length,numHemiLights:s.hemi.length,numClippingPlanes:l,shadowMapEnabled:e.shadowMap.enabled&&u.receiveShadow&&s.shadows.length>0,shadowMapType:e.shadowMap.type,toneMapping:e.toneMapping,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:o.premultipliedAlpha,alphaTest:o.alphaTest,doubleSided:o.side===n.DoubleSide,flipSided:o.side===n.BackSide,depthPacking:void 0!==o.depthPacking&&o.depthPacking};return m},this.getProgramCode=function(e,t){var r=[];if(t.shaderID?r.push(t.shaderID):(r.push(e.fragmentShader),r.push(e.vertexShader)),void 0!==e.defines)for(var n in e.defines)r.push(n),r.push(e.defines[n]);for(var i=0;i<s.length;i++)r.push(t[s[i]]);return r.join()},this.acquireProgram=function(t,r,i){for(var a,s=0,c=o.length;s<c;s++){var l=o[s];if(l.code===i){a=l,++a.usedTimes;break}}return void 0===a&&(a=new n.WebGLProgram(e,i,t,r),o.push(a)),a},this.releaseProgram=function(e){if(0===--e.usedTimes){var t=o.indexOf(e);o[t]=o[o.length-1],o.pop(),e.destroy()}},this.programs=o},n.WebGLProperties=function(){var e={};this.get=function(t){var r=t.uuid,n=e[r];return void 0===n&&(n={},e[r]=n),n},this["delete"]=function(t){delete e[t.uuid]},this.clear=function(){e={}}},n.WebGLShader=function(){function e(e){for(var t=e.split("\n"),r=0;r<t.length;r++)t[r]=r+1+": "+t[r];return t.join("\n")}return function(t,r,n){var i=t.createShader(r);return t.shaderSource(i,n),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS)===!1&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==t.getShaderInfoLog(i)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",r===t.VERTEX_SHADER?"vertex":"fragment",t.getShaderInfoLog(i),e(n)),i}}(),n.WebGLShadowMap=function(e,t,r,i){function o(t,r,i,o){var a=t.geometry,s=null,c=b,l=t.customDepthMaterial;if(i&&(c=w,l=t.customDistanceMaterial),l)s=l;else{var u=!1;r.morphTargets&&(a instanceof n.BufferGeometry?u=a.morphAttributes&&a.morphAttributes.position&&a.morphAttributes.position.length>0:a instanceof n.Geometry&&(u=a.morphTargets&&a.morphTargets.length>0));var h=t instanceof n.SkinnedMesh&&r.skinning,p=0;u&&(p|=g),h&&(p|=y),s=c[p]}if(e.localClippingEnabled&&r.clipShadows===!0&&0!==r.clippingPlanes.length){var d=s.uuid,f=r.uuid,m=_[d];void 0===m&&(m={},_[d]=m);var v=m[f];void 0===v&&(v=s.clone(),m[f]=v),s=v}s.visible=r.visible,s.wireframe=r.wireframe;var x=r.side;return B.renderSingleSided&&x==n.DoubleSide&&(x=n.FrontSide),B.renderReverseSided&&(x===n.FrontSide?x=n.BackSide:x===n.BackSide&&(x=n.FrontSide)),s.side=x,s.clipShadows=r.clipShadows,s.clippingPlanes=r.clippingPlanes,s.wireframeLinewidth=r.wireframeLinewidth,s.linewidth=r.linewidth,i&&void 0!==s.uniforms.lightPos&&s.uniforms.lightPos.value.copy(o),s}function a(e,t,r){if(e.visible!==!1){if(e.layers.test(t.layers)&&(e instanceof n.Mesh||e instanceof n.Line||e instanceof n.Points)&&e.castShadow&&(e.frustumCulled===!1||l.intersectsObject(e)===!0)){var i=e.material;i.visible===!0&&(e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),v.push(e))}for(var o=e.children,s=0,c=o.length;s<c;s++)a(o[s],t,r)}}var s=e.context,c=e.state,l=new n.Frustum,u=new n.Matrix4,h=t.shadows,p=new n.Vector2,d=new n.Vector2(i.maxTextureSize,i.maxTextureSize),f=new n.Vector3,m=new n.Vector3,v=[],g=1,y=2,x=(g|y)+1,b=new Array(x),w=new Array(x),_={},M=[new n.Vector3(1,0,0),new n.Vector3((-1),0,0),new n.Vector3(0,0,1),new n.Vector3(0,0,(-1)),new n.Vector3(0,1,0),new n.Vector3(0,(-1),0)],S=[new n.Vector3(0,1,0),new n.Vector3(0,1,0),new n.Vector3(0,1,0),new n.Vector3(0,1,0),new n.Vector3(0,0,1),new n.Vector3(0,0,(-1))],T=[new n.Vector4,new n.Vector4,new n.Vector4,new n.Vector4,new n.Vector4,new n.Vector4],E=new n.MeshDepthMaterial;E.depthPacking=n.RGBADepthPacking,E.clipping=!0;for(var A=n.ShaderLib.distanceRGBA,C=n.UniformsUtils.clone(A.uniforms),L=0;L!==x;++L){var P=0!==(L&g),R=0!==(L&y),D=E.clone();D.morphTargets=P,D.skinning=R,b[L]=D;var I=new n.ShaderMaterial({defines:{USE_SHADOWMAP:""},uniforms:C,vertexShader:A.vertexShader,fragmentShader:A.fragmentShader,morphTargets:P,skinning:R,clipping:!0});w[L]=I}var B=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=n.PCFShadowMap,this.renderReverseSided=!0,this.renderSingleSided=!0,this.render=function(t,i){if(B.enabled!==!1&&(B.autoUpdate!==!1||B.needsUpdate!==!1)&&0!==h.length){c.clearColor(1,1,1,1),c.disable(s.BLEND),c.setDepthTest(!0),c.setScissorTest(!1);for(var g,y,x=0,b=h.length;x<b;x++){var w=h[x],_=w.shadow;if(void 0!==_){var E=_.camera;if(p.copy(_.mapSize),p.min(d),w instanceof n.PointLight){g=6,y=!0;var A=p.x,C=p.y;T[0].set(2*A,C,A,C),T[1].set(0,C,A,C),T[2].set(3*A,C,A,C),T[3].set(A,C,A,C),T[4].set(3*A,0,A,C),T[5].set(A,0,A,C),p.x*=4,p.y*=2}else g=1,y=!1;if(null===_.map){var L={minFilter:n.NearestFilter,magFilter:n.NearestFilter,format:n.RGBAFormat};_.map=new n.WebGLRenderTarget(p.x,p.y,L),E.updateProjectionMatrix()}_ instanceof n.SpotLightShadow&&_.update(w);var P=_.map,R=_.matrix;m.setFromMatrixPosition(w.matrixWorld),E.position.copy(m),e.setRenderTarget(P),e.clear();for(var D=0;D<g;D++){if(y){f.copy(E.position),f.add(M[D]),E.up.copy(S[D]),E.lookAt(f);var I=T[D];c.viewport(I)}else f.setFromMatrixPosition(w.target.matrixWorld),E.lookAt(f);E.updateMatrixWorld(),E.matrixWorldInverse.getInverse(E.matrixWorld),R.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),R.multiply(E.projectionMatrix),R.multiply(E.matrixWorldInverse),u.multiplyMatrices(E.projectionMatrix,E.matrixWorldInverse),l.setFromMatrix(u),v.length=0,a(t,i,E);for(var O=0,F=v.length;O<F;O++){var N=v[O],U=r.update(N),G=N.material;if(G instanceof n.MultiMaterial)for(var V=U.groups,k=G.materials,z=0,j=V.length;z<j;z++){var H=V[z],W=k[H.materialIndex];if(W.visible===!0){var X=o(N,W,y,m);e.renderBufferDirect(E,null,U,X,N,H)}}else{var X=o(N,G,y,m);e.renderBufferDirect(E,null,U,X,N,null)}}}}else console.warn("THREE.WebGLShadowMap:",w,"has no shadow.")}var q=e.getClearColor(),Y=e.getClearAlpha();e.setClearColor(q,Y),B.needsUpdate=!1}}},n.WebGLState=function(e,t,r){function i(t,r,n){var i=new Uint8Array(4),o=e.createTexture();e.bindTexture(t,o),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(var a=0;a<n;a++)e.texImage2D(r+a,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,i);return o}var o=this;this.buffers={color:new n.WebGLColorBuffer(e,this),depth:new n.WebGLDepthBuffer(e,this),stencil:new n.WebGLStencilBuffer(e,this)};var a=e.getParameter(e.MAX_VERTEX_ATTRIBS),s=new Uint8Array(a),c=new Uint8Array(a),l=new Uint8Array(a),u={},h=null,p=null,d=null,f=null,m=null,v=null,g=null,y=null,x=!1,b=null,w=null,_=null,M=null,S=null,T=null,E=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),A=null,C={},L=new n.Vector4,P=new n.Vector4,R={};R[e.TEXTURE_2D]=i(e.TEXTURE_2D,e.TEXTURE_2D,1),R[e.TEXTURE_CUBE_MAP]=i(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),this.init=function(){this.clearColor(0,0,0,1),this.clearDepth(1),this.clearStencil(0),this.enable(e.DEPTH_TEST),this.setDepthFunc(n.LessEqualDepth),this.setFlipSided(!1),this.setCullFace(n.CullFaceBack),this.enable(e.CULL_FACE),this.enable(e.BLEND),this.setBlending(n.NormalBlending)},this.initAttributes=function(){for(var e=0,t=s.length;e<t;e++)s[e]=0},this.enableAttribute=function(r){if(s[r]=1,0===c[r]&&(e.enableVertexAttribArray(r),c[r]=1),0!==l[r]){var n=t.get("ANGLE_instanced_arrays");n.vertexAttribDivisorANGLE(r,0),l[r]=0}},this.enableAttributeAndDivisor=function(t,r,n){s[t]=1,0===c[t]&&(e.enableVertexAttribArray(t),c[t]=1),l[t]!==r&&(n.vertexAttribDivisorANGLE(t,r),l[t]=r)},this.disableUnusedAttributes=function(){for(var t=0,r=c.length;t!==r;++t)c[t]!==s[t]&&(e.disableVertexAttribArray(t),c[t]=0)},this.enable=function(t){u[t]!==!0&&(e.enable(t),u[t]=!0)},this.disable=function(t){u[t]!==!1&&(e.disable(t),u[t]=!1)},this.getCompressedTextureFormats=function(){if(null===h&&(h=[],t.get("WEBGL_compressed_texture_pvrtc")||t.get("WEBGL_compressed_texture_s3tc")||t.get("WEBGL_compressed_texture_etc1")))for(var r=e.getParameter(e.COMPRESSED_TEXTURE_FORMATS),n=0;n<r.length;n++)h.push(r[n]);return h},this.setBlending=function(t,i,o,a,s,c,l,u){return t===n.NoBlending?(this.disable(e.BLEND),void(p=t)):(this.enable(e.BLEND),t===p&&u===x||(t===n.AdditiveBlending?u?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE,e.ONE,e.ONE)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE)):t===n.SubtractiveBlending?u?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.ONE_MINUS_SRC_COLOR)):t===n.MultiplyBlending?u?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.SRC_COLOR)):u?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)),p=t,x=u),void(t===n.CustomBlending?(s=s||i,c=c||o,l=l||a,i===d&&s===v||(e.blendEquationSeparate(r(i),r(s)),d=i,v=s),o===f&&a===m&&c===g&&l===y||(e.blendFuncSeparate(r(o),r(a),r(c),r(l)),f=o,m=a,g=c,y=l)):(d=null,f=null,m=null,v=null,g=null,y=null)))},this.setColorWrite=function(e){this.buffers.color.setMask(e)},this.setDepthTest=function(e){this.buffers.depth.setTest(e)},this.setDepthWrite=function(e){this.buffers.depth.setMask(e)},this.setDepthFunc=function(e){this.buffers.depth.setFunc(e)},this.setStencilTest=function(e){this.buffers.stencil.setTest(e)},this.setStencilWrite=function(e){this.buffers.stencil.setMask(e)},this.setStencilFunc=function(e,t,r){this.buffers.stencil.setFunc(e,t,r)},this.setStencilOp=function(e,t,r){this.buffers.stencil.setOp(e,t,r)},this.setFlipSided=function(t){b!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),b=t)},this.setCullFace=function(t){t!==n.CullFaceNone?(this.enable(e.CULL_FACE),t!==w&&(t===n.CullFaceBack?e.cullFace(e.BACK):t===n.CullFaceFront?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):this.disable(e.CULL_FACE),w=t},this.setLineWidth=function(t){t!==_&&(e.lineWidth(t),_=t)},this.setPolygonOffset=function(t,r,n){t?(this.enable(e.POLYGON_OFFSET_FILL),M===r&&S===n||(e.polygonOffset(r,n),M=r,S=n)):this.disable(e.POLYGON_OFFSET_FILL)},this.getScissorTest=function(){return T},this.setScissorTest=function(t){T=t,t?this.enable(e.SCISSOR_TEST):this.disable(e.SCISSOR_TEST)},this.activeTexture=function(t){void 0===t&&(t=e.TEXTURE0+E-1),A!==t&&(e.activeTexture(t),A=t)},this.bindTexture=function(t,r){null===A&&o.activeTexture();var n=C[A];void 0===n&&(n={type:void 0,texture:void 0},C[A]=n),n.type===t&&n.texture===r||(e.bindTexture(t,r||R[t]),n.type=t,n.texture=r)},this.compressedTexImage2D=function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(t){console.error(t)}},this.texImage2D=function(){try{e.texImage2D.apply(e,arguments)}catch(t){console.error(t)}},this.clearColor=function(e,t,r,n){this.buffers.color.setClear(e,t,r,n)},this.clearDepth=function(e){this.buffers.depth.setClear(e)},this.clearStencil=function(e){this.buffers.stencil.setClear(e)},this.scissor=function(t){L.equals(t)===!1&&(e.scissor(t.x,t.y,t.z,t.w),L.copy(t))},this.viewport=function(t){P.equals(t)===!1&&(e.viewport(t.x,t.y,t.z,t.w),P.copy(t))},this.reset=function(){for(var t=0;t<c.length;t++)1===c[t]&&(e.disableVertexAttribArray(t),c[t]=0);u={},h=null,A=null,C={},p=null,b=null,w=null,this.buffers.color.reset(),this.buffers.depth.reset(),this.buffers.stencil.reset()}},n.WebGLColorBuffer=function(e,t){var r=!1,i=new n.Vector4,o=null,a=new n.Vector4;this.setMask=function(t){o===t||r||(e.colorMask(t,t,t,t),o=t)},this.setLocked=function(e){r=e},this.setClear=function(t,r,n,o){i.set(t,r,n,o),a.equals(i)===!1&&(e.clearColor(t,r,n,o),a.copy(i))},this.reset=function(){r=!1,o=null,a=new n.Vector4}},n.WebGLDepthBuffer=function(e,t){var r=!1,i=null,o=null,a=null;this.setTest=function(r){r?t.enable(e.DEPTH_TEST):t.disable(e.DEPTH_TEST)},this.setMask=function(t){i===t||r||(e.depthMask(t),i=t)},this.setFunc=function(t){if(o!==t){if(t)switch(t){case n.NeverDepth:e.depthFunc(e.NEVER);break;case n.AlwaysDepth:e.depthFunc(e.ALWAYS);break;case n.LessDepth:e.depthFunc(e.LESS);break;case n.LessEqualDepth:e.depthFunc(e.LEQUAL);break;case n.EqualDepth:e.depthFunc(e.EQUAL);break;case n.GreaterEqualDepth:e.depthFunc(e.GEQUAL);break;case n.GreaterDepth:e.depthFunc(e.GREATER);break;case n.NotEqualDepth:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}else e.depthFunc(e.LEQUAL);o=t}},this.setLocked=function(e){r=e},this.setClear=function(t){a!==t&&(e.clearDepth(t),a=t)},this.reset=function(){r=!1,i=null,o=null,a=null}},n.WebGLStencilBuffer=function(e,t){var r=!1,n=null,i=null,o=null,a=null,s=null,c=null,l=null,u=null;this.setTest=function(r){r?t.enable(e.STENCIL_TEST):t.disable(e.STENCIL_TEST)},this.setMask=function(t){n===t||r||(e.stencilMask(t),n=t)},this.setFunc=function(t,r,n){i===t&&o===r&&a===n||(e.stencilFunc(t,r,n),i=t,o=r,a=n)},this.setOp=function(t,r,n){s===t&&c===r&&l===n||(e.stencilOp(t,r,n),s=t,c=r,l=n)},this.setLocked=function(e){r=e},this.setClear=function(t){u!==t&&(e.clearStencil(t),u=t)},this.reset=function(){r=!1,n=null,i=null,o=null,a=null,s=null,c=null,l=null,u=null}},n.WebGLTextures=function(e,t,r,i,o,a,s){function c(e,t){if(e.width>t||e.height>t){var r=t/Math.max(e.width,e.height),n=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");n.width=Math.floor(e.width*r),n.height=Math.floor(e.height*r);var i=n.getContext("2d");return i.drawImage(e,0,0,e.width,e.height,0,0,n.width,n.height),console.warn("THREE.WebGLRenderer: image is too big ("+e.width+"x"+e.height+"). Resized to "+n.width+"x"+n.height,e),n}return e}function l(e){return n.Math.isPowerOfTwo(e.width)&&n.Math.isPowerOfTwo(e.height)}function u(e){if(e instanceof HTMLImageElement||e instanceof HTMLCanvasElement){var t=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");t.width=n.Math.nearestPowerOfTwo(e.width),t.height=n.Math.nearestPowerOfTwo(e.height);var r=t.getContext("2d");return r.drawImage(e,0,0,t.width,t.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+e.width+"x"+e.height+"). Resized to "+t.width+"x"+t.height,e),t}return e}function h(e){return e.wrapS!==n.ClampToEdgeWrapping||e.wrapT!==n.ClampToEdgeWrapping||e.minFilter!==n.NearestFilter&&e.minFilter!==n.LinearFilter}function p(t){return t===n.NearestFilter||t===n.NearestMipMapNearestFilter||t===n.NearestMipMapLinearFilter?e.NEAREST:e.LINEAR}function d(e){var t=e.target;t.removeEventListener("dispose",d),m(t),C.textures--}function f(e){var t=e.target;t.removeEventListener("dispose",f),v(t),C.textures--}function m(t){var r=i.get(t);if(t.image&&r.__image__webglTextureCube)e.deleteTexture(r.__image__webglTextureCube);else{if(void 0===r.__webglInit)return;e.deleteTexture(r.__webglTexture)}i["delete"](t)}function v(t){var r=i.get(t),o=i.get(t.texture);if(t){if(void 0!==o.__webglTexture&&e.deleteTexture(o.__webglTexture),t.depthTexture&&t.depthTexture.dispose(),t instanceof n.WebGLRenderTargetCube)for(var a=0;a<6;a++)e.deleteFramebuffer(r.__webglFramebuffer[a]),r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer[a]);else e.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer);i["delete"](t.texture),i["delete"](t)}}function g(t,n){var o=i.get(t);if(t.version>0&&o.__version!==t.version){var a=t.image;if(void 0===a)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined",t);else{if(a.complete!==!1)return void w(o,t,n);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",t)}}r.activeTexture(e.TEXTURE0+n),r.bindTexture(e.TEXTURE_2D,o.__webglTexture)}function y(t,s){var u=i.get(t);if(6===t.image.length)if(t.version>0&&u.__version!==t.version){u.__image__webglTextureCube||(t.addEventListener("dispose",d),u.__image__webglTextureCube=e.createTexture(),C.textures++),r.activeTexture(e.TEXTURE0+s),r.bindTexture(e.TEXTURE_CUBE_MAP,u.__image__webglTextureCube),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,t.flipY);for(var h=t instanceof n.CompressedTexture,p=t.image[0]instanceof n.DataTexture,f=[],m=0;m<6;m++)h||p?f[m]=p?t.image[m].image:t.image[m]:f[m]=c(t.image[m],o.maxCubemapSize);var v=f[0],g=l(v),y=a(t.format),x=a(t.type);b(e.TEXTURE_CUBE_MAP,t,g);for(var m=0;m<6;m++)if(h)for(var w,_=f[m].mipmaps,M=0,S=_.length;M<S;M++)w=_[M],t.format!==n.RGBAFormat&&t.format!==n.RGBFormat?r.getCompressedTextureFormats().indexOf(y)>-1?r.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+m,M,y,w.width,w.height,0,w.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):r.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+m,M,y,w.width,w.height,0,y,x,w.data);else p?r.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+m,0,y,f[m].width,f[m].height,0,y,x,f[m].data):r.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+m,0,y,y,x,f[m]);t.generateMipmaps&&g&&e.generateMipmap(e.TEXTURE_CUBE_MAP),u.__version=t.version,t.onUpdate&&t.onUpdate(t)}else r.activeTexture(e.TEXTURE0+s),r.bindTexture(e.TEXTURE_CUBE_MAP,u.__image__webglTextureCube)}function x(t,n){r.activeTexture(e.TEXTURE0+n),r.bindTexture(e.TEXTURE_CUBE_MAP,i.get(t).__webglTexture)}function b(r,s,c){var l;if(c?(e.texParameteri(r,e.TEXTURE_WRAP_S,a(s.wrapS)),e.texParameteri(r,e.TEXTURE_WRAP_T,a(s.wrapT)),e.texParameteri(r,e.TEXTURE_MAG_FILTER,a(s.magFilter)),e.texParameteri(r,e.TEXTURE_MIN_FILTER,a(s.minFilter))):(e.texParameteri(r,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(r,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),s.wrapS===n.ClampToEdgeWrapping&&s.wrapT===n.ClampToEdgeWrapping||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",s),e.texParameteri(r,e.TEXTURE_MAG_FILTER,p(s.magFilter)),e.texParameteri(r,e.TEXTURE_MIN_FILTER,p(s.minFilter)),s.minFilter!==n.NearestFilter&&s.minFilter!==n.LinearFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",s)),l=t.get("EXT_texture_filter_anisotropic")){if(s.type===n.FloatType&&null===t.get("OES_texture_float_linear"))return;if(s.type===n.HalfFloatType&&null===t.get("OES_texture_half_float_linear"))return;(s.anisotropy>1||i.get(s).__currentAnisotropy)&&(e.texParameterf(r,l.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(s.anisotropy,o.getMaxAnisotropy())),i.get(s).__currentAnisotropy=s.anisotropy)}}function w(t,i,s){void 0===t.__webglInit&&(t.__webglInit=!0,i.addEventListener("dispose",d),t.__webglTexture=e.createTexture(),C.textures++),r.activeTexture(e.TEXTURE0+s),r.bindTexture(e.TEXTURE_2D,t.__webglTexture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,i.unpackAlignment);var p=c(i.image,o.maxTextureSize);h(i)&&l(p)===!1&&(p=u(p));var f=l(p),m=a(i.format),v=a(i.type);b(e.TEXTURE_2D,i,f);var g,y=i.mipmaps;if(i instanceof n.DepthTexture){var x=e.DEPTH_COMPONENT;if(i.type===n.FloatType){if(!L)throw new Error("Float Depth Texture only supported in WebGL2.0");x=e.DEPTH_COMPONENT32F}else L&&(x=e.DEPTH_COMPONENT16);r.texImage2D(e.TEXTURE_2D,0,x,p.width,p.height,0,m,v,null)}else if(i instanceof n.DataTexture)if(y.length>0&&f){for(var w=0,_=y.length;w<_;w++)g=y[w],r.texImage2D(e.TEXTURE_2D,w,m,g.width,g.height,0,m,v,g.data);i.generateMipmaps=!1}else r.texImage2D(e.TEXTURE_2D,0,m,p.width,p.height,0,m,v,p.data);else if(i instanceof n.CompressedTexture)for(var w=0,_=y.length;w<_;w++)g=y[w],i.format!==n.RGBAFormat&&i.format!==n.RGBFormat?r.getCompressedTextureFormats().indexOf(m)>-1?r.compressedTexImage2D(e.TEXTURE_2D,w,m,g.width,g.height,0,g.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):r.texImage2D(e.TEXTURE_2D,w,m,g.width,g.height,0,m,v,g.data);else if(y.length>0&&f){for(var w=0,_=y.length;w<_;w++)g=y[w],r.texImage2D(e.TEXTURE_2D,w,m,m,v,g);i.generateMipmaps=!1}else r.texImage2D(e.TEXTURE_2D,0,m,m,v,p);i.generateMipmaps&&f&&e.generateMipmap(e.TEXTURE_2D),t.__version=i.version,i.onUpdate&&i.onUpdate(i)}function _(t,n,o,s){var c=a(n.texture.format),l=a(n.texture.type);r.texImage2D(s,0,c,n.width,n.height,0,c,l,null),e.bindFramebuffer(e.FRAMEBUFFER,t),e.framebufferTexture2D(e.FRAMEBUFFER,o,s,i.get(n.texture).__webglTexture,0),e.bindFramebuffer(e.FRAMEBUFFER,null)}function M(t,r){e.bindRenderbuffer(e.RENDERBUFFER,t),r.depthBuffer&&!r.stencilBuffer?(e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,r.width,r.height),
e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t)):r.depthBuffer&&r.stencilBuffer?(e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,r.width,r.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t)):e.renderbufferStorage(e.RENDERBUFFER,e.RGBA4,r.width,r.height),e.bindRenderbuffer(e.RENDERBUFFER,null)}function S(t,r){var o=r instanceof n.WebGLRenderTargetCube;if(o)throw new Error("Depth Texture with cube render targets is not supported!");if(e.bindFramebuffer(e.FRAMEBUFFER,t),!(r.depthTexture instanceof n.DepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),g(r.depthTexture,0);var a=i.get(r.depthTexture).__webglTexture;e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,a,0)}function T(t){var r=i.get(t),o=t instanceof n.WebGLRenderTargetCube;if(t.depthTexture){if(o)throw new Error("target.depthTexture not supported in Cube render targets");S(r.__webglFramebuffer,t)}else if(o){r.__webglDepthbuffer=[];for(var a=0;a<6;a++)e.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer[a]),r.__webglDepthbuffer[a]=e.createRenderbuffer(),M(r.__webglDepthbuffer[a],t)}else e.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer),r.__webglDepthbuffer=e.createRenderbuffer(),M(r.__webglDepthbuffer,t);e.bindFramebuffer(e.FRAMEBUFFER,null)}function E(t){var o=i.get(t),a=i.get(t.texture);t.addEventListener("dispose",f),a.__webglTexture=e.createTexture(),C.textures++;var s=t instanceof n.WebGLRenderTargetCube,c=l(t);if(s){o.__webglFramebuffer=[];for(var u=0;u<6;u++)o.__webglFramebuffer[u]=e.createFramebuffer()}else o.__webglFramebuffer=e.createFramebuffer();if(s){r.bindTexture(e.TEXTURE_CUBE_MAP,a.__webglTexture),b(e.TEXTURE_CUBE_MAP,t.texture,c);for(var u=0;u<6;u++)_(o.__webglFramebuffer[u],t,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+u);t.texture.generateMipmaps&&c&&e.generateMipmap(e.TEXTURE_CUBE_MAP),r.bindTexture(e.TEXTURE_CUBE_MAP,null)}else r.bindTexture(e.TEXTURE_2D,a.__webglTexture),b(e.TEXTURE_2D,t.texture,c),_(o.__webglFramebuffer,t,e.COLOR_ATTACHMENT0,e.TEXTURE_2D),t.texture.generateMipmaps&&c&&e.generateMipmap(e.TEXTURE_2D),r.bindTexture(e.TEXTURE_2D,null);t.depthBuffer&&T(t)}function A(t){var o=t.texture;if(o.generateMipmaps&&l(t)&&o.minFilter!==n.NearestFilter&&o.minFilter!==n.LinearFilter){var a=t instanceof n.WebGLRenderTargetCube?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,s=i.get(o).__webglTexture;r.bindTexture(a,s),e.generateMipmap(a),r.bindTexture(a,null)}}var C=s.memory,L="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext;this.setTexture2D=g,this.setTextureCube=y,this.setTextureCubeDynamic=x,this.setupRenderTarget=E,this.updateRenderTargetMipmap=A},n.WebGLUniforms=function(){var e=new n.Texture,t=new n.CubeTexture,r=function(){this.seq=[],this.map={}},i=[],o=[],a=function(e,t,r){var n=e[0];if(n<=0||n>0)return e;var o=t*r,a=i[o];if(void 0===a&&(a=new Float32Array(o),i[o]=a),0!==t){n.toArray(a,0);for(var s=1,c=0;s!==t;++s)c+=r,e[s].toArray(a,c)}return a},s=function(e,t){var r=o[t];void 0===r&&(r=new Int32Array(t),o[t]=r);for(var n=0;n!==t;++n)r[n]=e.allocTextureUnit();return r},c=function(e,t){e.uniform1f(this.addr,t)},l=function(e,t){e.uniform1i(this.addr,t)},u=function(e,t){void 0===t.x?e.uniform2fv(this.addr,t):e.uniform2f(this.addr,t.x,t.y)},h=function(e,t){void 0!==t.x?e.uniform3f(this.addr,t.x,t.y,t.z):void 0!==t.r?e.uniform3f(this.addr,t.r,t.g,t.b):e.uniform3fv(this.addr,t)},p=function(e,t){void 0===t.x?e.uniform4fv(this.addr,t):e.uniform4f(this.addr,t.x,t.y,t.z,t.w)},d=function(e,t){e.uniformMatrix2fv(this.addr,!1,t.elements||t)},f=function(e,t){e.uniformMatrix3fv(this.addr,!1,t.elements||t)},m=function(e,t){e.uniformMatrix4fv(this.addr,!1,t.elements||t)},v=function(t,r,n){var i=n.allocTextureUnit();t.uniform1i(this.addr,i),n.setTexture2D(r||e,i)},g=function(e,r,n){var i=n.allocTextureUnit();e.uniform1i(this.addr,i),n.setTextureCube(r||t,i)},y=function(e,t){e.uniform2iv(this.addr,t)},x=function(e,t){e.uniform3iv(this.addr,t)},b=function(e,t){e.uniform4iv(this.addr,t)},w=function(e){switch(e){case 5126:return c;case 35664:return u;case 35665:return h;case 35666:return p;case 35674:return d;case 35675:return f;case 35676:return m;case 35678:return v;case 35680:return g;case 5124:case 35670:return l;case 35667:case 35671:return y;case 35668:case 35672:return x;case 35669:case 35673:return b}},_=function(e,t){e.uniform1fv(this.addr,t)},M=function(e,t){e.uniform1iv(this.addr,t)},S=function(e,t){e.uniform2fv(this.addr,a(t,this.size,2))},T=function(e,t){e.uniform3fv(this.addr,a(t,this.size,3))},E=function(e,t){e.uniform4fv(this.addr,a(t,this.size,4))},A=function(e,t){e.uniformMatrix2fv(this.addr,!1,a(t,this.size,4))},C=function(e,t){e.uniformMatrix3fv(this.addr,!1,a(t,this.size,9))},L=function(e,t){e.uniformMatrix4fv(this.addr,!1,a(t,this.size,16))},P=function(t,r,n){var i=r.length,o=s(n,i);t.uniform1iv(this.addr,o);for(var a=0;a!==i;++a)n.setTexture2D(r[a]||e,o[a])},R=function(e,r,n){var i=r.length,o=s(n,i);e.uniform1iv(this.addr,o);for(var a=0;a!==i;++a)n.setTextureCube(r[a]||t,o[a])},D=function(e){switch(e){case 5126:return _;case 35664:return S;case 35665:return T;case 35666:return E;case 35674:return A;case 35675:return C;case 35676:return L;case 35678:return P;case 35680:return R;case 5124:case 35670:return M;case 35667:case 35671:return y;case 35668:case 35672:return x;case 35669:case 35673:return b}},I=function(e,t,r){this.id=e,this.addr=r,this.setValue=w(t.type)},B=function(e,t,r){this.id=e,this.addr=r,this.size=t.size,this.setValue=D(t.type)},O=function(e){this.id=e,r.call(this)};O.prototype.setValue=function(e,t){for(var r=this.seq,n=0,i=r.length;n!==i;++n){var o=r[n];o.setValue(e,t[o.id])}};var F=/([\w\d_]+)(\])?(\[|\.)?/g,N=function(e,t){e.seq.push(t),e.map[t.id]=t},U=function(e,t,r){var n=e.name,i=n.length;for(F.lastIndex=0;;){var o=F.exec(n),a=F.lastIndex,s=o[1],c="]"===o[2],l=o[3];if(c&&(s=0|s),void 0===l||"["===l&&a+2===i){N(r,void 0===l?new I(s,e,t):new B(s,e,t));break}var u=r.map,h=u[s];void 0===h&&(h=new O(s),N(r,h)),r=h}},G=function(e,t,n){r.call(this),this.renderer=n;for(var i=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),o=0;o!==i;++o){var a=e.getActiveUniform(t,o),s=a.name,c=e.getUniformLocation(t,s);U(a,c,this)}};return G.prototype.setValue=function(e,t,r){var n=this.map[t];void 0!==n&&n.setValue(e,r,this.renderer)},G.prototype.set=function(e,t,r){var n=this.map[r];void 0!==n&&n.setValue(e,t[r],this.renderer)},G.prototype.setOptional=function(e,t,r){var n=t[r];void 0!==n&&this.setValue(e,r,n)},G.upload=function(e,t,r,n){for(var i=0,o=t.length;i!==o;++i){var a=t[i],s=r[a.id];s.needsUpdate!==!1&&a.setValue(e,s.value,n)}},G.seqWithValue=function(e,t){for(var r=[],n=0,i=e.length;n!==i;++n){var o=e[n];o.id in t&&r.push(o)}return r},G.splitDynamic=function(e,t){for(var r=null,n=e.length,i=0,o=0;o!==n;++o){var a=e[o],s=t[a.id];s&&s.dynamic===!0?(null===r&&(r=[]),r.push(a)):(i<o&&(e[i]=a),++i)}return i<n&&(e.length=i),r},G.evalDynamic=function(e,t,r,n){for(var i=0,o=e.length;i!==o;++i){var a=t[e[i].id],s=a.onUpdateCallback;void 0!==s&&s.call(a,r,n)}},G}(),n.LensFlarePlugin=function(e,t){function r(){var e=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),t=new Uint16Array([0,1,2,0,2,3]);o=d.createBuffer(),a=d.createBuffer(),d.bindBuffer(d.ARRAY_BUFFER,o),d.bufferData(d.ARRAY_BUFFER,e,d.STATIC_DRAW),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,a),d.bufferData(d.ELEMENT_ARRAY_BUFFER,t,d.STATIC_DRAW),h=d.createTexture(),p=d.createTexture(),f.bindTexture(d.TEXTURE_2D,h),d.texImage2D(d.TEXTURE_2D,0,d.RGB,16,16,0,d.RGB,d.UNSIGNED_BYTE,null),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_S,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_T,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MAG_FILTER,d.NEAREST),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,d.NEAREST),f.bindTexture(d.TEXTURE_2D,p),d.texImage2D(d.TEXTURE_2D,0,d.RGBA,16,16,0,d.RGBA,d.UNSIGNED_BYTE,null),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_S,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_T,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MAG_FILTER,d.NEAREST),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,d.NEAREST),s={vertexShader:["uniform lowp int renderType;","uniform vec3 screenPosition;","uniform vec2 scale;","uniform float rotation;","uniform sampler2D occlusionMap;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","varying float vVisibility;","void main() {","vUV = uv;","vec2 pos = position;","if ( renderType == 2 ) {","vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );","vVisibility =        visibility.r / 9.0;","vVisibility *= 1.0 - visibility.g / 9.0;","vVisibility *=       visibility.b / 9.0;","vVisibility *= 1.0 - visibility.a / 9.0;","pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;","pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;","}","gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["uniform lowp int renderType;","uniform sampler2D map;","uniform float opacity;","uniform vec3 color;","varying vec2 vUV;","varying float vVisibility;","void main() {","if ( renderType == 0 ) {","gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );","} else if ( renderType == 1 ) {","gl_FragColor = texture2D( map, vUV );","} else {","vec4 texture = texture2D( map, vUV );","texture.a *= opacity * vVisibility;","gl_FragColor = texture;","gl_FragColor.rgb *= color;","}","}"].join("\n")},c=i(s),l={vertex:d.getAttribLocation(c,"position"),uv:d.getAttribLocation(c,"uv")},u={renderType:d.getUniformLocation(c,"renderType"),map:d.getUniformLocation(c,"map"),occlusionMap:d.getUniformLocation(c,"occlusionMap"),opacity:d.getUniformLocation(c,"opacity"),color:d.getUniformLocation(c,"color"),scale:d.getUniformLocation(c,"scale"),rotation:d.getUniformLocation(c,"rotation"),screenPosition:d.getUniformLocation(c,"screenPosition")}}function i(t){var r=d.createProgram(),n=d.createShader(d.FRAGMENT_SHADER),i=d.createShader(d.VERTEX_SHADER),o="precision "+e.getPrecision()+" float;\n";return d.shaderSource(n,o+t.fragmentShader),d.shaderSource(i,o+t.vertexShader),d.compileShader(n),d.compileShader(i),d.attachShader(r,n),d.attachShader(r,i),d.linkProgram(r),r}var o,a,s,c,l,u,h,p,d=e.context,f=e.state;this.render=function(i,s,m){if(0!==t.length){var v=new n.Vector3,g=m.w/m.z,y=.5*m.z,x=.5*m.w,b=16/m.w,w=new n.Vector2(b*g,b),_=new n.Vector3(1,1,0),M=new n.Vector2(1,1),S=new n.Box2;S.min.set(0,0),S.max.set(m.z-16,m.w-16),void 0===c&&r(),d.useProgram(c),f.initAttributes(),f.enableAttribute(l.vertex),f.enableAttribute(l.uv),f.disableUnusedAttributes(),d.uniform1i(u.occlusionMap,0),d.uniform1i(u.map,1),d.bindBuffer(d.ARRAY_BUFFER,o),d.vertexAttribPointer(l.vertex,2,d.FLOAT,!1,16,0),d.vertexAttribPointer(l.uv,2,d.FLOAT,!1,16,8),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,a),f.disable(d.CULL_FACE),f.setDepthWrite(!1);for(var T=0,E=t.length;T<E;T++){b=16/m.w,w.set(b*g,b);var A=t[T];if(v.set(A.matrixWorld.elements[12],A.matrixWorld.elements[13],A.matrixWorld.elements[14]),v.applyMatrix4(s.matrixWorldInverse),v.applyProjection(s.projectionMatrix),_.copy(v),M.x=m.x+_.x*y+y-8,M.y=m.y+_.y*x+x-8,S.containsPoint(M)===!0){f.activeTexture(d.TEXTURE0),f.bindTexture(d.TEXTURE_2D,null),f.activeTexture(d.TEXTURE1),f.bindTexture(d.TEXTURE_2D,h),d.copyTexImage2D(d.TEXTURE_2D,0,d.RGB,M.x,M.y,16,16,0),d.uniform1i(u.renderType,0),d.uniform2f(u.scale,w.x,w.y),d.uniform3f(u.screenPosition,_.x,_.y,_.z),f.disable(d.BLEND),f.enable(d.DEPTH_TEST),d.drawElements(d.TRIANGLES,6,d.UNSIGNED_SHORT,0),f.activeTexture(d.TEXTURE0),f.bindTexture(d.TEXTURE_2D,p),d.copyTexImage2D(d.TEXTURE_2D,0,d.RGBA,M.x,M.y,16,16,0),d.uniform1i(u.renderType,1),f.disable(d.DEPTH_TEST),f.activeTexture(d.TEXTURE1),f.bindTexture(d.TEXTURE_2D,h),d.drawElements(d.TRIANGLES,6,d.UNSIGNED_SHORT,0),A.positionScreen.copy(_),A.customUpdateCallback?A.customUpdateCallback(A):A.updateLensFlares(),d.uniform1i(u.renderType,2),f.enable(d.BLEND);for(var C=0,L=A.lensFlares.length;C<L;C++){var P=A.lensFlares[C];P.opacity>.001&&P.scale>.001&&(_.x=P.x,_.y=P.y,_.z=P.z,b=P.size*P.scale/m.w,w.x=b*g,w.y=b,d.uniform3f(u.screenPosition,_.x,_.y,_.z),d.uniform2f(u.scale,w.x,w.y),d.uniform1f(u.rotation,P.rotation),d.uniform1f(u.opacity,P.opacity),d.uniform3f(u.color,P.color.r,P.color.g,P.color.b),f.setBlending(P.blending,P.blendEquation,P.blendSrc,P.blendDst),e.setTexture2D(P.texture,1),d.drawElements(d.TRIANGLES,6,d.UNSIGNED_SHORT,0))}}}f.enable(d.CULL_FACE),f.enable(d.DEPTH_TEST),f.setDepthWrite(!0),e.resetGLState()}}},n.SpritePlugin=function(e,t){function r(){var e=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),t=new Uint16Array([0,1,2,0,2,3]);a=p.createBuffer(),s=p.createBuffer(),p.bindBuffer(p.ARRAY_BUFFER,a),p.bufferData(p.ARRAY_BUFFER,e,p.STATIC_DRAW),p.bindBuffer(p.ELEMENT_ARRAY_BUFFER,s),p.bufferData(p.ELEMENT_ARRAY_BUFFER,t,p.STATIC_DRAW),c=i(),l={position:p.getAttribLocation(c,"position"),uv:p.getAttribLocation(c,"uv")},u={uvOffset:p.getUniformLocation(c,"uvOffset"),uvScale:p.getUniformLocation(c,"uvScale"),rotation:p.getUniformLocation(c,"rotation"),scale:p.getUniformLocation(c,"scale"),color:p.getUniformLocation(c,"color"),map:p.getUniformLocation(c,"map"),opacity:p.getUniformLocation(c,"opacity"),modelViewMatrix:p.getUniformLocation(c,"modelViewMatrix"),projectionMatrix:p.getUniformLocation(c,"projectionMatrix"),fogType:p.getUniformLocation(c,"fogType"),fogDensity:p.getUniformLocation(c,"fogDensity"),fogNear:p.getUniformLocation(c,"fogNear"),fogFar:p.getUniformLocation(c,"fogFar"),fogColor:p.getUniformLocation(c,"fogColor"),alphaTest:p.getUniformLocation(c,"alphaTest")};var r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");r.width=8,r.height=8;var o=r.getContext("2d");o.fillStyle="white",o.fillRect(0,0,8,8),h=new n.Texture(r),h.needsUpdate=!0}function i(){var t=p.createProgram(),r=p.createShader(p.VERTEX_SHADER),n=p.createShader(p.FRAGMENT_SHADER);return p.shaderSource(r,["precision "+e.getPrecision()+" float;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform float rotation;","uniform vec2 scale;","uniform vec2 uvOffset;","uniform vec2 uvScale;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","void main() {","vUV = uvOffset + uv * uvScale;","vec2 alignedPosition = position * scale;","vec2 rotatedPosition;","rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;","rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;","vec4 finalPosition;","finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );","finalPosition.xy += rotatedPosition;","finalPosition = projectionMatrix * finalPosition;","gl_Position = finalPosition;","}"].join("\n")),p.shaderSource(n,["precision "+e.getPrecision()+" float;","uniform vec3 color;","uniform sampler2D map;","uniform float opacity;","uniform int fogType;","uniform vec3 fogColor;","uniform float fogDensity;","uniform float fogNear;","uniform float fogFar;","uniform float alphaTest;","varying vec2 vUV;","void main() {","vec4 texture = texture2D( map, vUV );","if ( texture.a < alphaTest ) discard;","gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );","if ( fogType > 0 ) {","float depth = gl_FragCoord.z / gl_FragCoord.w;","float fogFactor = 0.0;","if ( fogType == 1 ) {","fogFactor = smoothstep( fogNear, fogFar, depth );","} else {","const float LOG2 = 1.442695;","fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );","fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );","}","gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );","}","}"].join("\n")),p.compileShader(r),p.compileShader(n),p.attachShader(t,r),p.attachShader(t,n),p.linkProgram(t),t}function o(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:t.id-e.id}var a,s,c,l,u,h,p=e.context,d=e.state,f=new n.Vector3,m=new n.Quaternion,v=new n.Vector3;this.render=function(i,g){if(0!==t.length){void 0===c&&r(),p.useProgram(c),d.initAttributes(),d.enableAttribute(l.position),d.enableAttribute(l.uv),d.disableUnusedAttributes(),d.disable(p.CULL_FACE),d.enable(p.BLEND),p.bindBuffer(p.ARRAY_BUFFER,a),p.vertexAttribPointer(l.position,2,p.FLOAT,!1,16,0),p.vertexAttribPointer(l.uv,2,p.FLOAT,!1,16,8),p.bindBuffer(p.ELEMENT_ARRAY_BUFFER,s),p.uniformMatrix4fv(u.projectionMatrix,!1,g.projectionMatrix.elements),d.activeTexture(p.TEXTURE0),p.uniform1i(u.map,0);var y=0,x=0,b=i.fog;b?(p.uniform3f(u.fogColor,b.color.r,b.color.g,b.color.b),b instanceof n.Fog?(p.uniform1f(u.fogNear,b.near),p.uniform1f(u.fogFar,b.far),p.uniform1i(u.fogType,1),y=1,x=1):b instanceof n.FogExp2&&(p.uniform1f(u.fogDensity,b.density),p.uniform1i(u.fogType,2),y=2,x=2)):(p.uniform1i(u.fogType,0),y=0,x=0);for(var w=0,_=t.length;w<_;w++){var M=t[w];M.modelViewMatrix.multiplyMatrices(g.matrixWorldInverse,M.matrixWorld),M.z=-M.modelViewMatrix.elements[14]}t.sort(o);for(var S=[],w=0,_=t.length;w<_;w++){var M=t[w],T=M.material;if(T.visible!==!1){p.uniform1f(u.alphaTest,T.alphaTest),p.uniformMatrix4fv(u.modelViewMatrix,!1,M.modelViewMatrix.elements),M.matrixWorld.decompose(f,m,v),S[0]=v.x,S[1]=v.y;var E=0;i.fog&&T.fog&&(E=x),y!==E&&(p.uniform1i(u.fogType,E),y=E),null!==T.map?(p.uniform2f(u.uvOffset,T.map.offset.x,T.map.offset.y),p.uniform2f(u.uvScale,T.map.repeat.x,T.map.repeat.y)):(p.uniform2f(u.uvOffset,0,0),p.uniform2f(u.uvScale,1,1)),p.uniform1f(u.opacity,T.opacity),p.uniform3f(u.color,T.color.r,T.color.g,T.color.b),p.uniform1f(u.rotation,T.rotation),p.uniform2fv(u.scale,S),d.setBlending(T.blending,T.blendEquation,T.blendSrc,T.blendDst),d.setDepthTest(T.depthTest),d.setDepthWrite(T.depthWrite),T.map?e.setTexture2D(T.map,0):e.setTexture2D(h,0),p.drawElements(p.TRIANGLES,6,p.UNSIGNED_SHORT,0)}}d.enable(p.CULL_FACE),e.resetGLState()}}},Object.assign(n,{Face4:function(e,t,r,i,o,a,s){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new n.Face3(e,t,r,o,a,s)},LineStrip:0,LinePieces:1,MeshFaceMaterial:n.MultiMaterial,PointCloud:function(e,t){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new n.Points(e,t)},Particle:n.Sprite,ParticleSystem:function(e,t){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new n.Points(e,t)},PointCloudMaterial:function(e){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new n.PointsMaterial(e)},ParticleBasicMaterial:function(e){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new n.PointsMaterial(e)},ParticleSystemMaterial:function(e){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new n.PointsMaterial(e)},Vertex:function(e,t,r){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new n.Vector3(e,t,r)}}),Object.assign(n.Box2.prototype,{empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)}}),Object.assign(n.Box3.prototype,{empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(n.Matrix3.prototype,{multiplyVector3:function(e){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},multiplyVector3Array:function(e){return console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."),this.applyToVector3Array(e)}}),Object.assign(n.Matrix4.prototype,{extractPosition:function(e){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(e)},setRotationFromQuaternion:function(e){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(e)},multiplyVector3:function(e){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead."),e.applyProjection(this)},multiplyVector4:function(e){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector3Array:function(e){return console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."),this.applyToVector3Array(e)},rotateAxis:function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),e.transformDirection(this)},crossVector:function(e){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},translate:function(e){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(e){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(e){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(e){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(e,t){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")}}),Object.assign(n.Plane.prototype,{isIntersectionLine:function(e){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(e)}}),Object.assign(n.Quaternion.prototype,{multiplyVector3:function(e){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)}}),Object.assign(n.Ray.prototype,{isIntersectionBox:function(e){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(n.Vector3.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(e){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,e)}}),Object.assign(n.Object3D.prototype,{getChildByName:function(e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(e)},renderDepth:function(e){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(e,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,e)}}),Object.defineProperties(n.Object3D.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(e){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(n.LOD.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),n.PerspectiveCamera.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==t&&(this.filmGauge=t),this.setFocalLength(e)},Object.defineProperties(n.Light.prototype,{onlyShadow:{set:function(e){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(e){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=e}},shadowDarkness:{set:function(e){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=e}}}),Object.defineProperties(n.BufferAttribute.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count."),this.array.length}}}),Object.assign(n.BufferGeometry.prototype,{addIndex:function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(e)},addDrawCall:function(e,t,r){void 0!==r&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(e,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(n.BufferGeometry.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(n.Material.prototype,{wrapAround:{get:function(){console.warn("THREE."+this.type+": .wrapAround has been removed.")},set:function(e){console.warn("THREE."+this.type+": .wrapAround has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE."+this.type+": .wrapRGB has been removed."),new n.Color}}}),Object.defineProperties(n.MeshPhongMaterial.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(e){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(n.ShaderMaterial.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=e}}}),n.EventDispatcher.prototype=Object.assign(Object.create({constructor:n.EventDispatcher,apply:function(e){console.warn("THREE.EventDispatcher: .apply is deprecated, just inherit or Object.assign the prototype to mix-in."),Object.assign(e,this)}}),n.EventDispatcher.prototype),Object.assign(n.WebGLRenderer.prototype,{supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(e)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
}}),Object.defineProperties(n.WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace."),this.shadowMap.cullFace=e}}}),Object.defineProperties(n.WebGLShadowMap.prototype,{cullFace:{get:function(){return this.renderReverseSided?n.CullFaceFront:n.CullFaceBack},set:function(e){var t=e!==n.CullFaceBack;console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to "+t+"."),this.renderReverseSided=t}}}),Object.defineProperties(n.WebGLRenderTarget.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=e}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=e}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=e}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=e}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=e}}}),Object.assign(n.Audio.prototype,{load:function(e){console.warn("THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.");var t=this,r=new n.AudioLoader;return r.load(e,function(e){t.setBuffer(e)}),this}}),Object.assign(n.AudioAnalyser.prototype,{getData:function(e){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()}}),n.GeometryUtils={merge:function(e,t,r){console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");var i;t instanceof n.Mesh&&(t.matrixAutoUpdate&&t.updateMatrix(),i=t.matrix,t=t.geometry),e.merge(t,i,r)},center:function(e){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),e.center()}},n.ImageUtils={crossOrigin:void 0,loadTexture:function(e,t,r,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var o=new n.TextureLoader;o.setCrossOrigin(this.crossOrigin);var a=o.load(e,r,void 0,i);return t&&(a.mapping=t),a},loadTextureCube:function(e,t,r,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var o=new n.CubeTextureLoader;o.setCrossOrigin(this.crossOrigin);var a=o.load(e,r,void 0,i);return t&&(a.mapping=t),a},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")}},n.Projector=function(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),this.projectVector=function(e,t){console.warn("THREE.Projector: .projectVector() is now vector.project()."),e.project(t)},this.unprojectVector=function(e,t){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),e.unproject(t)},this.pickingRay=function(e,t){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}},n.CanvasRenderer=function(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"),this.domElement=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),this.clear=function(){},this.render=function(){},this.setClearColor=function(){},this.setSize=function(){}},n.CurveUtils={tangentQuadraticBezier:function(e,t,r,n){return 2*(1-e)*(r-t)+2*e*(n-r)},tangentCubicBezier:function(e,t,r,n,i){return-3*t*(1-e)*(1-e)+3*r*(1-e)*(1-e)-6*e*r*(1-e)+6*e*n*(1-e)-3*e*e*n+3*e*e*i},tangentSpline:function(e,t,r,n,i){var o=6*e*e-6*e,a=3*e*e-4*e+1,s=-6*e*e+6*e,c=3*e*e-2*e;return o+a+s+c},interpolate:function(e,t,r,n,i){var o=.5*(r-e),a=.5*(n-t),s=i*i,c=i*s;return(2*t-2*r+o+a)*c+(-3*t+3*r-2*o-a)*s+o*i+t}},n.SceneUtils={createMultiMaterialObject:function(e,t){for(var r=new n.Group,i=0,o=t.length;i<o;i++)r.add(new n.Mesh(e,t[i]));return r},detach:function(e,t,r){e.applyMatrix(t.matrixWorld),t.remove(e),r.add(e)},attach:function(e,t,r){var i=new n.Matrix4;i.getInverse(r.matrixWorld),e.applyMatrix(i),t.remove(e),r.add(e)}},n.ShapeUtils={area:function(e){for(var t=e.length,r=0,n=t-1,i=0;i<t;n=i++)r+=e[n].x*e[i].y-e[i].x*e[n].y;return.5*r},triangulate:function(){function e(e,t,r,n,i,o){var a,s,c,l,u,h,p,d,f;if(s=e[o[t]].x,c=e[o[t]].y,l=e[o[r]].x,u=e[o[r]].y,h=e[o[n]].x,p=e[o[n]].y,Number.EPSILON>(l-s)*(p-c)-(u-c)*(h-s))return!1;var m,v,g,y,x,b,w,_,M,S,T,E,A,C,L;for(m=h-l,v=p-u,g=s-h,y=c-p,x=l-s,b=u-c,a=0;a<i;a++)if(d=e[o[a]].x,f=e[o[a]].y,!(d===s&&f===c||d===l&&f===u||d===h&&f===p)&&(w=d-s,_=f-c,M=d-l,S=f-u,T=d-h,E=f-p,L=m*S-v*M,A=x*_-b*w,C=g*E-y*T,L>=-Number.EPSILON&&C>=-Number.EPSILON&&A>=-Number.EPSILON))return!1;return!0}return function(t,r){var i=t.length;if(i<3)return null;var o,a,s,c=[],l=[],u=[];if(n.ShapeUtils.area(t)>0)for(a=0;a<i;a++)l[a]=a;else for(a=0;a<i;a++)l[a]=i-1-a;var h=i,p=2*h;for(a=h-1;h>2;){if(p--<=0)return console.warn("THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()"),r?u:c;if(o=a,h<=o&&(o=0),a=o+1,h<=a&&(a=0),s=a+1,h<=s&&(s=0),e(t,o,a,s,h,l)){var d,f,m,v,g;for(d=l[o],f=l[a],m=l[s],c.push([t[d],t[f],t[m]]),u.push([l[o],l[a],l[s]]),v=a,g=a+1;g<h;v++,g++)l[v]=l[g];h--,p=2*h}}return r?u:c}}(),triangulateShape:function(e,t){function r(e){var t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function i(e,t,r){return e.x!==t.x?e.x<t.x?e.x<=r.x&&r.x<=t.x:t.x<=r.x&&r.x<=e.x:e.y<t.y?e.y<=r.y&&r.y<=t.y:t.y<=r.y&&r.y<=e.y}function o(e,t,r,n,o){var a=t.x-e.x,s=t.y-e.y,c=n.x-r.x,l=n.y-r.y,u=e.x-r.x,h=e.y-r.y,p=s*c-a*l,d=s*u-a*h;if(Math.abs(p)>Number.EPSILON){var f;if(p>0){if(d<0||d>p)return[];if(f=l*u-c*h,f<0||f>p)return[]}else{if(d>0||d<p)return[];if(f=l*u-c*h,f>0||f<p)return[]}if(0===f)return!o||0!==d&&d!==p?[e]:[];if(f===p)return!o||0!==d&&d!==p?[t]:[];if(0===d)return[r];if(d===p)return[n];var m=f/p;return[{x:e.x+m*a,y:e.y+m*s}]}if(0!==d||l*u!==c*h)return[];var v=0===a&&0===s,g=0===c&&0===l;if(v&&g)return e.x!==r.x||e.y!==r.y?[]:[e];if(v)return i(r,n,e)?[e]:[];if(g)return i(e,t,r)?[r]:[];var y,x,b,w,_,M,S,T;return 0!==a?(e.x<t.x?(y=e,b=e.x,x=t,w=t.x):(y=t,b=t.x,x=e,w=e.x),r.x<n.x?(_=r,S=r.x,M=n,T=n.x):(_=n,S=n.x,M=r,T=r.x)):(e.y<t.y?(y=e,b=e.y,x=t,w=t.y):(y=t,b=t.y,x=e,w=e.y),r.y<n.y?(_=r,S=r.y,M=n,T=n.y):(_=n,S=n.y,M=r,T=r.y)),b<=S?w<S?[]:w===S?o?[]:[_]:w<=T?[_,x]:[_,M]:b>T?[]:b===T?o?[]:[y]:w<=T?[y,x]:[y,M]}function a(e,t,r,n){var i=t.x-e.x,o=t.y-e.y,a=r.x-e.x,s=r.y-e.y,c=n.x-e.x,l=n.y-e.y,u=i*s-o*a,h=i*l-o*c;if(Math.abs(u)>Number.EPSILON){var p=c*s-l*a;return u>0?h>=0&&p>=0:h>=0||p>=0}return h>0}function s(e,t){function r(e,t){var r=y.length-1,n=e-1;n<0&&(n=r);var i=e+1;i>r&&(i=0);var o=a(y[e],y[n],y[i],s[t]);if(!o)return!1;var c=s.length-1,l=t-1;l<0&&(l=c);var u=t+1;return u>c&&(u=0),o=a(s[t],s[l],s[u],y[e]),!!o}function n(e,t){var r,n,i;for(r=0;r<y.length;r++)if(n=r+1,n%=y.length,i=o(e,t,y[r],y[n],!0),i.length>0)return!0;return!1}function i(e,r){var n,i,a,s,c;for(n=0;n<x.length;n++)for(i=t[x[n]],a=0;a<i.length;a++)if(s=a+1,s%=i.length,c=o(e,r,i[a],i[s],!0),c.length>0)return!0;return!1}for(var s,c,l,u,h,p,d,f,m,v,g,y=e.concat(),x=[],b=[],w=0,_=t.length;w<_;w++)x.push(w);for(var M=0,S=2*x.length;x.length>0;){if(S--,S<0){console.log("Infinite Loop! Holes left:"+x.length+", Probably Hole outside Shape!");break}for(l=M;l<y.length;l++){u=y[l],c=-1;for(var w=0;w<x.length;w++)if(p=x[w],d=u.x+":"+u.y+":"+p,void 0===b[d]){s=t[p];for(var T=0;T<s.length;T++)if(h=s[T],r(l,T)&&!n(u,h)&&!i(u,h)){c=T,x.splice(w,1),f=y.slice(0,l+1),m=y.slice(l),v=s.slice(c),g=s.slice(0,c+1),y=f.concat(v).concat(g).concat(m),M=l;break}if(c>=0)break;b[d]=!0}if(c>=0)break}}return y}r(e),t.forEach(r);for(var c,l,u,h,p,d,f={},m=e.concat(),v=0,g=t.length;v<g;v++)Array.prototype.push.apply(m,t[v]);for(c=0,l=m.length;c<l;c++)p=m[c].x+":"+m[c].y,void 0!==f[p]&&console.warn("THREE.ShapeUtils: Duplicate point",p,c),f[p]=c;var y=s(e,t),x=n.ShapeUtils.triangulate(y,!1);for(c=0,l=x.length;c<l;c++)for(h=x[c],u=0;u<3;u++)p=h[u].x+":"+h[u].y,d=f[p],void 0!==d&&(h[u]=d);return x.concat()},isClockWise:function(e){return n.ShapeUtils.area(e)<0},b2:function(){function e(e,t){var r=1-e;return r*r*t}function t(e,t){return 2*(1-e)*e*t}function r(e,t){return e*e*t}return function(n,i,o,a){return e(n,i)+t(n,o)+r(n,a)}}(),b3:function(){function e(e,t){var r=1-e;return r*r*r*t}function t(e,t){var r=1-e;return 3*r*r*e*t}function r(e,t){var r=1-e;return 3*r*e*e*t}function n(e,t){return e*e*e*t}return function(i,o,a,s,c){return e(i,o)+t(i,a)+r(i,s)+n(i,c)}}()},n.Curve=function(){},n.Curve.prototype={constructor:n.Curve,getPoint:function(e){return console.warn("THREE.Curve: Warning, getPoint() not implemented!"),null},getPointAt:function(e){var t=this.getUtoTmapping(e);return this.getPoint(t)},getPoints:function(e){e||(e=5);for(var t=[],r=0;r<=e;r++)t.push(this.getPoint(r/e));return t},getSpacedPoints:function(e){e||(e=5);for(var t=[],r=0;r<=e;r++)t.push(this.getPointAt(r/e));return t},getLength:function(){var e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(e||(e=this.__arcLengthDivisions?this.__arcLengthDivisions:200),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var t,r,n=[],i=this.getPoint(0),o=0;for(n.push(0),r=1;r<=e;r++)t=this.getPoint(r/e),o+=t.distanceTo(i),n.push(o),i=t;return this.cacheArcLengths=n,n},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,t){var r,n=this.getLengths(),i=0,o=n.length;r=t?t:e*n[o-1];for(var a,s=0,c=o-1;s<=c;)if(i=Math.floor(s+(c-s)/2),a=n[i]-r,a<0)s=i+1;else{if(!(a>0)){c=i;break}c=i-1}if(i=c,n[i]===r){var l=i/(o-1);return l}var u=n[i],h=n[i+1],p=h-u,d=(r-u)/p,l=(i+d)/(o-1);return l},getTangent:function(e){var t=1e-4,r=e-t,n=e+t;r<0&&(r=0),n>1&&(n=1);var i=this.getPoint(r),o=this.getPoint(n),a=o.clone().sub(i);return a.normalize()},getTangentAt:function(e){var t=this.getUtoTmapping(e);return this.getTangent(t)}},n.Curve.create=function(e,t){return e.prototype=Object.create(n.Curve.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e},n.CurvePath=function(){this.curves=[],this.autoClose=!1},n.CurvePath.prototype=Object.assign(Object.create(n.Curve.prototype),{constructor:n.CurvePath,add:function(e){this.curves.push(e)},closePath:function(){var e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new n.LineCurve(t,e))},getPoint:function(e){for(var t=e*this.getLength(),r=this.getCurveLengths(),n=0;n<r.length;){if(r[n]>=t){var i=r[n]-t,o=this.curves[n],a=o.getLength(),s=0===a?0:1-i/a;return o.getPointAt(s)}n++}return null},getLength:function(){var e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var e=[],t=0,r=0,n=this.curves.length;r<n;r++)t+=this.curves[r].getLength(),e.push(t);return this.cacheLengths=e,e},getSpacedPoints:function(e){e||(e=40);for(var t=[],r=0;r<=e;r++)t.push(this.getPoint(r/e));return this.autoClose&&t.push(t[0]),t},getPoints:function(e){e=e||12;for(var t,r=[],i=0,o=this.curves;i<o.length;i++)for(var a=o[i],s=a instanceof n.EllipseCurve?2*e:a instanceof n.LineCurve?1:a instanceof n.SplineCurve?e*a.points.length:e,c=a.getPoints(s),l=0;l<c.length;l++){var u=c[l];t&&t.equals(u)||(r.push(u),t=u)}return this.autoClose&&r.length>1&&!r[r.length-1].equals(r[0])&&r.push(r[0]),r},createPointsGeometry:function(e){var t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){var t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){for(var t=new n.Geometry,r=0,i=e.length;r<i;r++){var o=e[r];t.vertices.push(new n.Vector3(o.x,o.y,o.z||0))}return t}}),n.Font=function(e){this.data=e},Object.assign(n.Font.prototype,{generateShapes:function(e,t,r){function i(e){for(var r=String(e).split(""),n=t/a.resolution,i=0,s=[],c=0;c<r.length;c++){var l=o(r[c],n,i);i+=l.offset,s.push(l.path)}return s}function o(e,t,i){var o=a.glyphs[e]||a.glyphs["?"];if(o){var s,c,l,u,h,p,d,f,m,v,g,y=new n.ShapePath,x=[],b=n.ShapeUtils.b2,w=n.ShapeUtils.b3;if(o.o)for(var _=o._cachedOutline||(o._cachedOutline=o.o.split(" ")),M=0,S=_.length;M<S;){var T=_[M++];switch(T){case"m":s=_[M++]*t+i,c=_[M++]*t,y.moveTo(s,c);break;case"l":s=_[M++]*t+i,c=_[M++]*t,y.lineTo(s,c);break;case"q":if(l=_[M++]*t+i,u=_[M++]*t,d=_[M++]*t+i,f=_[M++]*t,y.quadraticCurveTo(d,f,l,u),g=x[x.length-1]){h=g.x,p=g.y;for(var E=1;E<=r;E++){var A=E/r;b(A,h,d,l),b(A,p,f,u)}}break;case"b":if(l=_[M++]*t+i,u=_[M++]*t,d=_[M++]*t+i,f=_[M++]*t,m=_[M++]*t+i,v=_[M++]*t,y.bezierCurveTo(d,f,m,v,l,u),g=x[x.length-1]){h=g.x,p=g.y;for(var E=1;E<=r;E++){var A=E/r;w(A,h,d,m,l),w(A,p,f,v,u)}}}}return{offset:o.ha*t,path:y}}}void 0===t&&(t=100),void 0===r&&(r=4);for(var a=this.data,s=i(e),c=[],l=0,u=s.length;l<u;l++)Array.prototype.push.apply(c,s[l].toShapes());return c}}),n.Path=function(e){n.CurvePath.call(this),this.currentPoint=new n.Vector2,e&&this.fromPoints(e)},n.Path.prototype=Object.assign(Object.create(n.CurvePath.prototype),{constructor:n.Path,fromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(var t=1,r=e.length;t<r;t++)this.lineTo(e[t].x,e[t].y)},moveTo:function(e,t){this.currentPoint.set(e,t)},lineTo:function(e,t){var r=new n.LineCurve(this.currentPoint.clone(),new n.Vector2(e,t));this.curves.push(r),this.currentPoint.set(e,t)},quadraticCurveTo:function(e,t,r,i){var o=new n.QuadraticBezierCurve(this.currentPoint.clone(),new n.Vector2(e,t),new n.Vector2(r,i));this.curves.push(o),this.currentPoint.set(r,i)},bezierCurveTo:function(e,t,r,i,o,a){var s=new n.CubicBezierCurve(this.currentPoint.clone(),new n.Vector2(e,t),new n.Vector2(r,i),new n.Vector2(o,a));this.curves.push(s),this.currentPoint.set(o,a)},splineThru:function(e){var t=[this.currentPoint.clone()].concat(e),r=new n.SplineCurve(t);this.curves.push(r),this.currentPoint.copy(e[e.length-1])},arc:function(e,t,r,n,i,o){var a=this.currentPoint.x,s=this.currentPoint.y;this.absarc(e+a,t+s,r,n,i,o)},absarc:function(e,t,r,n,i,o){this.absellipse(e,t,r,r,n,i,o)},ellipse:function(e,t,r,n,i,o,a,s){var c=this.currentPoint.x,l=this.currentPoint.y;this.absellipse(e+c,t+l,r,n,i,o,a,s)},absellipse:function(e,t,r,i,o,a,s,c){var l=new n.EllipseCurve(e,t,r,i,o,a,s,c);if(this.curves.length>0){var u=l.getPoint(0);u.equals(this.currentPoint)||this.lineTo(u.x,u.y)}this.curves.push(l);var h=l.getPoint(1);this.currentPoint.copy(h)}}),n.ShapePath=function(){this.subPaths=[],this.currentPath=null},n.ShapePath.prototype={moveTo:function(e,t){this.currentPath=new n.Path,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t)},lineTo:function(e,t){this.currentPath.lineTo(e,t)},quadraticCurveTo:function(e,t,r,n){this.currentPath.quadraticCurveTo(e,t,r,n)},bezierCurveTo:function(e,t,r,n,i,o){this.currentPath.bezierCurveTo(e,t,r,n,i,o)},splineThru:function(e){this.currentPath.splineThru(e)},toShapes:function(e,t){function r(e){for(var t=[],r=0,i=e.length;r<i;r++){var o=e[r],a=new n.Shape;a.curves=o.curves,t.push(a)}return t}function i(e,t){for(var r=t.length,n=!1,i=r-1,o=0;o<r;i=o++){var a=t[i],s=t[o],c=s.x-a.x,l=s.y-a.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(a=t[o],c=-c,s=t[i],l=-l),e.y<a.y||e.y>s.y)continue;if(e.y===a.y){if(e.x===a.x)return!0}else{var u=l*(e.x-a.x)-c*(e.y-a.y);if(0===u)return!0;if(u<0)continue;n=!n}}else{if(e.y!==a.y)continue;if(s.x<=e.x&&e.x<=a.x||a.x<=e.x&&e.x<=s.x)return!0}}return n}var o=n.ShapeUtils.isClockWise,a=this.subPaths;if(0===a.length)return[];if(t===!0)return r(a);var s,c,l,u=[];if(1===a.length)return c=a[0],l=new n.Shape,l.curves=c.curves,u.push(l),u;var h=!o(a[0].getPoints());h=e?!h:h;var p,d=[],f=[],m=[],v=0;f[v]=void 0,m[v]=[];for(var g=0,y=a.length;g<y;g++)c=a[g],p=c.getPoints(),s=o(p),s=e?!s:s,s?(!h&&f[v]&&v++,f[v]={s:new n.Shape,p:p},f[v].s.curves=c.curves,h&&v++,m[v]=[]):m[v].push({h:c,p:p[0]});if(!f[0])return r(a);if(f.length>1){for(var x=!1,b=[],w=0,_=f.length;w<_;w++)d[w]=[];for(var w=0,_=f.length;w<_;w++)for(var M=m[w],S=0;S<M.length;S++){for(var T=M[S],E=!0,A=0;A<f.length;A++)i(T.p,f[A].p)&&(w!==A&&b.push({froms:w,tos:A,hole:S}),E?(E=!1,d[A].push(T)):x=!0);E&&d[w].push(T)}b.length>0&&(x||(m=d))}for(var C,g=0,L=f.length;g<L;g++){l=f[g].s,u.push(l),C=m[g];for(var P=0,R=C.length;P<R;P++)l.holes.push(C[P].h)}return u}},n.Shape=function(){n.Path.apply(this,arguments),this.holes=[]},n.Shape.prototype=Object.assign(Object.create(n.Path.prototype),{constructor:n.Shape,extrude:function(e){return new n.ExtrudeGeometry(this,e)},makeGeometry:function(e){return new n.ShapeGeometry(this,e)},getPointsHoles:function(e){for(var t=[],r=0,n=this.holes.length;r<n;r++)t[r]=this.holes[r].getPoints(e);return t},extractAllPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},extractPoints:function(e){return this.extractAllPoints(e)}}),n.LineCurve=function(e,t){this.v1=e,this.v2=t},n.LineCurve.prototype=Object.create(n.Curve.prototype),n.LineCurve.prototype.constructor=n.LineCurve,n.LineCurve.prototype.getPoint=function(e){if(1===e)return this.v2.clone();var t=this.v2.clone().sub(this.v1);return t.multiplyScalar(e).add(this.v1),t},n.LineCurve.prototype.getPointAt=function(e){return this.getPoint(e)},n.LineCurve.prototype.getTangent=function(e){var t=this.v2.clone().sub(this.v1);return t.normalize()},n.QuadraticBezierCurve=function(e,t,r){this.v0=e,this.v1=t,this.v2=r},n.QuadraticBezierCurve.prototype=Object.create(n.Curve.prototype),n.QuadraticBezierCurve.prototype.constructor=n.QuadraticBezierCurve,n.QuadraticBezierCurve.prototype.getPoint=function(e){var t=n.ShapeUtils.b2;return new n.Vector2(t(e,this.v0.x,this.v1.x,this.v2.x),t(e,this.v0.y,this.v1.y,this.v2.y))},n.QuadraticBezierCurve.prototype.getTangent=function(e){var t=n.CurveUtils.tangentQuadraticBezier;return new n.Vector2(t(e,this.v0.x,this.v1.x,this.v2.x),t(e,this.v0.y,this.v1.y,this.v2.y)).normalize()},n.CubicBezierCurve=function(e,t,r,n){this.v0=e,this.v1=t,this.v2=r,this.v3=n},n.CubicBezierCurve.prototype=Object.create(n.Curve.prototype),n.CubicBezierCurve.prototype.constructor=n.CubicBezierCurve,n.CubicBezierCurve.prototype.getPoint=function(e){var t=n.ShapeUtils.b3;return new n.Vector2(t(e,this.v0.x,this.v1.x,this.v2.x,this.v3.x),t(e,this.v0.y,this.v1.y,this.v2.y,this.v3.y))},n.CubicBezierCurve.prototype.getTangent=function(e){var t=n.CurveUtils.tangentCubicBezier;return new n.Vector2(t(e,this.v0.x,this.v1.x,this.v2.x,this.v3.x),t(e,this.v0.y,this.v1.y,this.v2.y,this.v3.y)).normalize()},n.SplineCurve=function(e){this.points=void 0==e?[]:e},n.SplineCurve.prototype=Object.create(n.Curve.prototype),n.SplineCurve.prototype.constructor=n.SplineCurve,n.SplineCurve.prototype.getPoint=function(e){var t=this.points,r=(t.length-1)*e,i=Math.floor(r),o=r-i,a=t[0===i?i:i-1],s=t[i],c=t[i>t.length-2?t.length-1:i+1],l=t[i>t.length-3?t.length-1:i+2],u=n.CurveUtils.interpolate;return new n.Vector2(u(a.x,s.x,c.x,l.x,o),u(a.y,s.y,c.y,l.y,o))},n.EllipseCurve=function(e,t,r,n,i,o,a,s){this.aX=e,this.aY=t,this.xRadius=r,this.yRadius=n,this.aStartAngle=i,this.aEndAngle=o,this.aClockwise=a,this.aRotation=s||0},n.EllipseCurve.prototype=Object.create(n.Curve.prototype),n.EllipseCurve.prototype.constructor=n.EllipseCurve,n.EllipseCurve.prototype.getPoint=function(e){for(var t=2*Math.PI,r=this.aEndAngle-this.aStartAngle,i=Math.abs(r)<Number.EPSILON;r<0;)r+=t;for(;r>t;)r-=t;r<Number.EPSILON&&(r=i?0:t),this.aClockwise!==!0||i||(r===t?r=-t:r-=t);var o=this.aStartAngle+e*r,a=this.aX+this.xRadius*Math.cos(o),s=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){var c=Math.cos(this.aRotation),l=Math.sin(this.aRotation),u=a-this.aX,h=s-this.aY;a=u*c-h*l+this.aX,s=u*l+h*c+this.aY}return new n.Vector2(a,s)},n.ArcCurve=function(e,t,r,i,o,a){n.EllipseCurve.call(this,e,t,r,r,i,o,a)},n.ArcCurve.prototype=Object.create(n.EllipseCurve.prototype),n.ArcCurve.prototype.constructor=n.ArcCurve,n.LineCurve3=n.Curve.create(function(e,t){this.v1=e,this.v2=t},function(e){if(1===e)return this.v2.clone();var t=new n.Vector3;return t.subVectors(this.v2,this.v1),t.multiplyScalar(e),t.add(this.v1),t}),n.QuadraticBezierCurve3=n.Curve.create(function(e,t,r){this.v0=e,this.v1=t,this.v2=r},function(e){var t=n.ShapeUtils.b2;return new n.Vector3(t(e,this.v0.x,this.v1.x,this.v2.x),t(e,this.v0.y,this.v1.y,this.v2.y),t(e,this.v0.z,this.v1.z,this.v2.z))}),n.CubicBezierCurve3=n.Curve.create(function(e,t,r,n){this.v0=e,this.v1=t,this.v2=r,this.v3=n},function(e){var t=n.ShapeUtils.b3;return new n.Vector3(t(e,this.v0.x,this.v1.x,this.v2.x,this.v3.x),t(e,this.v0.y,this.v1.y,this.v2.y,this.v3.y),t(e,this.v0.z,this.v1.z,this.v2.z,this.v3.z))}),n.SplineCurve3=n.Curve.create(function(e){console.warn("THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3"),this.points=void 0==e?[]:e},function(e){var t=this.points,r=(t.length-1)*e,i=Math.floor(r),o=r-i,a=t[0==i?i:i-1],s=t[i],c=t[i>t.length-2?t.length-1:i+1],l=t[i>t.length-3?t.length-1:i+2],u=n.CurveUtils.interpolate;return new n.Vector3(u(a.x,s.x,c.x,l.x,o),u(a.y,s.y,c.y,l.y,o),u(a.z,s.z,c.z,l.z,o))}),n.CatmullRomCurve3=function(){function e(){}var t=new n.Vector3,r=new e,i=new e,o=new e;return e.prototype.init=function(e,t,r,n){this.c0=e,this.c1=r,this.c2=-3*e+3*t-2*r-n,this.c3=2*e-2*t+r+n},e.prototype.initNonuniformCatmullRom=function(e,t,r,n,i,o,a){var s=(t-e)/i-(r-e)/(i+o)+(r-t)/o,c=(r-t)/o-(n-t)/(o+a)+(n-r)/a;s*=o,c*=o,this.init(t,r,s,c)},e.prototype.initCatmullRom=function(e,t,r,n,i){this.init(t,r,i*(r-e),i*(n-t))},e.prototype.calc=function(e){var t=e*e,r=t*e;return this.c0+this.c1*e+this.c2*t+this.c3*r},n.Curve.create(function(e){this.points=e||[],this.closed=!1},function(e){var a,s,c,l,u=this.points;l=u.length,l<2&&console.log("duh, you need at least 2 points"),a=(l-(this.closed?0:1))*e,s=Math.floor(a),c=a-s,this.closed?s+=s>0?0:(Math.floor(Math.abs(s)/u.length)+1)*u.length:0===c&&s===l-1&&(s=l-2,c=1);var h,p,d,f;if(this.closed||s>0?h=u[(s-1)%l]:(t.subVectors(u[0],u[1]).add(u[0]),h=t),p=u[s%l],d=u[(s+1)%l],this.closed||s+2<l?f=u[(s+2)%l]:(t.subVectors(u[l-1],u[l-2]).add(u[l-1]),f=t),void 0===this.type||"centripetal"===this.type||"chordal"===this.type){var m="chordal"===this.type?.5:.25,v=Math.pow(h.distanceToSquared(p),m),g=Math.pow(p.distanceToSquared(d),m),y=Math.pow(d.distanceToSquared(f),m);g<1e-4&&(g=1),v<1e-4&&(v=g),y<1e-4&&(y=g),r.initNonuniformCatmullRom(h.x,p.x,d.x,f.x,v,g,y),i.initNonuniformCatmullRom(h.y,p.y,d.y,f.y,v,g,y),o.initNonuniformCatmullRom(h.z,p.z,d.z,f.z,v,g,y)}else if("catmullrom"===this.type){var x=void 0!==this.tension?this.tension:.5;r.initCatmullRom(h.x,p.x,d.x,f.x,x),i.initCatmullRom(h.y,p.y,d.y,f.y,x),o.initCatmullRom(h.z,p.z,d.z,f.z,x)}var b=new n.Vector3(r.calc(c),i.calc(c),o.calc(c));return b})}(),n.ClosedSplineCurve3=function(e){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3."),n.CatmullRomCurve3.call(this,e),this.type="catmullrom",this.closed=!0},n.ClosedSplineCurve3.prototype=Object.create(n.CatmullRomCurve3.prototype),n.BoxGeometry=function(e,t,r,i,o,a){n.Geometry.call(this),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:r,widthSegments:i,heightSegments:o,depthSegments:a},this.fromBufferGeometry(new n.BoxBufferGeometry(e,t,r,i,o,a)),this.mergeVertices()},n.BoxGeometry.prototype=Object.create(n.Geometry.prototype),n.BoxGeometry.prototype.constructor=n.BoxGeometry,n.CubeGeometry=n.BoxGeometry,n.BoxBufferGeometry=function(e,t,r,i,o,a){function s(e,t,r){var n=0;return n+=(e+1)*(t+1)*2,n+=(e+1)*(r+1)*2,n+=(r+1)*(t+1)*2}function c(e,t,r){var n=0;return n+=e*t*2,n+=e*r*2,n+=r*t*2,6*n}function l(e,t,r,i,o,a,s,c,l,h,p){for(var _=a/l,M=s/h,S=a/2,T=s/2,E=c/2,A=l+1,C=h+1,L=0,P=0,R=new n.Vector3,D=0;D<C;D++)for(var I=D*M-T,B=0;B<A;B++){var O=B*_-S;R[e]=O*i,R[t]=I*o,R[r]=E,f[g]=R.x,f[g+1]=R.y,f[g+2]=R.z,R[e]=0,R[t]=0,R[r]=c>0?1:-1,m[g]=R.x,m[g+1]=R.y,m[g+2]=R.z,v[y]=B/l,v[y+1]=1-D/h,g+=3,y+=2,L+=1}for(D=0;D<h;D++)for(B=0;B<l;B++){var F=b+B+A*D,N=b+B+A*(D+1),U=b+(B+1)+A*(D+1),G=b+(B+1)+A*D;d[x]=F,d[x+1]=N,d[x+2]=G,d[x+3]=N,d[x+4]=U,d[x+5]=G,x+=6,P+=6}u.addGroup(w,P,p),w+=P,b+=L}n.BufferGeometry.call(this),this.type="BoxBufferGeometry",this.parameters={width:e,height:t,depth:r,widthSegments:i,heightSegments:o,depthSegments:a};var u=this;i=Math.floor(i)||1,o=Math.floor(o)||1,a=Math.floor(a)||1;var h=s(i,o,a),p=c(i,o,a),d=new(p>65535?Uint32Array:Uint16Array)(p),f=new Float32Array(3*h),m=new Float32Array(3*h),v=new Float32Array(2*h),g=0,y=0,x=0,b=0,w=0;l("z","y","x",-1,-1,r,t,e,a,o,0),l("z","y","x",1,-1,r,t,-e,a,o,1),l("x","z","y",1,1,e,r,t,i,a,2),l("x","z","y",1,-1,e,r,-t,i,a,3),l("x","y","z",1,-1,e,t,r,i,o,4),l("x","y","z",-1,-1,e,t,-r,i,o,5),this.setIndex(new n.BufferAttribute(d,1)),this.addAttribute("position",new n.BufferAttribute(f,3)),this.addAttribute("normal",new n.BufferAttribute(m,3)),this.addAttribute("uv",new n.BufferAttribute(v,2))},n.BoxBufferGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.BoxBufferGeometry.prototype.constructor=n.BoxBufferGeometry,n.CircleGeometry=function(e,t,r,i){n.Geometry.call(this),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:r,thetaLength:i},this.fromBufferGeometry(new n.CircleBufferGeometry(e,t,r,i))},n.CircleGeometry.prototype=Object.create(n.Geometry.prototype),n.CircleGeometry.prototype.constructor=n.CircleGeometry,n.CircleBufferGeometry=function(e,t,r,i){n.BufferGeometry.call(this),this.type="CircleBufferGeometry",this.parameters={radius:e,segments:t,thetaStart:r,thetaLength:i},e=e||50,t=void 0!==t?Math.max(3,t):8,r=void 0!==r?r:0,i=void 0!==i?i:2*Math.PI;var o=t+2,a=new Float32Array(3*o),s=new Float32Array(3*o),c=new Float32Array(2*o);s[2]=1,c[0]=.5,c[1]=.5;for(var l=0,u=3,h=2;l<=t;l++,u+=3,h+=2){var p=r+l/t*i;a[u]=e*Math.cos(p),a[u+1]=e*Math.sin(p),s[u+2]=1,c[h]=(a[u]/e+1)/2,c[h+1]=(a[u+1]/e+1)/2}for(var d=[],u=1;u<=t;u++)d.push(u,u+1,0);this.setIndex(new n.BufferAttribute(new Uint16Array(d),1)),this.addAttribute("position",new n.BufferAttribute(a,3)),this.addAttribute("normal",new n.BufferAttribute(s,3)),this.addAttribute("uv",new n.BufferAttribute(c,2)),this.boundingSphere=new n.Sphere(new n.Vector3,e)},n.CircleBufferGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.CircleBufferGeometry.prototype.constructor=n.CircleBufferGeometry,n.CylinderBufferGeometry=function(e,t,r,i,o,a,s,c){function l(){var e=(i+1)*(o+1);return a===!1&&(e+=(i+1)*f+i*f),e}function u(){var e=i*o*2*3;return a===!1&&(e+=i*f*3),e}function h(){var a,l,u=new n.Vector3,h=new n.Vector3,p=0,f=(t-e)/r;for(l=0;l<=o;l++){var m=[],v=l/o,E=v*(t-e)+e;for(a=0;a<=i;a++){var A=a/i;h.x=E*Math.sin(A*c+s),h.y=-v*r+S,h.z=E*Math.cos(A*c+s),y.setXYZ(w,h.x,h.y,h.z),u.copy(h),(0===e&&0===l||0===t&&l===o)&&(u.x=Math.sin(A*c+s),u.z=Math.cos(A*c+s)),u.setY(Math.sqrt(u.x*u.x+u.z*u.z)*f).normalize(),x.setXYZ(w,u.x,u.y,u.z),b.setXY(w,A,1-v),m.push(w),w++}M.push(m)}for(a=0;a<i;a++)for(l=0;l<o;l++){var C=M[l][a],L=M[l+1][a],P=M[l+1][a+1],R=M[l][a+1];g.setX(_,C),_++,g.setX(_,L),_++,g.setX(_,R),_++,g.setX(_,L),_++,g.setX(_,P),_++,g.setX(_,R),_++,p+=6}d.addGroup(T,p,0),T+=p}function p(r){var o,a,l,u=new n.Vector2,h=new n.Vector3,p=0,f=r===!0?e:t,m=r===!0?1:-1;for(a=w,o=1;o<=i;o++)y.setXYZ(w,0,S*m,0),x.setXYZ(w,0,m,0),u.x=.5,u.y=.5,b.setXY(w,u.x,u.y),w++;for(l=w,o=0;o<=i;o++){var v=o/i,M=v*c+s,E=Math.cos(M),A=Math.sin(M);h.x=f*A,h.y=S*m,h.z=f*E,y.setXYZ(w,h.x,h.y,h.z),x.setXYZ(w,0,m,0),u.x=.5*E+.5,u.y=.5*A*m+.5,b.setXY(w,u.x,u.y),w++}for(o=0;o<i;o++){var C=a+o,L=l+o;r===!0?(g.setX(_,L),_++,g.setX(_,L+1),_++,g.setX(_,C),_++):(g.setX(_,L+1),_++,g.setX(_,L),_++,g.setX(_,C),_++),p+=3}d.addGroup(T,p,r===!0?1:2),T+=p}n.BufferGeometry.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:r,radialSegments:i,heightSegments:o,openEnded:a,thetaStart:s,thetaLength:c};var d=this;e=void 0!==e?e:20,t=void 0!==t?t:20,r=void 0!==r?r:100,i=Math.floor(i)||8,o=Math.floor(o)||1,a=void 0!==a&&a,s=void 0!==s?s:0,c=void 0!==c?c:2*Math.PI;var f=0;a===!1&&(e>0&&f++,t>0&&f++);var m=l(),v=u(),g=new n.BufferAttribute(new(v>65535?Uint32Array:Uint16Array)(v),1),y=new n.BufferAttribute(new Float32Array(3*m),3),x=new n.BufferAttribute(new Float32Array(3*m),3),b=new n.BufferAttribute(new Float32Array(2*m),2),w=0,_=0,M=[],S=r/2,T=0;h(),a===!1&&(e>0&&p(!0),t>0&&p(!1)),this.setIndex(g),this.addAttribute("position",y),this.addAttribute("normal",x),this.addAttribute("uv",b)},n.CylinderBufferGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.CylinderBufferGeometry.prototype.constructor=n.CylinderBufferGeometry,n.CylinderGeometry=function(e,t,r,i,o,a,s,c){n.Geometry.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:r,radialSegments:i,heightSegments:o,openEnded:a,thetaStart:s,thetaLength:c},this.fromBufferGeometry(new n.CylinderBufferGeometry(e,t,r,i,o,a,s,c)),this.mergeVertices()},n.CylinderGeometry.prototype=Object.create(n.Geometry.prototype),n.CylinderGeometry.prototype.constructor=n.CylinderGeometry,n.ConeBufferGeometry=function(e,t,r,i,o,a,s){n.CylinderBufferGeometry.call(this,0,e,t,r,i,o,a,s),this.type="ConeBufferGeometry",this.parameters={radius:e,height:t,radialSegments:r,heightSegments:i,thetaStart:a,thetaLength:s}},n.ConeBufferGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.ConeBufferGeometry.prototype.constructor=n.ConeBufferGeometry,
n.ConeGeometry=function(e,t,r,i,o,a,s){n.CylinderGeometry.call(this,0,e,t,r,i,o,a,s),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:r,heightSegments:i,openEnded:o,thetaStart:a,thetaLength:s}},n.ConeGeometry.prototype=Object.create(n.CylinderGeometry.prototype),n.ConeGeometry.prototype.constructor=n.ConeGeometry,n.EdgesGeometry=function(e,t){function r(e,t){return e-t}n.BufferGeometry.call(this),t=void 0!==t?t:1;var i,o=Math.cos(n.Math.DEG2RAD*t),a=[0,0],s={},c=["a","b","c"];e instanceof n.BufferGeometry?(i=new n.Geometry,i.fromBufferGeometry(e)):i=e.clone(),i.mergeVertices(),i.computeFaceNormals();for(var l=i.vertices,u=i.faces,h=0,p=u.length;h<p;h++)for(var d=u[h],f=0;f<3;f++){a[0]=d[c[f]],a[1]=d[c[(f+1)%3]],a.sort(r);var m=a.toString();void 0===s[m]?s[m]={vert1:a[0],vert2:a[1],face1:h,face2:void 0}:s[m].face2=h}var v=[];for(var m in s){var g=s[m];if(void 0===g.face2||u[g.face1].normal.dot(u[g.face2].normal)<=o){var y=l[g.vert1];v.push(y.x),v.push(y.y),v.push(y.z),y=l[g.vert2],v.push(y.x),v.push(y.y),v.push(y.z)}}this.addAttribute("position",new n.BufferAttribute(new Float32Array(v),3))},n.EdgesGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.EdgesGeometry.prototype.constructor=n.EdgesGeometry,n.ExtrudeGeometry=function(e,t){return"undefined"==typeof e?void(e=[]):(n.Geometry.call(this),this.type="ExtrudeGeometry",e=Array.isArray(e)?e:[e],this.addShapeList(e,t),void this.computeFaceNormals())},n.ExtrudeGeometry.prototype=Object.create(n.Geometry.prototype),n.ExtrudeGeometry.prototype.constructor=n.ExtrudeGeometry,n.ExtrudeGeometry.prototype.addShapeList=function(e,t){for(var r=e.length,n=0;n<r;n++){var i=e[n];this.addShape(i,t)}},n.ExtrudeGeometry.prototype.addShape=function(e,t){function r(e,t,r){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().multiplyScalar(r).add(e)}function i(e,t,r){var i,o,a=1,s=e.x-t.x,c=e.y-t.y,l=r.x-e.x,u=r.y-e.y,h=s*s+c*c,p=s*u-c*l;if(Math.abs(p)>Number.EPSILON){var d=Math.sqrt(h),f=Math.sqrt(l*l+u*u),m=t.x-c/d,v=t.y+s/d,g=r.x-u/f,y=r.y+l/f,x=((g-m)*u-(y-v)*l)/(s*u-c*l);i=m+s*x-e.x,o=v+c*x-e.y;var b=i*i+o*o;if(b<=2)return new n.Vector2(i,o);a=Math.sqrt(b/2)}else{var w=!1;s>Number.EPSILON?l>Number.EPSILON&&(w=!0):s<-Number.EPSILON?l<-Number.EPSILON&&(w=!0):Math.sign(c)===Math.sign(u)&&(w=!0),w?(i=-c,o=s,a=Math.sqrt(h)):(i=s,o=c,a=Math.sqrt(h/2))}return new n.Vector2(i/a,o/a)}function o(){if(b){var e=0,t=j*e;for(X=0;X<H;X++)z=O[X],l(z[2]+t,z[1]+t,z[0]+t);for(e=_+2*x,t=j*e,X=0;X<H;X++)z=O[X],l(z[0]+t,z[1]+t,z[2]+t)}else{for(X=0;X<H;X++)z=O[X],l(z[2],z[1],z[0]);for(X=0;X<H;X++)z=O[X],l(z[0]+j*_,z[1]+j*_,z[2]+j*_)}}function a(){var e=0;for(s(F,e),e+=F.length,A=0,C=I.length;A<C;A++)E=I[A],s(E,e),e+=E.length}function s(e,t){var r,n;for(X=e.length;--X>=0;){r=X,n=X-1,n<0&&(n=e.length-1);var i=0,o=_+2*x;for(i=0;i<o;i++){var a=j*i,s=j*(i+1),c=t+r+a,l=t+n+a,h=t+n+s,p=t+r+s;u(c,l,h,p,e,i,o,r,n)}}}function c(e,t,r){L.vertices.push(new n.Vector3(e,t,r))}function l(e,t,r){e+=P,t+=P,r+=P,L.faces.push(new n.Face3(e,t,r,null,null,0));var i=T.generateTopUV(L,e,t,r);L.faceVertexUvs[0].push(i)}function u(e,t,r,i,o,a,s,c,l){e+=P,t+=P,r+=P,i+=P,L.faces.push(new n.Face3(e,t,i,null,null,1)),L.faces.push(new n.Face3(t,r,i,null,null,1));var u=T.generateSideWallUV(L,e,t,r,i);L.faceVertexUvs[0].push([u[0],u[1],u[3]]),L.faceVertexUvs[0].push([u[1],u[2],u[3]])}var h,p,d,f,m,v=void 0!==t.amount?t.amount:100,g=void 0!==t.bevelThickness?t.bevelThickness:6,y=void 0!==t.bevelSize?t.bevelSize:g-2,x=void 0!==t.bevelSegments?t.bevelSegments:3,b=void 0===t.bevelEnabled||t.bevelEnabled,w=void 0!==t.curveSegments?t.curveSegments:12,_=void 0!==t.steps?t.steps:1,M=t.extrudePath,S=!1,T=void 0!==t.UVGenerator?t.UVGenerator:n.ExtrudeGeometry.WorldUVGenerator;M&&(h=M.getSpacedPoints(_),S=!0,b=!1,p=void 0!==t.frames?t.frames:new n.TubeGeometry.FrenetFrames(M,_,(!1)),d=new n.Vector3,f=new n.Vector3,m=new n.Vector3),b||(x=0,g=0,y=0);var E,A,C,L=this,P=this.vertices.length,R=e.extractPoints(w),D=R.shape,I=R.holes,B=!n.ShapeUtils.isClockWise(D);if(B){for(D=D.reverse(),A=0,C=I.length;A<C;A++)E=I[A],n.ShapeUtils.isClockWise(E)&&(I[A]=E.reverse());B=!1}var O=n.ShapeUtils.triangulateShape(D,I),F=D;for(A=0,C=I.length;A<C;A++)E=I[A],D=D.concat(E);for(var N,U,G,V,k,z,j=D.length,H=O.length,W=[],X=0,q=F.length,Y=q-1,Z=X+1;X<q;X++,Y++,Z++)Y===q&&(Y=0),Z===q&&(Z=0),W[X]=i(F[X],F[Y],F[Z]);var K,Q=[],J=W.concat();for(A=0,C=I.length;A<C;A++){for(E=I[A],K=[],X=0,q=E.length,Y=q-1,Z=X+1;X<q;X++,Y++,Z++)Y===q&&(Y=0),Z===q&&(Z=0),K[X]=i(E[X],E[Y],E[Z]);Q.push(K),J=J.concat(K)}for(N=0;N<x;N++){for(G=N/x,V=g*(1-G),U=y*Math.sin(G*Math.PI/2),X=0,q=F.length;X<q;X++)k=r(F[X],W[X],U),c(k.x,k.y,-V);for(A=0,C=I.length;A<C;A++)for(E=I[A],K=Q[A],X=0,q=E.length;X<q;X++)k=r(E[X],K[X],U),c(k.x,k.y,-V)}for(U=y,X=0;X<j;X++)k=b?r(D[X],J[X],U):D[X],S?(f.copy(p.normals[0]).multiplyScalar(k.x),d.copy(p.binormals[0]).multiplyScalar(k.y),m.copy(h[0]).add(f).add(d),c(m.x,m.y,m.z)):c(k.x,k.y,0);var $;for($=1;$<=_;$++)for(X=0;X<j;X++)k=b?r(D[X],J[X],U):D[X],S?(f.copy(p.normals[$]).multiplyScalar(k.x),d.copy(p.binormals[$]).multiplyScalar(k.y),m.copy(h[$]).add(f).add(d),c(m.x,m.y,m.z)):c(k.x,k.y,v/_*$);for(N=x-1;N>=0;N--){for(G=N/x,V=g*(1-G),U=y*Math.sin(G*Math.PI/2),X=0,q=F.length;X<q;X++)k=r(F[X],W[X],U),c(k.x,k.y,v+V);for(A=0,C=I.length;A<C;A++)for(E=I[A],K=Q[A],X=0,q=E.length;X<q;X++)k=r(E[X],K[X],U),S?c(k.x,k.y+h[_-1].y,h[_-1].x+V):c(k.x,k.y,v+V)}o(),a()},n.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(e,t,r,i){var o=e.vertices,a=o[t],s=o[r],c=o[i];return[new n.Vector2(a.x,a.y),new n.Vector2(s.x,s.y),new n.Vector2(c.x,c.y)]},generateSideWallUV:function(e,t,r,i,o){var a=e.vertices,s=a[t],c=a[r],l=a[i],u=a[o];return Math.abs(s.y-c.y)<.01?[new n.Vector2(s.x,1-s.z),new n.Vector2(c.x,1-c.z),new n.Vector2(l.x,1-l.z),new n.Vector2(u.x,1-u.z)]:[new n.Vector2(s.y,1-s.z),new n.Vector2(c.y,1-c.z),new n.Vector2(l.y,1-l.z),new n.Vector2(u.y,1-u.z)]}},n.ShapeGeometry=function(e,t){n.Geometry.call(this),this.type="ShapeGeometry",Array.isArray(e)===!1&&(e=[e]),this.addShapeList(e,t),this.computeFaceNormals()},n.ShapeGeometry.prototype=Object.create(n.Geometry.prototype),n.ShapeGeometry.prototype.constructor=n.ShapeGeometry,n.ShapeGeometry.prototype.addShapeList=function(e,t){for(var r=0,n=e.length;r<n;r++)this.addShape(e[r],t);return this},n.ShapeGeometry.prototype.addShape=function(e,t){void 0===t&&(t={});var r,i,o,a=void 0!==t.curveSegments?t.curveSegments:12,s=t.material,c=void 0===t.UVGenerator?n.ExtrudeGeometry.WorldUVGenerator:t.UVGenerator,l=this.vertices.length,u=e.extractPoints(a),h=u.shape,p=u.holes,d=!n.ShapeUtils.isClockWise(h);if(d){for(h=h.reverse(),r=0,i=p.length;r<i;r++)o=p[r],n.ShapeUtils.isClockWise(o)&&(p[r]=o.reverse());d=!1}var f=n.ShapeUtils.triangulateShape(h,p);for(r=0,i=p.length;r<i;r++)o=p[r],h=h.concat(o);var m,v,g=h.length,y=f.length;for(r=0;r<g;r++)m=h[r],this.vertices.push(new n.Vector3(m.x,m.y,0));for(r=0;r<y;r++){v=f[r];var x=v[0]+l,b=v[1]+l,w=v[2]+l;this.faces.push(new n.Face3(x,b,w,null,null,s)),this.faceVertexUvs[0].push(c.generateTopUV(this,x,b,w))}},n.LatheBufferGeometry=function(e,t,r,i){n.BufferGeometry.call(this),this.type="LatheBufferGeometry",this.parameters={points:e,segments:t,phiStart:r,phiLength:i},t=Math.floor(t)||12,r=r||0,i=i||2*Math.PI,i=n.Math.clamp(i,0,2*Math.PI);var o,a,s,c=(t+1)*e.length,l=t*e.length*2*3,u=new n.BufferAttribute(new(l>65535?Uint32Array:Uint16Array)(l),1),h=new n.BufferAttribute(new Float32Array(3*c),3),p=new n.BufferAttribute(new Float32Array(2*c),2),d=0,f=0,m=(1/(e.length-1),1/t),v=new n.Vector3,g=new n.Vector2;for(a=0;a<=t;a++){var y=r+a*m*i,x=Math.sin(y),b=Math.cos(y);for(s=0;s<=e.length-1;s++)v.x=e[s].x*x,v.y=e[s].y,v.z=e[s].x*b,h.setXYZ(d,v.x,v.y,v.z),g.x=a/t,g.y=s/(e.length-1),p.setXY(d,g.x,g.y),d++}for(a=0;a<t;a++)for(s=0;s<e.length-1;s++){o=s+a*e.length;var w=o,_=o+e.length,M=o+e.length+1,S=o+1;u.setX(f,w),f++,u.setX(f,_),f++,u.setX(f,S),f++,u.setX(f,_),f++,u.setX(f,M),f++,u.setX(f,S),f++}if(this.setIndex(u),this.addAttribute("position",h),this.addAttribute("uv",p),this.computeVertexNormals(),i===2*Math.PI){var T=this.attributes.normal.array,E=new n.Vector3,A=new n.Vector3,C=new n.Vector3;for(o=t*e.length*3,a=0,s=0;a<e.length;a++,s+=3)E.x=T[s+0],E.y=T[s+1],E.z=T[s+2],A.x=T[o+s+0],A.y=T[o+s+1],A.z=T[o+s+2],C.addVectors(E,A).normalize(),T[s+0]=T[o+s+0]=C.x,T[s+1]=T[o+s+1]=C.y,T[s+2]=T[o+s+2]=C.z}},n.LatheBufferGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.LatheBufferGeometry.prototype.constructor=n.LatheBufferGeometry,n.LatheGeometry=function(e,t,r,i){n.Geometry.call(this),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:r,phiLength:i},this.fromBufferGeometry(new n.LatheBufferGeometry(e,t,r,i)),this.mergeVertices()},n.LatheGeometry.prototype=Object.create(n.Geometry.prototype),n.LatheGeometry.prototype.constructor=n.LatheGeometry,n.PlaneGeometry=function(e,t,r,i){n.Geometry.call(this),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:r,heightSegments:i},this.fromBufferGeometry(new n.PlaneBufferGeometry(e,t,r,i))},n.PlaneGeometry.prototype=Object.create(n.Geometry.prototype),n.PlaneGeometry.prototype.constructor=n.PlaneGeometry,n.PlaneBufferGeometry=function(e,t,r,i){n.BufferGeometry.call(this),this.type="PlaneBufferGeometry",this.parameters={width:e,height:t,widthSegments:r,heightSegments:i};for(var o=e/2,a=t/2,s=Math.floor(r)||1,c=Math.floor(i)||1,l=s+1,u=c+1,h=e/s,p=t/c,d=new Float32Array(l*u*3),f=new Float32Array(l*u*3),m=new Float32Array(l*u*2),v=0,g=0,y=0;y<u;y++)for(var x=y*p-a,b=0;b<l;b++){var w=b*h-o;d[v]=w,d[v+1]=-x,f[v+2]=1,m[g]=b/s,m[g+1]=1-y/c,v+=3,g+=2}v=0;for(var _=new(d.length/3>65535?Uint32Array:Uint16Array)(s*c*6),y=0;y<c;y++)for(var b=0;b<s;b++){var M=b+l*y,S=b+l*(y+1),T=b+1+l*(y+1),E=b+1+l*y;_[v]=M,_[v+1]=S,_[v+2]=E,_[v+3]=S,_[v+4]=T,_[v+5]=E,v+=6}this.setIndex(new n.BufferAttribute(_,1)),this.addAttribute("position",new n.BufferAttribute(d,3)),this.addAttribute("normal",new n.BufferAttribute(f,3)),this.addAttribute("uv",new n.BufferAttribute(m,2))},n.PlaneBufferGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.PlaneBufferGeometry.prototype.constructor=n.PlaneBufferGeometry,n.RingBufferGeometry=function(e,t,r,i,o,a){n.BufferGeometry.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:r,phiSegments:i,thetaStart:o,thetaLength:a},e=e||20,t=t||50,o=void 0!==o?o:0,a=void 0!==a?a:2*Math.PI,r=void 0!==r?Math.max(3,r):8,i=void 0!==i?Math.max(1,i):1;var s,c,l,u=(r+1)*(i+1),h=r*i*2*3,p=new n.BufferAttribute(new(h>65535?Uint32Array:Uint16Array)(h),1),d=new n.BufferAttribute(new Float32Array(3*u),3),f=new n.BufferAttribute(new Float32Array(3*u),3),m=new n.BufferAttribute(new Float32Array(2*u),2),v=0,g=0,y=e,x=(t-e)/i,b=new n.Vector3,w=new n.Vector2;for(c=0;c<=i;c++){for(l=0;l<=r;l++)s=o+l/r*a,b.x=y*Math.cos(s),b.y=y*Math.sin(s),d.setXYZ(v,b.x,b.y,b.z),f.setXYZ(v,0,0,1),w.x=(b.x/t+1)/2,w.y=(b.y/t+1)/2,m.setXY(v,w.x,w.y),v++;y+=x}for(c=0;c<i;c++){var _=c*(r+1);for(l=0;l<r;l++){s=l+_;var M=s,S=s+r+1,T=s+r+2,E=s+1;p.setX(g,M),g++,p.setX(g,S),g++,p.setX(g,T),g++,p.setX(g,M),g++,p.setX(g,T),g++,p.setX(g,E),g++}}this.setIndex(p),this.addAttribute("position",d),this.addAttribute("normal",f),this.addAttribute("uv",m)},n.RingBufferGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.RingBufferGeometry.prototype.constructor=n.RingBufferGeometry,n.RingGeometry=function(e,t,r,i,o,a){n.Geometry.call(this),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:r,phiSegments:i,thetaStart:o,thetaLength:a},this.fromBufferGeometry(new n.RingBufferGeometry(e,t,r,i,o,a))},n.RingGeometry.prototype=Object.create(n.Geometry.prototype),n.RingGeometry.prototype.constructor=n.RingGeometry,n.SphereGeometry=function(e,t,r,i,o,a,s){n.Geometry.call(this),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:r,phiStart:i,phiLength:o,thetaStart:a,thetaLength:s},this.fromBufferGeometry(new n.SphereBufferGeometry(e,t,r,i,o,a,s))},n.SphereGeometry.prototype=Object.create(n.Geometry.prototype),n.SphereGeometry.prototype.constructor=n.SphereGeometry,n.SphereBufferGeometry=function(e,t,r,i,o,a,s){n.BufferGeometry.call(this),this.type="SphereBufferGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:r,phiStart:i,phiLength:o,thetaStart:a,thetaLength:s},e=e||50,t=Math.max(3,Math.floor(t)||8),r=Math.max(2,Math.floor(r)||6),i=void 0!==i?i:0,o=void 0!==o?o:2*Math.PI,a=void 0!==a?a:0,s=void 0!==s?s:Math.PI;for(var c=a+s,l=(t+1)*(r+1),u=new n.BufferAttribute(new Float32Array(3*l),3),h=new n.BufferAttribute(new Float32Array(3*l),3),p=new n.BufferAttribute(new Float32Array(2*l),2),d=0,f=[],m=new n.Vector3,v=0;v<=r;v++){for(var g=[],y=v/r,x=0;x<=t;x++){var b=x/t,w=-e*Math.cos(i+b*o)*Math.sin(a+y*s),_=e*Math.cos(a+y*s),M=e*Math.sin(i+b*o)*Math.sin(a+y*s);m.set(w,_,M).normalize(),u.setXYZ(d,w,_,M),h.setXYZ(d,m.x,m.y,m.z),p.setXY(d,b,1-y),g.push(d),d++}f.push(g)}for(var S=[],v=0;v<r;v++)for(var x=0;x<t;x++){var T=f[v][x+1],E=f[v][x],A=f[v+1][x],C=f[v+1][x+1];(0!==v||a>0)&&S.push(T,E,C),(v!==r-1||c<Math.PI)&&S.push(E,A,C)}this.setIndex(new(u.count>65535?n.Uint32Attribute:n.Uint16Attribute)(S,1)),this.addAttribute("position",u),this.addAttribute("normal",h),this.addAttribute("uv",p),this.boundingSphere=new n.Sphere(new n.Vector3,e)},n.SphereBufferGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.SphereBufferGeometry.prototype.constructor=n.SphereBufferGeometry,n.TextGeometry=function(e,t){t=t||{};var r=t.font;if(r instanceof n.Font==!1)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new n.Geometry;var i=r.generateShapes(e,t.size,t.curveSegments);t.amount=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),n.ExtrudeGeometry.call(this,i,t),this.type="TextGeometry"},n.TextGeometry.prototype=Object.create(n.ExtrudeGeometry.prototype),n.TextGeometry.prototype.constructor=n.TextGeometry,n.TorusBufferGeometry=function(e,t,r,i,o){n.BufferGeometry.call(this),this.type="TorusBufferGeometry",this.parameters={radius:e,tube:t,radialSegments:r,tubularSegments:i,arc:o},e=e||100,t=t||40,r=Math.floor(r)||8,i=Math.floor(i)||6,o=o||2*Math.PI;var a,s,c=(r+1)*(i+1),l=r*i*2*3,u=new(l>65535?Uint32Array:Uint16Array)(l),h=new Float32Array(3*c),p=new Float32Array(3*c),d=new Float32Array(2*c),f=0,m=0,v=0,g=new n.Vector3,y=new n.Vector3,x=new n.Vector3;for(a=0;a<=r;a++)for(s=0;s<=i;s++){var b=s/i*o,w=a/r*Math.PI*2;y.x=(e+t*Math.cos(w))*Math.cos(b),y.y=(e+t*Math.cos(w))*Math.sin(b),y.z=t*Math.sin(w),h[f]=y.x,h[f+1]=y.y,h[f+2]=y.z,g.x=e*Math.cos(b),g.y=e*Math.sin(b),x.subVectors(y,g).normalize(),p[f]=x.x,p[f+1]=x.y,p[f+2]=x.z,d[m]=s/i,d[m+1]=a/r,f+=3,m+=2}for(a=1;a<=r;a++)for(s=1;s<=i;s++){var _=(i+1)*a+s-1,M=(i+1)*(a-1)+s-1,S=(i+1)*(a-1)+s,T=(i+1)*a+s;u[v]=_,u[v+1]=M,u[v+2]=T,u[v+3]=M,u[v+4]=S,u[v+5]=T,v+=6}this.setIndex(new n.BufferAttribute(u,1)),this.addAttribute("position",new n.BufferAttribute(h,3)),this.addAttribute("normal",new n.BufferAttribute(p,3)),this.addAttribute("uv",new n.BufferAttribute(d,2))},n.TorusBufferGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.TorusBufferGeometry.prototype.constructor=n.TorusBufferGeometry,n.TorusGeometry=function(e,t,r,i,o){n.Geometry.call(this),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:r,tubularSegments:i,arc:o},this.fromBufferGeometry(new n.TorusBufferGeometry(e,t,r,i,o))},n.TorusGeometry.prototype=Object.create(n.Geometry.prototype),n.TorusGeometry.prototype.constructor=n.TorusGeometry,n.TorusKnotBufferGeometry=function(e,t,r,i,o,a){function s(e,t,r,n,i){var o=Math.cos(e),a=Math.sin(e),s=r/t*e,c=Math.cos(s);i.x=n*(2+c)*.5*o,i.y=n*(2+c)*a*.5,i.z=n*Math.sin(s)*.5}n.BufferGeometry.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:e,tube:t,tubularSegments:r,radialSegments:i,p:o,q:a},e=e||100,t=t||40,r=Math.floor(r)||64,i=Math.floor(i)||8,o=o||2,a=a||3;var c,l,u=(i+1)*(r+1),h=i*r*2*3,p=new n.BufferAttribute(new(h>65535?Uint32Array:Uint16Array)(h),1),d=new n.BufferAttribute(new Float32Array(3*u),3),f=new n.BufferAttribute(new Float32Array(3*u),3),m=new n.BufferAttribute(new Float32Array(2*u),2),v=0,g=0,y=new n.Vector3,x=new n.Vector3,b=new n.Vector2,w=new n.Vector3,_=new n.Vector3,M=new n.Vector3,S=new n.Vector3,T=new n.Vector3;for(c=0;c<=r;++c){var E=c/r*o*Math.PI*2;for(s(E,o,a,e,w),s(E+.01,o,a,e,_),S.subVectors(_,w),T.addVectors(_,w),M.crossVectors(S,T),T.crossVectors(M,S),M.normalize(),T.normalize(),l=0;l<=i;++l){var A=l/i*Math.PI*2,C=-t*Math.cos(A),L=t*Math.sin(A);y.x=w.x+(C*T.x+L*M.x),y.y=w.y+(C*T.y+L*M.y),y.z=w.z+(C*T.z+L*M.z),d.setXYZ(v,y.x,y.y,y.z),x.subVectors(y,w).normalize(),f.setXYZ(v,x.x,x.y,x.z),b.x=c/r,b.y=l/i,m.setXY(v,b.x,b.y),v++}}for(l=1;l<=r;l++)for(c=1;c<=i;c++){var P=(i+1)*(l-1)+(c-1),R=(i+1)*l+(c-1),D=(i+1)*l+c,I=(i+1)*(l-1)+c;p.setX(g,P),g++,p.setX(g,R),g++,p.setX(g,I),g++,p.setX(g,R),g++,p.setX(g,D),g++,p.setX(g,I),g++}this.setIndex(p),this.addAttribute("position",d),this.addAttribute("normal",f),this.addAttribute("uv",m)},n.TorusKnotBufferGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.TorusKnotBufferGeometry.prototype.constructor=n.TorusKnotBufferGeometry,n.TorusKnotGeometry=function(e,t,r,i,o,a,s){n.Geometry.call(this),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:r,radialSegments:i,p:o,q:a},void 0!==s&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new n.TorusKnotBufferGeometry(e,t,r,i,o,a)),this.mergeVertices()},n.TorusKnotGeometry.prototype=Object.create(n.Geometry.prototype),n.TorusKnotGeometry.prototype.constructor=n.TorusKnotGeometry,n.TubeGeometry=function(e,t,r,i,o,a){function s(e,t,r){return P.vertices.push(new n.Vector3(e,t,r))-1}n.Geometry.call(this),this.type="TubeGeometry",this.parameters={path:e,segments:t,radius:r,radialSegments:i,closed:o,taper:a},t=t||64,r=r||1,i=i||8,o=o||!1,a=a||n.TubeGeometry.NoTaper;var c,l,u,h,p,d,f,m,v,g,y,x,b,w,_,M,S,T,E,A,C,L=[],P=this,R=t+1,D=new n.Vector3,I=new n.TubeGeometry.FrenetFrames(e,t,o),B=I.tangents,O=I.normals,F=I.binormals;for(this.tangents=B,this.normals=O,this.binormals=F,g=0;g<R;g++)for(L[g]=[],h=g/(R-1),v=e.getPointAt(h),c=B[g],l=O[g],u=F[g],d=r*a(h),y=0;y<i;y++)p=y/i*2*Math.PI,f=-d*Math.cos(p),m=d*Math.sin(p),D.copy(v),D.x+=f*l.x+m*u.x,D.y+=f*l.y+m*u.y,D.z+=f*l.z+m*u.z,L[g][y]=s(D.x,D.y,D.z);for(g=0;g<t;g++)for(y=0;y<i;y++)x=o?(g+1)%t:g+1,b=(y+1)%i,w=L[g][y],_=L[x][y],M=L[x][b],S=L[g][b],T=new n.Vector2(g/t,y/i),E=new n.Vector2((g+1)/t,y/i),A=new n.Vector2((g+1)/t,(y+1)/i),C=new n.Vector2(g/t,(y+1)/i),this.faces.push(new n.Face3(w,_,S)),this.faceVertexUvs[0].push([T,E,C]),this.faces.push(new n.Face3(_,M,S)),this.faceVertexUvs[0].push([E.clone(),A,C.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},n.TubeGeometry.prototype=Object.create(n.Geometry.prototype),n.TubeGeometry.prototype.constructor=n.TubeGeometry,n.TubeGeometry.NoTaper=function(e){return 1},n.TubeGeometry.SinusoidalTaper=function(e){return Math.sin(Math.PI*e)},n.TubeGeometry.FrenetFrames=function(e,t,r){function i(){f[0]=new n.Vector3,m[0]=new n.Vector3,a=Number.MAX_VALUE,s=Math.abs(d[0].x),c=Math.abs(d[0].y),l=Math.abs(d[0].z),s<=a&&(a=s,p.set(1,0,0)),c<=a&&(a=c,p.set(0,1,0)),l<=a&&p.set(0,0,1),v.crossVectors(d[0],p).normalize(),f[0].crossVectors(d[0],v),m[0].crossVectors(d[0],f[0])}var o,a,s,c,l,u,h,p=new n.Vector3,d=[],f=[],m=[],v=new n.Vector3,g=new n.Matrix4,y=t+1;for(this.tangents=d,this.normals=f,this.binormals=m,u=0;u<y;u++)h=u/(y-1),d[u]=e.getTangentAt(h),d[u].normalize();for(i(),u=1;u<y;u++)f[u]=f[u-1].clone(),m[u]=m[u-1].clone(),v.crossVectors(d[u-1],d[u]),v.length()>Number.EPSILON&&(v.normalize(),o=Math.acos(n.Math.clamp(d[u-1].dot(d[u]),-1,1)),f[u].applyMatrix4(g.makeRotationAxis(v,o))),m[u].crossVectors(d[u],f[u]);if(r)for(o=Math.acos(n.Math.clamp(f[0].dot(f[y-1]),-1,1)),o/=y-1,d[0].dot(v.crossVectors(f[0],f[y-1]))>0&&(o=-o),u=1;u<y;u++)f[u].applyMatrix4(g.makeRotationAxis(d[u],o*u)),m[u].crossVectors(d[u],f[u])},n.PolyhedronGeometry=function(e,t,r,i){function o(e){var t=e.normalize().clone();t.index=h.vertices.push(t)-1;var r=c(e)/2/Math.PI+.5,i=l(e)/Math.PI+.5;return t.uv=new n.Vector2(r,1-i),t}function a(e,t,r){var i=new n.Face3(e.index,t.index,r.index,[e.clone(),t.clone(),r.clone()]);h.faces.push(i),b.copy(e).add(t).add(r).divideScalar(3);var o=c(b);h.faceVertexUvs[0].push([u(e.uv,e,o),u(t.uv,t,o),u(r.uv,r,o)])}function s(e,t){for(var r=Math.pow(2,t),n=o(h.vertices[e.a]),i=o(h.vertices[e.b]),s=o(h.vertices[e.c]),c=[],l=0;l<=r;l++){c[l]=[];for(var u=o(n.clone().lerp(s,l/r)),p=o(i.clone().lerp(s,l/r)),d=r-l,f=0;f<=d;f++)0===f&&l===r?c[l][f]=u:c[l][f]=o(u.clone().lerp(p,f/d))}for(var l=0;l<r;l++)for(var f=0;f<2*(r-l)-1;f++){var m=Math.floor(f/2);f%2===0?a(c[l][m+1],c[l+1][m],c[l][m]):a(c[l][m+1],c[l+1][m+1],c[l+1][m])}}function c(e){return Math.atan2(e.z,-e.x)}function l(e){return Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))}function u(e,t,r){return r<0&&1===e.x&&(e=new n.Vector2(e.x-1,e.y)),0===t.x&&0===t.z&&(e=new n.Vector2(r/2/Math.PI+.5,e.y)),e.clone()}n.Geometry.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:r,detail:i},r=r||1,i=i||0;for(var h=this,p=0,d=e.length;p<d;p+=3)o(new n.Vector3(e[p],e[p+1],e[p+2]));for(var f=this.vertices,m=[],p=0,v=0,d=t.length;p<d;p+=3,v++){var g=f[t[p]],y=f[t[p+1]],x=f[t[p+2]];m[v]=new n.Face3(g.index,y.index,x.index,[g.clone(),y.clone(),x.clone()])}for(var b=new n.Vector3,p=0,d=m.length;p<d;p++)s(m[p],i);for(var p=0,d=this.faceVertexUvs[0].length;p<d;p++){var w=this.faceVertexUvs[0][p],_=w[0].x,M=w[1].x,S=w[2].x,T=Math.max(_,M,S),E=Math.min(_,M,S);T>.9&&E<.1&&(_<.2&&(w[0].x+=1),M<.2&&(w[1].x+=1),S<.2&&(w[2].x+=1))}for(var p=0,d=this.vertices.length;p<d;p++)this.vertices[p].multiplyScalar(r);this.mergeVertices(),this.computeFaceNormals(),this.boundingSphere=new n.Sphere(new n.Vector3,r)},n.PolyhedronGeometry.prototype=Object.create(n.Geometry.prototype),n.PolyhedronGeometry.prototype.constructor=n.PolyhedronGeometry,n.DodecahedronGeometry=function(e,t){var r=(1+Math.sqrt(5))/2,i=1/r,o=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-r,0,-i,r,0,i,-r,0,i,r,-i,-r,0,-i,r,0,i,-r,0,i,r,0,-r,0,-i,r,0,-i,-r,0,i,r,0,i],a=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];n.PolyhedronGeometry.call(this,o,a,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}},n.DodecahedronGeometry.prototype=Object.create(n.PolyhedronGeometry.prototype),n.DodecahedronGeometry.prototype.constructor=n.DodecahedronGeometry,n.IcosahedronGeometry=function(e,t){var r=(1+Math.sqrt(5))/2,i=[-1,r,0,1,r,0,-1,-r,0,1,-r,0,0,-1,r,0,1,r,0,-1,-r,0,1,-r,r,0,-1,r,0,1,-r,0,-1,-r,0,1],o=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];n.PolyhedronGeometry.call(this,i,o,e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}},n.IcosahedronGeometry.prototype=Object.create(n.PolyhedronGeometry.prototype),n.IcosahedronGeometry.prototype.constructor=n.IcosahedronGeometry,n.OctahedronGeometry=function(e,t){var r=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],i=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];n.PolyhedronGeometry.call(this,r,i,e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}},n.OctahedronGeometry.prototype=Object.create(n.PolyhedronGeometry.prototype),n.OctahedronGeometry.prototype.constructor=n.OctahedronGeometry,n.TetrahedronGeometry=function(e,t){var r=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],i=[2,1,0,0,3,2,1,3,0,2,3,1];n.PolyhedronGeometry.call(this,r,i,e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}},n.TetrahedronGeometry.prototype=Object.create(n.PolyhedronGeometry.prototype),n.TetrahedronGeometry.prototype.constructor=n.TetrahedronGeometry,n.ParametricGeometry=function(e,t,r){n.Geometry.call(this),this.type="ParametricGeometry",this.parameters={func:e,slices:t,stacks:r};var i,o,a,s,c,l=this.vertices,u=this.faces,h=this.faceVertexUvs[0],p=t+1;for(i=0;i<=r;i++)for(c=i/r,o=0;o<=t;o++)s=o/t,a=e(s,c),l.push(a);var d,f,m,v,g,y,x,b;for(i=0;i<r;i++)for(o=0;o<t;o++)d=i*p+o,f=i*p+o+1,m=(i+1)*p+o+1,v=(i+1)*p+o,g=new n.Vector2(o/t,i/r),y=new n.Vector2((o+1)/t,i/r),x=new n.Vector2((o+1)/t,(i+1)/r),b=new n.Vector2(o/t,(i+1)/r),u.push(new n.Face3(d,f,v)),h.push([g,y,b]),u.push(new n.Face3(f,m,v)),h.push([y.clone(),x,b.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},n.ParametricGeometry.prototype=Object.create(n.Geometry.prototype),n.ParametricGeometry.prototype.constructor=n.ParametricGeometry,n.WireframeGeometry=function(e){function t(e,t){return e-t}n.BufferGeometry.call(this);var r=[0,0],i={},o=["a","b","c"];if(e instanceof n.Geometry){for(var a=e.vertices,s=e.faces,c=0,l=new Uint32Array(6*s.length),u=0,h=s.length;u<h;u++)for(var p=s[u],d=0;d<3;d++){r[0]=p[o[d]],r[1]=p[o[(d+1)%3]],r.sort(t);var f=r.toString();void 0===i[f]&&(l[2*c]=r[0],l[2*c+1]=r[1],i[f]=!0,c++)}for(var m=new Float32Array(2*c*3),u=0,h=c;u<h;u++)for(var d=0;d<2;d++){var v=a[l[2*u+d]],g=6*u+3*d;m[g+0]=v.x,m[g+1]=v.y,m[g+2]=v.z}this.addAttribute("position",new n.BufferAttribute(m,3))}else if(e instanceof n.BufferGeometry)if(null!==e.index){var y=e.index.array,a=e.attributes.position,x=e.groups,c=0;0===x.length&&e.addGroup(0,y.length);for(var l=new Uint32Array(2*y.length),b=0,w=x.length;b<w;++b)for(var _=x[b],M=_.start,S=_.count,u=M,T=M+S;u<T;u+=3)for(var d=0;d<3;d++){r[0]=y[u+d],r[1]=y[u+(d+1)%3],r.sort(t);var f=r.toString();void 0===i[f]&&(l[2*c]=r[0],l[2*c+1]=r[1],i[f]=!0,c++)}for(var m=new Float32Array(2*c*3),u=0,h=c;u<h;u++)for(var d=0;d<2;d++){var g=6*u+3*d,E=l[2*u+d];m[g+0]=a.getX(E),m[g+1]=a.getY(E),m[g+2]=a.getZ(E)}this.addAttribute("position",new n.BufferAttribute(m,3))}else{for(var a=e.attributes.position.array,c=a.length/3,A=c/3,m=new Float32Array(2*c*3),u=0,h=A;u<h;u++)for(var d=0;d<3;d++){var g=18*u+6*d,C=9*u+3*d;m[g+0]=a[C],m[g+1]=a[C+1],m[g+2]=a[C+2];var E=9*u+3*((d+1)%3);m[g+3]=a[E],m[g+4]=a[E+1],m[g+5]=a[E+2]}this.addAttribute("position",new n.BufferAttribute(m,3))}},n.WireframeGeometry.prototype=Object.create(n.BufferGeometry.prototype),n.WireframeGeometry.prototype.constructor=n.WireframeGeometry,n.AxisHelper=function(e){e=e||1;var t=new Float32Array([0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e]),r=new Float32Array([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1]),i=new n.BufferGeometry;i.addAttribute("position",new n.BufferAttribute(t,3)),i.addAttribute("color",new n.BufferAttribute(r,3));var o=new n.LineBasicMaterial({vertexColors:n.VertexColors});n.LineSegments.call(this,i,o)},n.AxisHelper.prototype=Object.create(n.LineSegments.prototype),n.AxisHelper.prototype.constructor=n.AxisHelper,n.ArrowHelper=function(){var e=new n.BufferGeometry;e.addAttribute("position",new n.Float32Attribute([0,0,0,0,1,0],3));var t=new n.CylinderBufferGeometry(0,.5,1,5,1);return t.translate(0,-.5,0),function(r,i,o,a,s,c){n.Object3D.call(this),void 0===a&&(a=16776960),void 0===o&&(o=1),void 0===s&&(s=.2*o),void 0===c&&(c=.2*s),this.position.copy(i),this.line=new n.Line(e,new n.LineBasicMaterial({color:a})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new n.Mesh(t,new n.MeshBasicMaterial({color:a})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(r),this.setLength(o,s,c)}}(),n.ArrowHelper.prototype=Object.create(n.Object3D.prototype),n.ArrowHelper.prototype.constructor=n.ArrowHelper,n.ArrowHelper.prototype.setDirection=function(){var e,t=new n.Vector3;return function(r){r.y>.99999?this.quaternion.set(0,0,0,1):r.y<-.99999?this.quaternion.set(1,0,0,0):(t.set(r.z,0,-r.x).normalize(),e=Math.acos(r.y),this.quaternion.setFromAxisAngle(t,e))}}(),n.ArrowHelper.prototype.setLength=function(e,t,r){void 0===t&&(t=.2*e),void 0===r&&(r=.2*t),this.line.scale.set(1,Math.max(0,e-t),1),this.line.updateMatrix(),this.cone.scale.set(r,t,r),this.cone.position.y=e,this.cone.updateMatrix()},n.ArrowHelper.prototype.setColor=function(e){this.line.material.color.copy(e),this.cone.material.color.copy(e)},n.BoxHelper=function(e,t){void 0===t&&(t=16776960);var r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(24),o=new n.BufferGeometry;o.setIndex(new n.BufferAttribute(r,1)),o.addAttribute("position",new n.BufferAttribute(i,3)),n.LineSegments.call(this,o,new n.LineBasicMaterial({color:t})),void 0!==e&&this.update(e)},n.BoxHelper.prototype=Object.create(n.LineSegments.prototype),n.BoxHelper.prototype.constructor=n.BoxHelper,n.BoxHelper.prototype.update=function(){var e=new n.Box3;return function(t){if(t instanceof n.Box3?e.copy(t):e.setFromObject(t),!e.isEmpty()){var r=e.min,i=e.max,o=this.geometry.attributes.position,a=o.array;a[0]=i.x,a[1]=i.y,a[2]=i.z,a[3]=r.x,a[4]=i.y,a[5]=i.z,a[6]=r.x,a[7]=r.y,a[8]=i.z,a[9]=i.x,a[10]=r.y,a[11]=i.z,a[12]=i.x,a[13]=i.y,a[14]=r.z,a[15]=r.x,a[16]=i.y,a[17]=r.z,a[18]=r.x,a[19]=r.y,a[20]=r.z,a[21]=i.x,a[22]=r.y,a[23]=r.z,o.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),n.BoundingBoxHelper=function(e,t){var r=void 0!==t?t:8947848;this.object=e,this.box=new n.Box3,n.Mesh.call(this,new n.BoxGeometry(1,1,1),new n.MeshBasicMaterial({color:r,wireframe:!0}))},n.BoundingBoxHelper.prototype=Object.create(n.Mesh.prototype),n.BoundingBoxHelper.prototype.constructor=n.BoundingBoxHelper,n.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object),this.box.size(this.scale),this.box.center(this.position)},n.CameraHelper=function(e){function t(e,t,n){r(e,n),r(t,n)}function r(e,t){i.vertices.push(new n.Vector3),i.colors.push(new n.Color(t)),void 0===a[e]&&(a[e]=[]),a[e].push(i.vertices.length-1)}var i=new n.Geometry,o=new n.LineBasicMaterial({color:16777215,vertexColors:n.FaceColors}),a={},s=16755200,c=16711680,l=43775,u=16777215,h=3355443;t("n1","n2",s),t("n2","n4",s),t("n4","n3",s),t("n3","n1",s),t("f1","f2",s),t("f2","f4",s),t("f4","f3",s),t("f3","f1",s),t("n1","f1",s),t("n2","f2",s),t("n3","f3",s),t("n4","f4",s),t("p","n1",c),t("p","n2",c),t("p","n3",c),t("p","n4",c),t("u1","u2",l),t("u2","u3",l),t("u3","u1",l),t("c","t",u),t("p","c",h),t("cn1","cn2",h),t("cn3","cn4",h),t("cf1","cf2",h),t("cf3","cf4",h),n.LineSegments.call(this,i,o),this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()},n.CameraHelper.prototype=Object.create(n.LineSegments.prototype),n.CameraHelper.prototype.constructor=n.CameraHelper,n.CameraHelper.prototype.update=function(){function e(e,n,a,s){i.set(n,a,s).unproject(o);var c=r[e];if(void 0!==c)for(var l=0,u=c.length;l<u;l++)t.vertices[c[l]].copy(i)}var t,r,i=new n.Vector3,o=new n.Camera;return function(){t=this.geometry,r=this.pointMap;var n=1,i=1;o.projectionMatrix.copy(this.camera.projectionMatrix),e("c",0,0,-1),e("t",0,0,1),e("n1",-n,-i,-1),e("n2",n,-i,-1),e("n3",-n,i,-1),e("n4",n,i,-1),e("f1",-n,-i,1),e("f2",n,-i,1),e("f3",-n,i,1),e("f4",n,i,1),e("u1",.7*n,1.1*i,-1),e("u2",.7*-n,1.1*i,-1),e("u3",0,2*i,-1),e("cf1",-n,0,1),e("cf2",n,0,1),e("cf3",0,-i,1),e("cf4",0,i,1),e("cn1",-n,0,-1),e("cn2",n,0,-1),e("cn3",0,-i,-1),e("cn4",0,i,-1),t.verticesNeedUpdate=!0}}(),n.DirectionalLightHelper=function(e,t){n.Object3D.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,void 0===t&&(t=1);var r=new n.BufferGeometry;r.addAttribute("position",new n.Float32Attribute([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));var i=new n.LineBasicMaterial({fog:!1});this.add(new n.Line(r,i)),
r=new n.BufferGeometry,r.addAttribute("position",new n.Float32Attribute([0,0,0,0,0,1],3)),this.add(new n.Line(r,i)),this.update()},n.DirectionalLightHelper.prototype=Object.create(n.Object3D.prototype),n.DirectionalLightHelper.prototype.constructor=n.DirectionalLightHelper,n.DirectionalLightHelper.prototype.dispose=function(){var e=this.children[0],t=this.children[1];e.geometry.dispose(),e.material.dispose(),t.geometry.dispose(),t.material.dispose()},n.DirectionalLightHelper.prototype.update=function(){var e=new n.Vector3,t=new n.Vector3,r=new n.Vector3;return function(){e.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),r.subVectors(t,e);var n=this.children[0],i=this.children[1];n.lookAt(r),n.material.color.copy(this.light.color).multiplyScalar(this.light.intensity),i.lookAt(r),i.scale.z=r.length()}}(),n.EdgesHelper=function(e,t,r){var i=void 0!==t?t:16777215;n.LineSegments.call(this,new n.EdgesGeometry(e.geometry,r),new n.LineBasicMaterial({color:i})),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1},n.EdgesHelper.prototype=Object.create(n.LineSegments.prototype),n.EdgesHelper.prototype.constructor=n.EdgesHelper,n.FaceNormalsHelper=function(e,t,r,i){this.object=e,this.size=void 0!==t?t:1;var o=void 0!==r?r:16776960,a=void 0!==i?i:1,s=0,c=this.object.geometry;c instanceof n.Geometry?s=c.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var l=new n.BufferGeometry,u=new n.Float32Attribute(2*s*3,3);l.addAttribute("position",u),n.LineSegments.call(this,l,new n.LineBasicMaterial({color:o,linewidth:a})),this.matrixAutoUpdate=!1,this.update()},n.FaceNormalsHelper.prototype=Object.create(n.LineSegments.prototype),n.FaceNormalsHelper.prototype.constructor=n.FaceNormalsHelper,n.FaceNormalsHelper.prototype.update=function(){var e=new n.Vector3,t=new n.Vector3,r=new n.Matrix3;return function(){this.object.updateMatrixWorld(!0),r.getNormalMatrix(this.object.matrixWorld);for(var n=this.object.matrixWorld,i=this.geometry.attributes.position,o=this.object.geometry,a=o.vertices,s=o.faces,c=0,l=0,u=s.length;l<u;l++){var h=s[l],p=h.normal;e.copy(a[h.a]).add(a[h.b]).add(a[h.c]).divideScalar(3).applyMatrix4(n),t.copy(p).applyMatrix3(r).normalize().multiplyScalar(this.size).add(e),i.setXYZ(c,e.x,e.y,e.z),c+=1,i.setXYZ(c,t.x,t.y,t.z),c+=1}return i.needsUpdate=!0,this}}(),n.GridHelper=function(e,t,r,i){t=t||1,r=new n.Color(void 0!==r?r:4473924),i=new n.Color(void 0!==i?i:8947848);for(var o=t/2,a=2*e/t,s=[],c=[],l=0,u=0,h=-e;l<=t;l++,h+=a){s.push(-e,0,h,e,0,h),s.push(h,0,-e,h,0,e);var p=l===o?r:i;p.toArray(c,u),u+=3,p.toArray(c,u),u+=3,p.toArray(c,u),u+=3,p.toArray(c,u),u+=3}var d=new n.BufferGeometry;d.addAttribute("position",new n.Float32Attribute(s,3)),d.addAttribute("color",new n.Float32Attribute(c,3));var f=new n.LineBasicMaterial({vertexColors:n.VertexColors});n.LineSegments.call(this,d,f)},n.GridHelper.prototype=Object.create(n.LineSegments.prototype),n.GridHelper.prototype.constructor=n.GridHelper,n.GridHelper.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},n.HemisphereLightHelper=function(e,t){n.Object3D.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.colors=[new n.Color,new n.Color];var r=new n.SphereGeometry(t,4,2);r.rotateX(-Math.PI/2);for(var i=0,o=8;i<o;i++)r.faces[i].color=this.colors[i<4?0:1];var a=new n.MeshBasicMaterial({vertexColors:n.FaceColors,wireframe:!0});this.lightSphere=new n.Mesh(r,a),this.add(this.lightSphere),this.update()},n.HemisphereLightHelper.prototype=Object.create(n.Object3D.prototype),n.HemisphereLightHelper.prototype.constructor=n.HemisphereLightHelper,n.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose(),this.lightSphere.material.dispose()},n.HemisphereLightHelper.prototype.update=function(){var e=new n.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity),this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity),this.lightSphere.lookAt(e.setFromMatrixPosition(this.light.matrixWorld).negate()),this.lightSphere.geometry.colorsNeedUpdate=!0}}(),n.PointLightHelper=function(e,t){this.light=e,this.light.updateMatrixWorld();var r=new n.SphereBufferGeometry(t,4,2),i=new n.MeshBasicMaterial({wireframe:!0,fog:!1});i.color.copy(this.light.color).multiplyScalar(this.light.intensity),n.Mesh.call(this,r,i),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1},n.PointLightHelper.prototype=Object.create(n.Mesh.prototype),n.PointLightHelper.prototype.constructor=n.PointLightHelper,n.PointLightHelper.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},n.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)},n.SkeletonHelper=function(e){this.bones=this.getBoneList(e);for(var t=new n.Geometry,r=0;r<this.bones.length;r++){var i=this.bones[r];i.parent instanceof n.Bone&&(t.vertices.push(new n.Vector3),t.vertices.push(new n.Vector3),t.colors.push(new n.Color(0,0,1)),t.colors.push(new n.Color(0,1,0)))}t.dynamic=!0;var o=new n.LineBasicMaterial({vertexColors:n.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0});n.LineSegments.call(this,t,o),this.root=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.update()},n.SkeletonHelper.prototype=Object.create(n.LineSegments.prototype),n.SkeletonHelper.prototype.constructor=n.SkeletonHelper,n.SkeletonHelper.prototype.getBoneList=function(e){var t=[];e instanceof n.Bone&&t.push(e);for(var r=0;r<e.children.length;r++)t.push.apply(t,this.getBoneList(e.children[r]));return t},n.SkeletonHelper.prototype.update=function(){for(var e=this.geometry,t=(new n.Matrix4).getInverse(this.root.matrixWorld),r=new n.Matrix4,i=0,o=0;o<this.bones.length;o++){var a=this.bones[o];a.parent instanceof n.Bone&&(r.multiplyMatrices(t,a.matrixWorld),e.vertices[i].setFromMatrixPosition(r),r.multiplyMatrices(t,a.parent.matrixWorld),e.vertices[i+1].setFromMatrixPosition(r),i+=2)}e.verticesNeedUpdate=!0,e.computeBoundingSphere()},n.SpotLightHelper=function(e){n.Object3D.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1;for(var t=new n.BufferGeometry,r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],i=0,o=1,a=32;i<a;i++,o++){var s=i/a*Math.PI*2,c=o/a*Math.PI*2;r.push(Math.cos(s),Math.sin(s),1,Math.cos(c),Math.sin(c),1)}t.addAttribute("position",new n.Float32Attribute(r,3));var l=new n.LineBasicMaterial({fog:!1});this.cone=new n.LineSegments(t,l),this.add(this.cone),this.update()},n.SpotLightHelper.prototype=Object.create(n.Object3D.prototype),n.SpotLightHelper.prototype.constructor=n.SpotLightHelper,n.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},n.SpotLightHelper.prototype.update=function(){var e=new n.Vector3,t=new n.Vector3;return function(){var r=this.light.distance?this.light.distance:1e3,n=r*Math.tan(this.light.angle);this.cone.scale.set(n,n,r),e.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(t.sub(e)),this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}(),n.VertexNormalsHelper=function(e,t,r,i){this.object=e,this.size=void 0!==t?t:1;var o=void 0!==r?r:16711680,a=void 0!==i?i:1,s=0,c=this.object.geometry;c instanceof n.Geometry?s=3*c.faces.length:c instanceof n.BufferGeometry&&(s=c.attributes.normal.count);var l=new n.BufferGeometry,u=new n.Float32Attribute(2*s*3,3);l.addAttribute("position",u),n.LineSegments.call(this,l,new n.LineBasicMaterial({color:o,linewidth:a})),this.matrixAutoUpdate=!1,this.update()},n.VertexNormalsHelper.prototype=Object.create(n.LineSegments.prototype),n.VertexNormalsHelper.prototype.constructor=n.VertexNormalsHelper,n.VertexNormalsHelper.prototype.update=function(){var e=new n.Vector3,t=new n.Vector3,r=new n.Matrix3;return function(){var i=["a","b","c"];this.object.updateMatrixWorld(!0),r.getNormalMatrix(this.object.matrixWorld);var o=this.object.matrixWorld,a=this.geometry.attributes.position,s=this.object.geometry;if(s instanceof n.Geometry)for(var c=s.vertices,l=s.faces,u=0,h=0,p=l.length;h<p;h++)for(var d=l[h],f=0,m=d.vertexNormals.length;f<m;f++){var v=c[d[i[f]]],g=d.vertexNormals[f];e.copy(v).applyMatrix4(o),t.copy(g).applyMatrix3(r).normalize().multiplyScalar(this.size).add(e),a.setXYZ(u,e.x,e.y,e.z),u+=1,a.setXYZ(u,t.x,t.y,t.z),u+=1}else if(s instanceof n.BufferGeometry)for(var y=s.attributes.position,x=s.attributes.normal,u=0,f=0,m=y.count;f<m;f++)e.set(y.getX(f),y.getY(f),y.getZ(f)).applyMatrix4(o),t.set(x.getX(f),x.getY(f),x.getZ(f)),t.applyMatrix3(r).normalize().multiplyScalar(this.size).add(e),a.setXYZ(u,e.x,e.y,e.z),u+=1,a.setXYZ(u,t.x,t.y,t.z),u+=1;return a.needsUpdate=!0,this}}(),n.WireframeHelper=function(e,t){var r=void 0!==t?t:16777215;n.LineSegments.call(this,new n.WireframeGeometry(e.geometry),new n.LineBasicMaterial({color:r})),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1},n.WireframeHelper.prototype=Object.create(n.LineSegments.prototype),n.WireframeHelper.prototype.constructor=n.WireframeHelper,n.ImmediateRenderObject=function(e){n.Object3D.call(this),this.material=e,this.render=function(e){}},n.ImmediateRenderObject.prototype=Object.create(n.Object3D.prototype),n.ImmediateRenderObject.prototype.constructor=n.ImmediateRenderObject,n.MorphBlendMesh=function(e,t){n.Mesh.call(this,e,t),this.animationsMap={},this.animationsList=[];var r=this.geometry.morphTargets.length,i="__default",o=0,a=r-1,s=r/1;this.createAnimation(i,o,a,s),this.setAnimationWeight(i,1)},n.MorphBlendMesh.prototype=Object.create(n.Mesh.prototype),n.MorphBlendMesh.prototype.constructor=n.MorphBlendMesh,n.MorphBlendMesh.prototype.createAnimation=function(e,t,r,n){var i={start:t,end:r,length:r-t+1,fps:n,duration:(r-t)/n,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[e]=i,this.animationsList.push(i)},n.MorphBlendMesh.prototype.autoCreateAnimations=function(e){for(var t,r=/([a-z]+)_?(\d+)/i,n={},i=this.geometry,o=0,a=i.morphTargets.length;o<a;o++){var s=i.morphTargets[o],c=s.name.match(r);if(c&&c.length>1){var l=c[1];n[l]||(n[l]={start:1/0,end:-(1/0)});var u=n[l];o<u.start&&(u.start=o),o>u.end&&(u.end=o),t||(t=l)}}for(var l in n){var u=n[l];this.createAnimation(l,u.start,u.end,e)}this.firstAnimation=t},n.MorphBlendMesh.prototype.setAnimationDirectionForward=function(e){var t=this.animationsMap[e];t&&(t.direction=1,t.directionBackwards=!1)},n.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(e){var t=this.animationsMap[e];t&&(t.direction=-1,t.directionBackwards=!0)},n.MorphBlendMesh.prototype.setAnimationFPS=function(e,t){var r=this.animationsMap[e];r&&(r.fps=t,r.duration=(r.end-r.start)/r.fps)},n.MorphBlendMesh.prototype.setAnimationDuration=function(e,t){var r=this.animationsMap[e];r&&(r.duration=t,r.fps=(r.end-r.start)/r.duration)},n.MorphBlendMesh.prototype.setAnimationWeight=function(e,t){var r=this.animationsMap[e];r&&(r.weight=t)},n.MorphBlendMesh.prototype.setAnimationTime=function(e,t){var r=this.animationsMap[e];r&&(r.time=t)},n.MorphBlendMesh.prototype.getAnimationTime=function(e){var t=0,r=this.animationsMap[e];return r&&(t=r.time),t},n.MorphBlendMesh.prototype.getAnimationDuration=function(e){var t=-1,r=this.animationsMap[e];return r&&(t=r.duration),t},n.MorphBlendMesh.prototype.playAnimation=function(e){var t=this.animationsMap[e];t?(t.time=0,t.active=!0):console.warn("THREE.MorphBlendMesh: animation["+e+"] undefined in .playAnimation()")},n.MorphBlendMesh.prototype.stopAnimation=function(e){var t=this.animationsMap[e];t&&(t.active=!1)},n.MorphBlendMesh.prototype.update=function(e){for(var t=0,r=this.animationsList.length;t<r;t++){var i=this.animationsList[t];if(i.active){var o=i.duration/i.length;i.time+=i.direction*e,i.mirroredLoop?(i.time>i.duration||i.time<0)&&(i.direction*=-1,i.time>i.duration&&(i.time=i.duration,i.directionBackwards=!0),i.time<0&&(i.time=0,i.directionBackwards=!1)):(i.time=i.time%i.duration,i.time<0&&(i.time+=i.duration));var a=i.start+n.Math.clamp(Math.floor(i.time/o),0,i.length-1),s=i.weight;a!==i.currentFrame&&(this.morphTargetInfluences[i.lastFrame]=0,this.morphTargetInfluences[i.currentFrame]=1*s,this.morphTargetInfluences[a]=0,i.lastFrame=i.currentFrame,i.currentFrame=a);var c=i.time%o/o;i.directionBackwards&&(c=1-c),i.currentFrame!==i.lastFrame?(this.morphTargetInfluences[i.currentFrame]=c*s,this.morphTargetInfluences[i.lastFrame]=(1-c)*s):this.morphTargetInfluences[i.currentFrame]=s}}}},{}],3:[function(e,t,r){var n,i,o,a=e("jquery"),s=(e("three"),e("./globals").getGlobals()),c=function(){function e(){var e,t=n.width(),r=n.height(),i=a(window).width(),c=a(window).height();i>c?(e=i/t,r*e>c&&(e=c/r)):(e=c/r,t*e>i&&(e=i/t));var l=a("#sidebar").width(),u=i-l;a("#canvas").css("left",l+.15*u+"px"),a("#canvas").css("width",t*e*o+"px"),a("#canvas").css("height",r*e*o+"px"),s.camera.aspect=t*e/(r*e),s.camera.updateProjectionMatrix(),s.renderer.setSize(t*e*o,r*e*o),s.renderer.render(s.scene,s.camera)}n=a("#canvas"),i=null,o=.9,e(),a(window).resize(function(){clearTimeout(e),setTimeout(e,100)}),a(".scramble").on("click",function(){eventHandler.scramble()}),a(".solve.enabled").on("click",function(){eventHandler.solve()}),a(".display-solve-moves.enabled").on("click",function(){eventHandler.displaySolveMoves()}),3===s.cubeDimensions&&(a(".sample").css("display","block"),a(".sample").on("click",function(){eventHandler.solve(),eventHandler.sampleSolve()})),setInterval(function(){for(var e=["red","yellow","blue","green","orange","purple"],t=~~(Math.random()*e.length);e[t]===a(".title").css("color");)t=~~(Math.random()*e.length);a(".title").css("color",e[t])},5e3)};t.exports=c},{"./globals":6,jquery:1,three:2}],4:[function(e,t,r){var n=e("jquery"),i=e("three"),o=e("./globals").getGlobals(),a=function(e){this.cube=e,this._eventLoop=[],this.scrambleMoves=[],this.scrambled=!1,this._timing=!1,this._sampling=!1,n(window).on("keyup",this.handleEvents.bind(this)),n("#canvas").on("mousedown",this.click.bind(this)),this.interval=setInterval(this.triggerEvent.bind(this),10),this.keyCodeMap={32:"space",65:"a",67:"c",68:"d",69:"e",70:"f",71:"g",72:"h",73:"i",74:"j",75:"k",76:"l",77:"m",78:"n",79:"o",80:"p",81:"q",82:"r",83:"s",84:"t",85:"u",86:"v",87:"w",89:"y",90:"z",186:";",191:"/"}};a.prototype.click=function(e){if(!this.cube.animating){for(var t,r=this._getIntersects(e),o=0;o<r.length;o++)if("cubie"===r[o].object.name){t=r[o];break}if(!t){var a=function(t){this._rotateCube(e,t)};return void n("#canvas").one("mouseup",a.bind(this))}var s=new i.Matrix4;s=s.extractRotation(t.object.matrixWorld),s=s.multiplyVector3(t.face.normal.clone());var c;1===s.x?c="x":1===s.y?c="y":1===s.z&&(c="z");var a=function(r){this._mouseUp(t.object,c,e,r)};n("#canvas").one("mouseup",a.bind(this))}},a.prototype.detectTimerStart=function(e){this.scrambled&&!this.timing&&"click"===e&&this.startTimer();var t=this.cube.keyToMoveMap[e];t&&(["left","right","up","down"].indexOf(t)>-1||this.scrambled&&!this.timing&&this.startTimer())},a.prototype.displayElapsedTime=function(){this.startTime=this.startTime||new Date;var e=Math.round(parseInt(new Date-this.startTime)/10)/100;n(".timer").text(e.toFixed(2))},a.prototype.displaySolveMoves=function(){clearTimeout(this.repeatSolveMoveId),this._showNextMove()},a.prototype.handleEvents=function(e){var t=this.keyCodeMap[e.keyCode];switch(this.detectTimerStart(t),t){case"space":return void(this.cube.isSolved?this.scramble():this.solve());case void 0:return}var r=this.cube.keyToMoveMap[t];this._eventLoop.push(function(){this.cube.move(r)}.bind(this))},a.prototype.sampleSolve=function(){if(!this._sampling){this._sampling=!0,clearTimeout(this.repeatSolveMoveId);for(var e="iqssdllklffesshqsfpgldsdpjllhh",t=" ;; yy; ;; a ; dkgjijdjyy ; ; fijiifi ; ;; jejdijk;ijjkfdjjeajefd hejjdjjdhheh f kfi;ii;skjifilhh",r=0;r<e.length;r++)this._eventLoop.push(this.cube.move.bind(this.cube,this.cube.keyToMoveMap[e[r]]));for(var r=0;r<t.length;r++)" "===t[r]?this._eventLoop.push(this._sleep.bind(this,400)):this._eventLoop.push(this.cube.move.bind(this.cube,this.cube.keyToMoveMap[t[r]]));this._eventLoop.push(function(){this._sampling=!1}.bind(this))}},a.prototype.scramble=function(){this.scrambled=!0,n(".timer").text("0.00").css("color","white");for(var e=0;e<scrambleLength;e++)this._eventLoop.push(function(){var e=this.cube.randomMove();this.cube.move(e)}.bind(this))},a.prototype.solve=function(){if(!this.cube.animating){for(;this.cube.movesMade.length>0;){var e=this.cube.movesMade.pop();e.rotationDir*=-1,this._eventLoop.push(this.cube.move.bind(this.cube,e))}this.scrambled=!1}},a.prototype.startTimer=function(){n(".timer").css("color","red"),this.timeId=setInterval(this.displayElapsedTime.bind(this),.06),this.scrambled=!1,this._timing=!0},a.prototype.stopTimer=function(){clearInterval(this.timeId),this._timing=!1;var e=Math.round(parseInt(new Date-this.startTime)/10)/100;n(".timer").text(e).css("color","green")},a.prototype.triggerEvent=function(){this.cube.isSolved&&this._timing&&(this.stopTimer(),this._eventLoop=[],this.startTime=void 0),!this.cube.animating&&this._eventLoop.length>0&&this._eventLoop.shift()(),this.cube.isSolved?(clearInterval(this.repeatSolveMoveId),n(".solve").removeClass("enabled").addClass("disabled"),n(".display-solve-moves").removeClass("enabled").addClass("disabled")):(n(".solve").removeClass("disabled").addClass("enabled"),n(".display-solve-moves").removeClass("disabled").addClass("enabled"))},a.prototype._animateSolveMove=function(e,t,r){var n=requestAnimationFrame(function(){this._animateSolveMove(e,t,r),o.renderer.render(o.scene,o.camera)}.bind(this));e.material.opacity+=.02,e.material.opacity>=.2&&!this.rotating&&this._rotateSolveMove(e,t,r),e.material.opacity>=.8&&cancelAnimationFrame(n)},a.prototype._createSolveGlow=function(e){var t=new i.MeshBasicMaterial({color:16776960}),r=new i.Vector3(o.cubieSize*o.cubeDimensions,o.cubieSize*o.cubeDimensions,o.cubieSize*o.cubeDimensions);r[e.rotationAxis]=o.cubieSize,e.cubesToRotate.length===o.allCubes.length&&(r[e.rotationAxis]=o.cubieSize*o.cubeDimensions);var n=new i.BoxGeometry(r.x,r.y,r.z),a=new i.Mesh(n,t),s=new i.Vector3(0,0,0),c=~~(e.cubesToRotate.length/2),l=e.cubesToRotate[c].position;return s[e.rotationAxis]=l[e.rotationAxis],a.position.copy(s),e.cubesToRotate.length===o.allCubes.length&&a.position.copy(new i.Vector3),a.scale.multiplyScalar(1.1),a.material.transparent=!0,a.material.opacity=0,a},a.prototype._fadeOutSolveMove=function(e,t){var r=requestAnimationFrame(function(){this._fadeOutSolveMove(e),o.renderer.render(o.scene,o.camera)}.bind(this));e.material.opacity-=.04,e.material.opacity<=0&&(cancelAnimationFrame(r),o.scene.remove(e))},a.prototype._getIntersects=function(e){var t=o.renderer.domElement.getBoundingClientRect(),r=e.clientX-t.left,n=e.clientY-t.top,a=new i.Vector2;a.x=r/o.renderer.domElement.clientWidth*2-1,a.y=2*-(n/o.renderer.domElement.clientHeight)+1;var s=new i.Raycaster;return s.setFromCamera(a,o.camera),s.intersectObjects(o.scene.children)},a.prototype._mouseUp=function(e,t,r,n){var o=["x","z","y"];o.splice(o.indexOf(t),1);var a=e.position.clone();a[t]=window.cubeStartPos;var s,c,l=new i.Vector3,u={axis:t,mag:-1},h=1;if(n.clientX>r.clientX+40||n.clientX<r.clientX-40)a[o[0]]=window.cubeStartPos+200,l[o[0]]=-1,c=o[1],n.clientX<r.clientX-40&&(h*=-1),"y"===t&&(h*=-1);else{if(!(n.clientY>r.clientY+40||n.clientY<r.clientY-40))return;a[o[1]]=window.cubeStartPos+200,l[o[1]]=-1,c=o[0],n.clientY<r.clientY-40&&(h*=-1),"x"===t&&(h*=-1)}var s=this.cube.captureCubes(a,l,u);moveDetails={cubesToRotate:s,rotationAxis:c,rotationDir:h},this._eventLoop.push(function(){this.cube.move(moveDetails)}.bind(this)),this.detectTimerStart("click")},a.prototype._rotateCube=function(e,t){t.clientX<e.clientX-40&&(this._eventLoop.push(this.cube.move.bind(this.cube,"right")),this.scrambleMoves.push("left")),t.clientX>e.clientX+40&&(this._eventLoop.push(this.cube.move.bind(this.cube,"left")),this.scrambleMoves.push("right")),t.clientY>e.clientY+40&&(this._eventLoop.push(this.cube.move.bind(this.cube,"up")),this.scrambleMoves.push("down")),t.clientY<e.clientY-40&&(this._eventLoop.push(this.cube.move.bind(this.cube,"down")),this.scrambleMoves.push("up"))},a.prototype._rotateSolveMove=function(e,t,r){this.rotating=!0;var n=requestAnimationFrame(function(){this._rotateSolveMove(e,t,r),o.renderer.render(o.scene,o.camera)}.bind(this));e.rotation[t]+=r*(Math.PI/2)/32,(e.rotation[t]>=Math.PI/2||e.rotation[t]<=-Math.PI/2)&&(cancelAnimationFrame(n),this.rotating=!1,this._fadeOutSolveMove(e),this.repeatSolveMoveId=setTimeout(this._showNextMove.bind(this),1500))},a.prototype._sleep=function(e){clearInterval(this.interval),setTimeout(function(){this.interval=setInterval(this.triggerEvent.bind(this),10)}.bind(this),e)},a.prototype._showNextMove=function(){if(0!==this.cube.movesMade.length){var e=this.cube.movesMade[this.cube.movesMade.length-1],t=this._createSolveGlow(e);o.scene.add(t);var r=e.rotationDir*-1;this._animateSolveMove(t,e.rotationAxis,r)}},t.exports=a},{"./globals":6,jquery:1,three:2}],5:[function(e,t,r){function n(){var e=p("#canvas").width(),t=p("#canvas").height(),r=document.getElementById("canvas");f.renderer=new d.WebGLRenderer,f.renderer.setPixelRatio(devicePixelRatio),f.renderer.setSize(e,t),r.appendChild(f.renderer.domElement),f.camera=new d.PerspectiveCamera(70,e/t,1,1e3),f.scene=new d.Scene}function i(e,t){var r=new d.Mesh(e.clone(),t.clone()),n=new d.EdgesHelper(r,0);return n.material.linewidth=7,r.name="cubie",f.allCubes.push(r),f.scene.add(r),f.scene.add(n),r}function o(e){e.faces[0].color.setRGB(1,0,0),e.faces[1].color.setRGB(1,0,0),e.faces[2].color.setRGB(1,.5,0),e.faces[3].color.setRGB(1,.5,0),e.faces[4].color.setRGB(1,1,0),e.faces[5].color.setRGB(1,1,0),e.faces[6].color.setRGB(1,1,1),e.faces[7].color.setRGB(1,1,1),e.faces[8].color.setRGB(0,0,1),e.faces[9].color.setRGB(0,0,1),e.faces[10].color.setRGB(0,1,0),e.faces[11].color.setRGB(0,1,0)}function a(e,t){for(var r=0;r<2;r++)for(var n=0;n<f.cubeDimensions-2;n++)for(var o=0;o<f.cubeDimensions-2;o++){var a=i(e,t);a.position.set(f.cubeStartPos-(o+1)*(f.cubieSize+f.cubieOffset),f.cubeStartPos-(n+1)*(f.cubieSize+f.cubieOffset),f.cubeStartPos-2*r*f.cubeStartPos)}}function s(e,t){for(var r=0;r<2;r++)for(var n=0;n<f.cubeDimensions;n++)for(var o=0;o<f.cubeDimensions;o++){var a=i(e,t);a.position.set(f.cubeStartPos-2*r*f.cubeStartPos,f.cubeStartPos-n*(f.cubieSize+f.cubieOffset),f.cubeStartPos-o*(f.cubieSize+f.cubieOffset))}}function c(e,t){for(var r=0;r<2;r++)for(var n=0;n<f.cubeDimensions-2;n++)for(var o=0;o<f.cubeDimensions;o++){var a=i(e,t);a.position.set(f.cubeStartPos-(n+1)*(f.cubieSize+f.cubieOffset),f.cubeStartPos-2*r*f.cubeStartPos,f.cubeStartPos-o*(f.cubieSize+f.cubieOffset))}}var l,u,h,p=e("jquery"),d=e("three"),f=e("./globals").getGlobals(),m=function(){function e(){var e,t=l.width(),r=l.height(),n=p(window).width(),i=p(window).height();n>i?(e=n/t,r*e>i&&(e=i/r)):(e=i/r,t*e>n&&(e=n/t));var o=p("#sidebar").width(),a=n-o;p("#canvas").css("left",o+.15*a+"px"),p("#canvas").css("width",t*e*h+"px"),p("#canvas").css("height",r*e*h+"px"),f.camera.aspect=t*e/(r*e),f.camera.updateProjectionMatrix(),f.renderer.setSize(t*e*h,r*e*h),f.renderer.render(f.scene,f.camera)}l=p("#canvas"),u=null,h=.9,e(),p(window).resize(function(){clearTimeout(e),setTimeout(e,100)}),p(".scramble").on("click",function(){eventHandler.scramble()}),p(".solve.enabled").on("click",function(){eventHandler.solve()}),p(".display-solve-moves.enabled").on("click",function(){eventHandler.displaySolveMoves()}),3===f.cubeDimensions&&(p(".sample").css("display","block"),p(".sample").on("click",function(){eventHandler.solve(),eventHandler.sampleSolve()})),setInterval(function(){for(var e=["red","yellow","blue","green","orange","purple"],t=~~(Math.random()*e.length);e[t]===p(".title").css("color");)t=~~(Math.random()*e.length);p(".title").css("color",e[t])},5e3)};t.exports=m;var p=e("jquery"),d=e("three"),f=e("./globals").getGlobals(),v=function(e){this.cube=e,this._eventLoop=[],this.scrambleMoves=[],this.scrambled=!1,this._timing=!1,this._sampling=!1,p(window).on("keyup",this.handleEvents.bind(this)),p("#canvas").on("mousedown",this.click.bind(this)),this.interval=setInterval(this.triggerEvent.bind(this),10),this.keyCodeMap={32:"space",65:"a",67:"c",68:"d",69:"e",70:"f",71:"g",72:"h",73:"i",74:"j",75:"k",76:"l",77:"m",78:"n",79:"o",80:"p",81:"q",82:"r",83:"s",84:"t",85:"u",86:"v",87:"w",89:"y",90:"z",186:";",191:"/"}};v.prototype.click=function(e){if(!this.cube.animating){for(var t,r=this._getIntersects(e),n=0;n<r.length;n++)if("cubie"===r[n].object.name){t=r[n];break}if(!t){var i=function(t){this._rotateCube(e,t)};return void p("#canvas").one("mouseup",i.bind(this))}var o=new d.Matrix4;o=o.extractRotation(t.object.matrixWorld),o=o.multiplyVector3(t.face.normal.clone());var a;1===o.x?a="x":1===o.y?a="y":1===o.z&&(a="z");var i=function(r){this._mouseUp(t.object,a,e,r)};p("#canvas").one("mouseup",i.bind(this))}},v.prototype.detectTimerStart=function(e){this.scrambled&&!this.timing&&"click"===e&&this.startTimer();var t=this.cube.keyToMoveMap[e];t&&(["left","right","up","down"].indexOf(t)>-1||this.scrambled&&!this.timing&&this.startTimer())},v.prototype.displayElapsedTime=function(){this.startTime=this.startTime||new Date;var e=Math.round(parseInt(new Date-this.startTime)/10)/100;p(".timer").text(e.toFixed(2))},v.prototype.displaySolveMoves=function(){clearTimeout(this.repeatSolveMoveId),this._showNextMove()},v.prototype.handleEvents=function(e){var t=this.keyCodeMap[e.keyCode];switch(this.detectTimerStart(t),t){case"space":return void(this.cube.isSolved?this.scramble():this.solve());case void 0:return}var r=this.cube.keyToMoveMap[t];this._eventLoop.push(function(){this.cube.move(r)}.bind(this))},v.prototype.sampleSolve=function(){if(!this._sampling){this._sampling=!0,clearTimeout(this.repeatSolveMoveId);for(var e="iqssdllklffesshqsfpgldsdpjllhh",t=" ;; yy; ;; a ; dkgjijdjyy ; ; fijiifi ; ;; jejdijk;ijjkfdjjeajefd hejjdjjdhheh f kfi;ii;skjifilhh",r=0;r<e.length;r++)this._eventLoop.push(this.cube.move.bind(this.cube,this.cube.keyToMoveMap[e[r]]));for(var r=0;r<t.length;r++)" "===t[r]?this._eventLoop.push(this._sleep.bind(this,400)):this._eventLoop.push(this.cube.move.bind(this.cube,this.cube.keyToMoveMap[t[r]]));this._eventLoop.push(function(){this._sampling=!1}.bind(this))}},v.prototype.scramble=function(){this.scrambled=!0,p(".timer").text("0.00").css("color","white");for(var e=0;e<scrambleLength;e++)this._eventLoop.push(function(){var e=this.cube.randomMove();this.cube.move(e)}.bind(this))},v.prototype.solve=function(){if(!this.cube.animating){for(;this.cube.movesMade.length>0;){var e=this.cube.movesMade.pop();e.rotationDir*=-1,this._eventLoop.push(this.cube.move.bind(this.cube,e))}this.scrambled=!1}},v.prototype.startTimer=function(){p(".timer").css("color","red"),this.timeId=setInterval(this.displayElapsedTime.bind(this),.06),this.scrambled=!1,this._timing=!0},v.prototype.stopTimer=function(){clearInterval(this.timeId),this._timing=!1;var e=Math.round(parseInt(new Date-this.startTime)/10)/100;p(".timer").text(e).css("color","green")},v.prototype.triggerEvent=function(){this.cube.isSolved&&this._timing&&(this.stopTimer(),this._eventLoop=[],this.startTime=void 0),!this.cube.animating&&this._eventLoop.length>0&&this._eventLoop.shift()(),this.cube.isSolved?(clearInterval(this.repeatSolveMoveId),p(".solve").removeClass("enabled").addClass("disabled"),p(".display-solve-moves").removeClass("enabled").addClass("disabled")):(p(".solve").removeClass("disabled").addClass("enabled"),p(".display-solve-moves").removeClass("disabled").addClass("enabled"))},v.prototype._animateSolveMove=function(e,t,r){var n=requestAnimationFrame(function(){this._animateSolveMove(e,t,r),f.renderer.render(f.scene,f.camera)}.bind(this));e.material.opacity+=.02,e.material.opacity>=.2&&!this.rotating&&this._rotateSolveMove(e,t,r),e.material.opacity>=.8&&cancelAnimationFrame(n)},v.prototype._createSolveGlow=function(e){var t=new d.MeshBasicMaterial({color:16776960}),r=new d.Vector3(f.cubieSize*f.cubeDimensions,f.cubieSize*f.cubeDimensions,f.cubieSize*f.cubeDimensions);r[e.rotationAxis]=f.cubieSize,e.cubesToRotate.length===f.allCubes.length&&(r[e.rotationAxis]=f.cubieSize*f.cubeDimensions);var n=new d.BoxGeometry(r.x,r.y,r.z),i=new d.Mesh(n,t),o=new d.Vector3(0,0,0),a=~~(e.cubesToRotate.length/2),s=e.cubesToRotate[a].position;return o[e.rotationAxis]=s[e.rotationAxis],i.position.copy(o),e.cubesToRotate.length===f.allCubes.length&&i.position.copy(new d.Vector3),i.scale.multiplyScalar(1.1),i.material.transparent=!0,i.material.opacity=0,i},v.prototype._fadeOutSolveMove=function(e,t){var r=requestAnimationFrame(function(){this._fadeOutSolveMove(e),f.renderer.render(f.scene,f.camera)}.bind(this));e.material.opacity-=.04,e.material.opacity<=0&&(cancelAnimationFrame(r),f.scene.remove(e))},v.prototype._getIntersects=function(e){var t=f.renderer.domElement.getBoundingClientRect(),r=e.clientX-t.left,n=e.clientY-t.top,i=new d.Vector2;i.x=r/f.renderer.domElement.clientWidth*2-1,i.y=2*-(n/f.renderer.domElement.clientHeight)+1;var o=new d.Raycaster;return o.setFromCamera(i,f.camera),o.intersectObjects(f.scene.children)},v.prototype._mouseUp=function(e,t,r,n){var i=["x","z","y"];i.splice(i.indexOf(t),1);var o=e.position.clone();o[t]=window.cubeStartPos;var a,s,c=new d.Vector3,l={axis:t,mag:-1},u=1;if(n.clientX>r.clientX+40||n.clientX<r.clientX-40)o[i[0]]=window.cubeStartPos+200,c[i[0]]=-1,s=i[1],n.clientX<r.clientX-40&&(u*=-1),"y"===t&&(u*=-1);else{if(!(n.clientY>r.clientY+40||n.clientY<r.clientY-40))return;o[i[1]]=window.cubeStartPos+200,c[i[1]]=-1,s=i[0],n.clientY<r.clientY-40&&(u*=-1),"x"===t&&(u*=-1)}var a=this.cube.captureCubes(o,c,l);moveDetails={cubesToRotate:a,rotationAxis:s,rotationDir:u},this._eventLoop.push(function(){this.cube.move(moveDetails)}.bind(this)),this.detectTimerStart("click")},v.prototype._rotateCube=function(e,t){t.clientX<e.clientX-40&&(this._eventLoop.push(this.cube.move.bind(this.cube,"right")),this.scrambleMoves.push("left")),t.clientX>e.clientX+40&&(this._eventLoop.push(this.cube.move.bind(this.cube,"left")),this.scrambleMoves.push("right")),t.clientY>e.clientY+40&&(this._eventLoop.push(this.cube.move.bind(this.cube,"up")),this.scrambleMoves.push("down")),t.clientY<e.clientY-40&&(this._eventLoop.push(this.cube.move.bind(this.cube,"down")),this.scrambleMoves.push("up"))},v.prototype._rotateSolveMove=function(e,t,r){this.rotating=!0;var n=requestAnimationFrame(function(){this._rotateSolveMove(e,t,r),f.renderer.render(f.scene,f.camera)}.bind(this));e.rotation[t]+=r*(Math.PI/2)/32,(e.rotation[t]>=Math.PI/2||e.rotation[t]<=-Math.PI/2)&&(cancelAnimationFrame(n),this.rotating=!1,this._fadeOutSolveMove(e),this.repeatSolveMoveId=setTimeout(this._showNextMove.bind(this),1500))},v.prototype._sleep=function(e){clearInterval(this.interval),setTimeout(function(){this.interval=setInterval(this.triggerEvent.bind(this),10)}.bind(this),e)},v.prototype._showNextMove=function(){if(0!==this.cube.movesMade.length){var e=this.cube.movesMade[this.cube.movesMade.length-1],t=this._createSolveGlow(e);f.scene.add(t);var r=e.rotationDir*-1;this._animateSolveMove(t,e.rotationAxis,r)}},t.exports=v;var p=e("jquery"),d=e("three"),f={},g=function(e){f.cubeDimensions=e,f.cubieSize=125-(20-(e-2))*(e-2),f.cubieSize<40&&(f.cubieSize=40),f.cubieOffset=3,f.cubeStartPos=(e-1)/2*(f.cubieSize+f.cubieOffset),f.scrambleLength=25+3*(e-3),f.allCubes=[],n()},y=function(){return f};t.exports={setGlobals:g,getGlobals:y};var p=e("jquery"),d=e("three"),f=e("./globals").getGlobals(),x=e("./rubiks_cube"),v=e("./event_handler"),b=function(){
var e=new d.MeshBasicMaterial({color:16777215,vertexColors:d.FaceColors}),t=new d.BoxGeometry(f.cubieSize,f.cubieSize,f.cubieSize);o(t),s(t,e),c(t,e),a(t,e),f.camera.position.x=250,f.camera.position.y=300,f.camera.position.z=500,f.camera.lookAt(new d.Vector3);var r=new x;new v(r)};t.exports=b;var p=e("jquery"),g=e("./globals").setGlobals,b=e("./init"),m=e("./add_events");p(document).ready(function(){setTimeout(function(){p(".backdrop").addClass("transition"),p(".select").addClass("show")},200),p(".cube-size span").click(function(e){p(".select").removeClass("show"),p(".select").one("transitionend",function(){p(".select").remove(),p(".backdrop").removeClass("transition"),p(".backdrop").one("transitionend",function(){p(".backdrop").remove()})});var t=parseInt(p(e.currentTarget).attr("id"));g(t),b(),m()})});var p=e("jquery"),d=e("three"),f=e("./globals").getGlobals(),w=function(){this.movesMade=[],this.animating=!1,this.isSolved=!0,this.r={cubes:[],rotationAxis:"x",rotationDir:-1,vector:{startPos:new d.Vector3(f.cubeStartPos,f.cubeStartPos,f.cubeStartPos+100),rayDir:new d.Vector3(0,0,(-1)),sliceDir:{axis:"y",mag:-1}}},this.l={cubes:[],rotationAxis:"x",rotationDir:1,vector:{startPos:new d.Vector3((-f.cubeStartPos),f.cubeStartPos,(-(f.cubeStartPos+100))),rayDir:new d.Vector3(0,0,1),sliceDir:{axis:"y",mag:-1}}},this.u={cubes:[],rotationAxis:"y",rotationDir:-1,vector:{startPos:new d.Vector3((-(f.cubeStartPos+100)),f.cubeStartPos,(-f.cubeStartPos)),rayDir:new d.Vector3(1,0,0),sliceDir:{axis:"z",mag:1}}},this.d={cubes:[],rotationAxis:"y",rotationDir:1,vector:{startPos:new d.Vector3((-(f.cubeStartPos+100)),(-f.cubeStartPos),f.cubeStartPos),rayDir:new d.Vector3(1,0,0),sliceDir:{axis:"z",mag:-1}}},this.b={cubes:[],rotationAxis:"z",rotationDir:1,vector:{startPos:new d.Vector3(f.cubeStartPos+100,f.cubeStartPos,(-f.cubeStartPos)),rayDir:new d.Vector3((-1),0,0),sliceDir:{axis:"y",mag:-1}}},this.f={cubes:[],rotationAxis:"z",rotationDir:-1,vector:{startPos:new d.Vector3((-(f.cubeStartPos+100)),f.cubeStartPos,f.cubeStartPos),rayDir:new d.Vector3(1,0,0),sliceDir:{axis:"y",mag:-1}}},this.m={cubes:[],rotationAxis:"x",rotationDir:1,vector:{startPos:new d.Vector3(0,f.cubeStartPos,f.cubeStartPos+100),rayDir:new d.Vector3(0,0,(-1)),sliceDir:{axis:"y",mag:-1}}},this.e={cubes:[],rotationAxis:"y",rotationDir:1,vector:{startPos:new d.Vector3((-f.cubeStartPos),0,f.cubeStartPos+100),rayDir:new d.Vector3(0,0,(-1)),sliceDir:{axis:"x",mag:1}}},this.s={cubes:[],rotationAxis:"z",rotationDir:-1,vector:{startPos:new d.Vector3(f.cubeStartPos+100,f.cubeStartPos,0),rayDir:new d.Vector3((-1),0,0),sliceDir:{axis:"y",mag:-1}}},this.faces=["r","l","u","d","f","b","m","e","s"],this.possibleMoves=["r","rPrime","l","lPrime","u","uPrime","d","dPrime","f","fPrime","b","bPrime","m","mPrime","e","ePrime","s","sPrime"],f.cubeDimensions>3&&(this.possibleMoves=this.possibleMoves.concat(["rDouble","rDoublePrime","lDouble","lDoublePrime","left","right"]))};w.prototype.moveToKeyMap={b:"q",bPrime:"p",d:"s",down:"y",dPrime:"l",e:"z",ePrime:"/",f:"h",fPrime:"g",l:"d",lDouble:"c",lDoublePrime:"r",left:"a",lPrime:"e",m:"v",mPrime:"t",r:"i",rDouble:"u",rDoublePrime:"m",right:";",rPrime:"k",u:"j",up:"n",uPrime:"f",s:"o",sPrime:"w"},w.prototype.keyToMoveMap={a:"left",c:"lDouble",d:"l",e:"lPrime",f:"uPrime",g:"fPrime",h:"f",i:"r",j:"u",k:"rPrime",l:"dPrime",m:"rDoublePrime",n:"up",o:"s",p:"bPrime",q:"b",r:"lDoublePrime",s:"d",t:"mPrime",u:"rDouble",v:"m",w:"sPrime",y:"down",z:"e",";":"right","/":"ePrime"},w.prototype.animate=function(e,t,r){this.animating=!0;var n=requestAnimationFrame(function(){this.animate(e,t,r),f.renderer.render(f.scene,f.camera)}.bind(this));e.rotation[t]+=r*(Math.PI/2)/8,f.renderer.render(f.scene,f.camera),(e.rotation[t]>=Math.PI/2||e.rotation[t]<=-Math.PI/2)&&this.finishAnimation(e,n)},w.prototype.captureCubes=function(e,t,r){e=e.clone(),t=t.clone();for(var n,i=[],o=[],a=0;a<f.cubeDimensions;a++){n=new d.Raycaster(e,t),i=i.concat(n.intersectObjects(f.scene.children));var s=(f.cubieSize+f.cubieOffset)*r.mag;e[r.axis]+=s}for(var a=0;a<i.length;a++)"cubie"===i[a].object.name&&o.indexOf(i[a].object)===-1&&o.push(i[a].object);return o},w.prototype.captureMiddles=function(e){var t=this[e].vector,r=t.startPos.clone(),n=t.startPos.clone();r[this[e].rotationAxis]+=f.cubieSize*this[e].rotationDir,n[this[e].rotationAxis]-=f.cubieSize*this[e].rotationDir;var i=this.captureCubes(r,t.rayDir,t.sliceDir),o=this.captureCubes(n,t.rayDir,t.sliceDir);return i.concat(o)},w.prototype.checkCorrectMove=function(e){if(0===this.movesMade.length)return void this.movesMade.push(e);var t=this.movesMade[this.movesMade.length-1];this.isOppositeMove(e,t)?this.movesMade.pop():this.movesMade.push(e)},w.prototype.finishAnimation=function(e,t){for(cancelAnimationFrame(t),this.animating=!1;e.children.length>0;)d.SceneUtils.detach(e.children[0],e,f.scene);f.scene.remove(e),this._updateSolveState()},w.prototype.getColorsOfFace=function(e){for(var t,r,n,i,o=this.captureCubes(this[e].vector.startPos.clone(),this[e].vector.rayDir,this[e].vector.sliceDir),a=[],s=0;s<o.length;s++){var c=["x","y","z"];c.splice(c.indexOf(this[e].rotationAxis),1),t=o[s].position.clone(),t[c[0]]+=f.cubieOffset+1,t[c[1]]+=f.cubieOffset+1,t[this[e].rotationAxis]=f.cubeStartPos+200,r=new d.Vector3,r[this[e].rotationAxis]=this[e].rotationDir,n=new d.Raycaster(t,r),i=n.intersectObjects(f.scene.children);for(var l=0;l<i.length;l++)if("cubie"===i[l].object.name){a.push(i[l].face.color);break}}return a},w.prototype.getMoveDetailsOfFace=function(e){var t=this[e[0]],r=this.captureCubes(t.vector.startPos,t.vector.rayDir,t.vector.sliceDir),n=t.rotationAxis,i=t.rotationDir;if(e.indexOf("Prime")>-1&&(i*=-1),e.indexOf("Double")>-1){var o=t.vector.startPos.clone();o[t.rotationAxis]+=f.cubieSize*t.rotationDir;var a=this.captureCubes(o,t.vector.rayDir,t.vector.sliceDir)}return["m","e","s"].indexOf(e[0])>-1&&f.cubeDimensions%2===0&&(r=this.captureMiddles(e[0])),{cubesToRotate:r,secondaryCubes:a,rotationAxis:n,rotationDir:i}},w.prototype.isOppositeMove=function(e,t){var r=e.rotationAxis===t.rotationAxis,n=e.rotationDir===t.rotationDir,i=~~e.cubesToRotate[0].position[e.rotationAxis],o=~~t.cubesToRotate[0].position[t.rotationAxis];return r&&!n&&i===o},w.prototype.move=function(e){this._updateSolveState(e);var t=e;"string"==typeof e&&(t=["up","down","right","left"].indexOf(e)>-1?this.getMoveDetailsOfRotation(e):this.getMoveDetailsOfFace(e));for(var r=new d.Object3D,n=0;n<t.cubesToRotate.length;n++)d.SceneUtils.attach(t.cubesToRotate[n],f.scene,r);f.scene.add(r),this.checkCorrectMove({cubesToRotate:t.cubesToRotate,rotationAxis:t.rotationAxis,rotationDir:t.rotationDir}),this.animate(r,t.rotationAxis,t.rotationDir),t.secondaryCubes&&this.move({cubesToRotate:t.secondaryCubes,rotationAxis:t.rotationAxis,rotationDir:t.rotationDir})},w.prototype.oppositeMove=function(e){if("left"===e)return"right";if("right"===e)return"left";if("up"===e)return"down";if("down"===e)return"up";var t=e[0];return e.indexOf("Double")>-1&&(t+="Double"),e.indexOf("Prime")<0&&(t+="Prime"),t},w.prototype.randomMove=function(){var e,t,r,n,i=["x","z","y"],o=new d.Vector3,a=new d.Vector3,s=i[~~(Math.random()*i.length)];i.splice(i.indexOf(s),1),e={axis:s,mag:-1};var c=i[~~(Math.random()*i.length)];i.splice(i.indexOf(c),1),a[i[0]]=-1,r=c;var l=~~(Math.random()*f.cubeDimensions);return o[c]=f.cubeStartPos-l*(f.cubieSize+f.cubieOffset),o[i[0]]=f.cubeStartPos+200,o[s]=f.cubeStartPos,t=this.captureCubes(o,a,e),n=Math.random()<.5?-1:1,{cubesToRotate:t,rotationAxis:r,rotationDir:n}},w.prototype.getMoveDetailsOfRotation=function(e){var t,r;return"left"===e?(t="y",r=1):"right"===e?(t="y",r=-1):"up"===e?(t="x",r=1):"down"===e&&(t="x",r=-1),{cubesToRotate:f.allCubes,rotationAxis:t,rotationDir:r}},w.prototype._colorsAreSame=function(e){if(0!==e.length){for(var t,r=e[0],n=1;n<e.length;n++)if(t=e[n],!r.equals(e[n]))return!1;return!0}},w.prototype._updateSolveState=function(e){this.animating&&(this.isSolved=!1);var t=this.getColorsOfFace("r"),r=this.getColorsOfFace("u"),n=this.getColorsOfFace("f");this._colorsAreSame(t)&&this._colorsAreSame(n)&&this._colorsAreSame(r)&&(this.isSolved=!0,this.movesMade=[]),this.isSolved&&void 0!==e&&["left","right","up","down"].indexOf(e)<0&&(this.isSolved=!1)},t.exports=w},{"./add_events":3,"./event_handler":4,"./globals":6,"./init":7,"./rubiks_cube":8,jquery:1,three:2}],6:[function(e,t,r){function n(){var e=i("#canvas").width(),t=i("#canvas").height(),r=document.getElementById("canvas");a.renderer=new o.WebGLRenderer,a.renderer.setPixelRatio(devicePixelRatio),a.renderer.setSize(e,t),r.appendChild(a.renderer.domElement),a.camera=new o.PerspectiveCamera(70,e/t,1,1e3),a.scene=new o.Scene}var i=e("jquery"),o=e("three"),a={},s=function(e){a.cubeDimensions=e,a.cubieSize=125-(20-(e-2))*(e-2),a.cubieSize<40&&(a.cubieSize=40),a.cubieOffset=3,a.cubeStartPos=(e-1)/2*(a.cubieSize+a.cubieOffset),a.scrambleLength=25+3*(e-3),a.allCubes=[],n()},c=function(){return a};t.exports={setGlobals:s,getGlobals:c}},{jquery:1,three:2}],7:[function(e,t,r){function n(e,t){var r=new c.Mesh(e.clone(),t.clone()),n=new c.EdgesHelper(r,0);return n.material.linewidth=7,r.name="cubie",l.allCubes.push(r),l.scene.add(r),l.scene.add(n),r}function i(e){e.faces[0].color.setRGB(1,0,0),e.faces[1].color.setRGB(1,0,0),e.faces[2].color.setRGB(1,.5,0),e.faces[3].color.setRGB(1,.5,0),e.faces[4].color.setRGB(1,1,0),e.faces[5].color.setRGB(1,1,0),e.faces[6].color.setRGB(1,1,1),e.faces[7].color.setRGB(1,1,1),e.faces[8].color.setRGB(0,0,1),e.faces[9].color.setRGB(0,0,1),e.faces[10].color.setRGB(0,1,0),e.faces[11].color.setRGB(0,1,0)}function o(e,t){for(var r=0;r<2;r++)for(var i=0;i<l.cubeDimensions-2;i++)for(var o=0;o<l.cubeDimensions-2;o++){var a=n(e,t);a.position.set(l.cubeStartPos-(o+1)*(l.cubieSize+l.cubieOffset),l.cubeStartPos-(i+1)*(l.cubieSize+l.cubieOffset),l.cubeStartPos-2*r*l.cubeStartPos)}}function a(e,t){for(var r=0;r<2;r++)for(var i=0;i<l.cubeDimensions;i++)for(var o=0;o<l.cubeDimensions;o++){var a=n(e,t);a.position.set(l.cubeStartPos-2*r*l.cubeStartPos,l.cubeStartPos-i*(l.cubieSize+l.cubieOffset),l.cubeStartPos-o*(l.cubieSize+l.cubieOffset))}}function s(e,t){for(var r=0;r<2;r++)for(var i=0;i<l.cubeDimensions-2;i++)for(var o=0;o<l.cubeDimensions;o++){var a=n(e,t);a.position.set(l.cubeStartPos-(i+1)*(l.cubieSize+l.cubieOffset),l.cubeStartPos-2*r*l.cubeStartPos,l.cubeStartPos-o*(l.cubieSize+l.cubieOffset))}}var c=(e("jquery"),e("three")),l=e("./globals").getGlobals(),u=e("./rubiks_cube"),h=e("./event_handler"),p=function(){var e=new c.MeshBasicMaterial({color:16777215,vertexColors:c.FaceColors}),t=new c.BoxGeometry(l.cubieSize,l.cubieSize,l.cubieSize);i(t),a(t,e),s(t,e),o(t,e),l.camera.position.x=250,l.camera.position.y=300,l.camera.position.z=500,l.camera.lookAt(new c.Vector3);var r=new u;new h(r)};t.exports=p},{"./event_handler":4,"./globals":6,"./rubiks_cube":8,jquery:1,three:2}],8:[function(e,t,r){var n=(e("jquery"),e("three")),i=e("./globals").getGlobals(),o=function(){this.movesMade=[],this.animating=!1,this.isSolved=!0,this.r={cubes:[],rotationAxis:"x",rotationDir:-1,vector:{startPos:new n.Vector3(i.cubeStartPos,i.cubeStartPos,i.cubeStartPos+100),rayDir:new n.Vector3(0,0,(-1)),sliceDir:{axis:"y",mag:-1}}},this.l={cubes:[],rotationAxis:"x",rotationDir:1,vector:{startPos:new n.Vector3((-i.cubeStartPos),i.cubeStartPos,(-(i.cubeStartPos+100))),rayDir:new n.Vector3(0,0,1),sliceDir:{axis:"y",mag:-1}}},this.u={cubes:[],rotationAxis:"y",rotationDir:-1,vector:{startPos:new n.Vector3((-(i.cubeStartPos+100)),i.cubeStartPos,(-i.cubeStartPos)),rayDir:new n.Vector3(1,0,0),sliceDir:{axis:"z",mag:1}}},this.d={cubes:[],rotationAxis:"y",rotationDir:1,vector:{startPos:new n.Vector3((-(i.cubeStartPos+100)),(-i.cubeStartPos),i.cubeStartPos),rayDir:new n.Vector3(1,0,0),sliceDir:{axis:"z",mag:-1}}},this.b={cubes:[],rotationAxis:"z",rotationDir:1,vector:{startPos:new n.Vector3(i.cubeStartPos+100,i.cubeStartPos,(-i.cubeStartPos)),rayDir:new n.Vector3((-1),0,0),sliceDir:{axis:"y",mag:-1}}},this.f={cubes:[],rotationAxis:"z",rotationDir:-1,vector:{startPos:new n.Vector3((-(i.cubeStartPos+100)),i.cubeStartPos,i.cubeStartPos),rayDir:new n.Vector3(1,0,0),sliceDir:{axis:"y",mag:-1}}},this.m={cubes:[],rotationAxis:"x",rotationDir:1,vector:{startPos:new n.Vector3(0,i.cubeStartPos,i.cubeStartPos+100),rayDir:new n.Vector3(0,0,(-1)),sliceDir:{axis:"y",mag:-1}}},this.e={cubes:[],rotationAxis:"y",rotationDir:1,vector:{startPos:new n.Vector3((-i.cubeStartPos),0,i.cubeStartPos+100),rayDir:new n.Vector3(0,0,(-1)),sliceDir:{axis:"x",mag:1}}},this.s={cubes:[],rotationAxis:"z",rotationDir:-1,vector:{startPos:new n.Vector3(i.cubeStartPos+100,i.cubeStartPos,0),rayDir:new n.Vector3((-1),0,0),sliceDir:{axis:"y",mag:-1}}},this.faces=["r","l","u","d","f","b","m","e","s"],this.possibleMoves=["r","rPrime","l","lPrime","u","uPrime","d","dPrime","f","fPrime","b","bPrime","m","mPrime","e","ePrime","s","sPrime"],i.cubeDimensions>3&&(this.possibleMoves=this.possibleMoves.concat(["rDouble","rDoublePrime","lDouble","lDoublePrime","left","right"]))};o.prototype.moveToKeyMap={b:"q",bPrime:"p",d:"s",down:"y",dPrime:"l",e:"z",ePrime:"/",f:"h",fPrime:"g",l:"d",lDouble:"c",lDoublePrime:"r",left:"a",lPrime:"e",m:"v",mPrime:"t",r:"i",rDouble:"u",rDoublePrime:"m",right:";",rPrime:"k",u:"j",up:"n",uPrime:"f",s:"o",sPrime:"w"},o.prototype.keyToMoveMap={a:"left",c:"lDouble",d:"l",e:"lPrime",f:"uPrime",g:"fPrime",h:"f",i:"r",j:"u",k:"rPrime",l:"dPrime",m:"rDoublePrime",n:"up",o:"s",p:"bPrime",q:"b",r:"lDoublePrime",s:"d",t:"mPrime",u:"rDouble",v:"m",w:"sPrime",y:"down",z:"e",";":"right","/":"ePrime"},o.prototype.animate=function(e,t,r){this.animating=!0;var n=requestAnimationFrame(function(){this.animate(e,t,r),i.renderer.render(i.scene,i.camera)}.bind(this));e.rotation[t]+=r*(Math.PI/2)/8,i.renderer.render(i.scene,i.camera),(e.rotation[t]>=Math.PI/2||e.rotation[t]<=-Math.PI/2)&&this.finishAnimation(e,n)},o.prototype.captureCubes=function(e,t,r){e=e.clone(),t=t.clone();for(var o,a=[],s=[],c=0;c<i.cubeDimensions;c++){o=new n.Raycaster(e,t),a=a.concat(o.intersectObjects(i.scene.children));var l=(i.cubieSize+i.cubieOffset)*r.mag;e[r.axis]+=l}for(var c=0;c<a.length;c++)"cubie"===a[c].object.name&&s.indexOf(a[c].object)===-1&&s.push(a[c].object);return s},o.prototype.captureMiddles=function(e){var t=this[e].vector,r=t.startPos.clone(),n=t.startPos.clone();r[this[e].rotationAxis]+=i.cubieSize*this[e].rotationDir,n[this[e].rotationAxis]-=i.cubieSize*this[e].rotationDir;var o=this.captureCubes(r,t.rayDir,t.sliceDir),a=this.captureCubes(n,t.rayDir,t.sliceDir);return o.concat(a)},o.prototype.checkCorrectMove=function(e){if(0===this.movesMade.length)return void this.movesMade.push(e);var t=this.movesMade[this.movesMade.length-1];this.isOppositeMove(e,t)?this.movesMade.pop():this.movesMade.push(e)},o.prototype.finishAnimation=function(e,t){for(cancelAnimationFrame(t),this.animating=!1;e.children.length>0;)n.SceneUtils.detach(e.children[0],e,i.scene);i.scene.remove(e),this._updateSolveState()},o.prototype.getColorsOfFace=function(e){for(var t,r,o,a,s=this.captureCubes(this[e].vector.startPos.clone(),this[e].vector.rayDir,this[e].vector.sliceDir),c=[],l=0;l<s.length;l++){var u=["x","y","z"];u.splice(u.indexOf(this[e].rotationAxis),1),t=s[l].position.clone(),t[u[0]]+=i.cubieOffset+1,t[u[1]]+=i.cubieOffset+1,t[this[e].rotationAxis]=i.cubeStartPos+200,r=new n.Vector3,r[this[e].rotationAxis]=this[e].rotationDir,o=new n.Raycaster(t,r),a=o.intersectObjects(i.scene.children);for(var h=0;h<a.length;h++)if("cubie"===a[h].object.name){c.push(a[h].face.color);break}}return c},o.prototype.getMoveDetailsOfFace=function(e){var t=this[e[0]],r=this.captureCubes(t.vector.startPos,t.vector.rayDir,t.vector.sliceDir),n=t.rotationAxis,o=t.rotationDir;if(e.indexOf("Prime")>-1&&(o*=-1),e.indexOf("Double")>-1){var a=t.vector.startPos.clone();a[t.rotationAxis]+=i.cubieSize*t.rotationDir;var s=this.captureCubes(a,t.vector.rayDir,t.vector.sliceDir)}return["m","e","s"].indexOf(e[0])>-1&&i.cubeDimensions%2===0&&(r=this.captureMiddles(e[0])),{cubesToRotate:r,secondaryCubes:s,rotationAxis:n,rotationDir:o}},o.prototype.isOppositeMove=function(e,t){var r=e.rotationAxis===t.rotationAxis,n=e.rotationDir===t.rotationDir,i=~~e.cubesToRotate[0].position[e.rotationAxis],o=~~t.cubesToRotate[0].position[t.rotationAxis];return r&&!n&&i===o},o.prototype.move=function(e){this._updateSolveState(e);var t=e;"string"==typeof e&&(t=["up","down","right","left"].indexOf(e)>-1?this.getMoveDetailsOfRotation(e):this.getMoveDetailsOfFace(e));for(var r=new n.Object3D,o=0;o<t.cubesToRotate.length;o++)n.SceneUtils.attach(t.cubesToRotate[o],i.scene,r);i.scene.add(r),this.checkCorrectMove({cubesToRotate:t.cubesToRotate,rotationAxis:t.rotationAxis,rotationDir:t.rotationDir}),this.animate(r,t.rotationAxis,t.rotationDir),t.secondaryCubes&&this.move({cubesToRotate:t.secondaryCubes,rotationAxis:t.rotationAxis,rotationDir:t.rotationDir})},o.prototype.oppositeMove=function(e){if("left"===e)return"right";if("right"===e)return"left";if("up"===e)return"down";if("down"===e)return"up";var t=e[0];return e.indexOf("Double")>-1&&(t+="Double"),e.indexOf("Prime")<0&&(t+="Prime"),t},o.prototype.randomMove=function(){var e,t,r,o,a=["x","z","y"],s=new n.Vector3,c=new n.Vector3,l=a[~~(Math.random()*a.length)];a.splice(a.indexOf(l),1),e={axis:l,mag:-1};var u=a[~~(Math.random()*a.length)];a.splice(a.indexOf(u),1),c[a[0]]=-1,r=u;var h=~~(Math.random()*i.cubeDimensions);return s[u]=i.cubeStartPos-h*(i.cubieSize+i.cubieOffset),s[a[0]]=i.cubeStartPos+200,s[l]=i.cubeStartPos,t=this.captureCubes(s,c,e),o=Math.random()<.5?-1:1,{cubesToRotate:t,rotationAxis:r,rotationDir:o}},o.prototype.getMoveDetailsOfRotation=function(e){var t,r;return"left"===e?(t="y",r=1):"right"===e?(t="y",r=-1):"up"===e?(t="x",r=1):"down"===e&&(t="x",r=-1),{cubesToRotate:i.allCubes,rotationAxis:t,rotationDir:r}},o.prototype._colorsAreSame=function(e){if(0!==e.length){for(var t,r=e[0],n=1;n<e.length;n++)if(t=e[n],!r.equals(e[n]))return!1;return!0}},o.prototype._updateSolveState=function(e){this.animating&&(this.isSolved=!1);var t=this.getColorsOfFace("r"),r=this.getColorsOfFace("u"),n=this.getColorsOfFace("f");this._colorsAreSame(t)&&this._colorsAreSame(n)&&this._colorsAreSame(r)&&(this.isSolved=!0,this.movesMade=[]),this.isSolved&&void 0!==e&&["left","right","up","down"].indexOf(e)<0&&(this.isSolved=!1)},t.exports=o},{"./globals":6,jquery:1,three:2}]},{},[5]);
//# sourceMappingURL=data:application/json;base64,
